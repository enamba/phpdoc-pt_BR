<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.10 Maintainer: andre_ae Status: ready -->
<!--
   TODO:

     The command line options not in the
     list, but in the -h output below:

       -e, -z

     It would be best to document these, and
     collect more info about -c and -d!
-->
<appendix id="commandline">
 <title>Usando o PHP na linha de comando</title>
 <para>
  As opções de linha de comando para o executável do PHP são úteis
  se você deseja debugar ou testar a instalação do PHP, mas
  pode ser mais que isso, se você precisa utilizar o PHP para um
  propósito diferente do script para Web.
 </para>
 <para>
  Note que você sempre pode direcionar a saída do executável do PHP
  para um arquivo externo com o caracter &gt;,
  então <literal>php -q test.php > test.html</literal>
  enviará todo a saída de <filename>test.php</filename>
  sem os headers HTTP para o arquivo <filename>test.html</filename>
  no mesmo diretório.
 </para>
 <para>
  Você só pode utilizar essas opções de linha de comando se você tiver
  o PHP executável. Se você compilou a versão módulo
  e não possui a versão CGI disponível em sua
  máquina, então você não poderá usar essas opções.
  Para os usuários Windows, tanto a versão executável e módulo do PHP
  então na distribuição binária, onde o executável é
  chamado <filename>php.exe</filename>.
 </para>
 <para>
  A seguinte lista das opções de linha de comando está atualizada para o PHP 4.0.6.
  Você pode obter a lista atualizada e algumas descrições com o opcional
  <literal>-h</literal>. A saída de
   <literal>php -h</literal> deverá ser algo como isso:
  <screen>
<![CDATA[
Usage: php [-q] [-h] [-s [-v] [-i] [-f <file>] |  {<file> [args...]}
  -q             Quiet-mode.  Suppress HTTP Header output.
  -s             Display colour syntax highlighted source.
  -f <file>      Parse <file>.  Implies `-q'
  -v             Version number
  -C             Do not chdir to the script's directory
  -c <path>      Look for php.ini file in this directory
  -d foo[=bar]   Define INI entry foo with value 'bar'
  -e             Generate extended information for debugger/profiler
  -z <file>      Load Zend extension <file>.
  -l             Syntax check only (lint)
  -m             Show compiled in modules
  -i             PHP information
  -h             This help
]]>
  </screen>
 </para>
 <para>
  Esta é a lista das mais importantes opções de linha de comando
  com explicações detalhadas.
 </para>
 <para>
  <table>
   <title>Opções de linha de comando</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Opção</entry>
      <entry>Descrição</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>-q</entry>
      <entry>
       Suprime os headers HTTP na saída. Normalmente o PHP imprime
       headers HTTP para o programa chamador (normalmente o servidor web)
       para encaminhar para o browser. Escrevendo aplicações
       para a linha de comando esses headers são desnecessários.
      </entry>
     </row>
     <row>
      <entry>-s</entry>
      <entry>
       Exibe o código fonte com destaque de cores para o arquivo
       interpretado com essa opção. Tem o mesmo efeito de você
       exibir código fonte utilizando a função
       <function>highlight_file</function> num
       script PHP.
      </entry>
     </row>
     <row>
      <entry>-f</entry>
      <entry>
       Interpreta o arquivo informado, e procura por erros de sintaxe ou
       fatais. Essa opção implica em -q. Utilize para
       debugar.
      </entry>
     </row>
     <row>
      <entry>-v</entry>
      <entry>
       Chamando o PHP com essa opção, ele exibe
       o número da sua versão, por exemplo, 4.0.6.
      </entry>
     </row>
     <row>
      <entry>-C</entry>
      <entry>
       Normalmente o PHP altera o diretório de trabalho para
       o diretório de execução do script. Esta opção torna possível,
       por exemplo, abrir arquivos no mesmo diretório,
       apenas especificando o nome do arquivo. Se você
       deseja desativar essa modificação de diretório, basta
       usar a opção.
      </entry>
     </row>
     <row>
      <entry>-c</entry>
      <entry>
       Utilizando essa opção, você pode especificar um caminho alternativo
       para o &php.ini;, então o PHP
       procurará por seu arquivo de configurações neste caminho
       em vez de seu default.
      </entry>
     </row>
     <row>
      <entry>-d</entry>
      <entry>
       Com essa opção, você pode configurar diretivas individuais do
       &php.ini; para
       execução de um script.
      </entry>
     </row>
     <row>
      <entry>-l</entry>
      <entry>
       Verifica o arquivo informado apenas para erros de sintaxe. Esta
       opção implica em -q. Utilize para debugar.
       Esta opção não verifica erros fatais (como funções
       não definidas). Utilize -f para testar 
       erros fatais também.
      </entry>
     </row>
     <row>
      <entry>-m</entry>
      <entry>
       Utilizando esta opção, o PHP imprime a lista dos módulos PHP e Zend
       compilados (e carregados), as versões do PHP e
       Zend e uma pequena informação de copyright
       da Zend.
      </entry>
     </row>
     <row>
      <entry>-i</entry>
      <entry>
       Esta opção chama a função
       <function>phpinfo</function> e imprime
       seus resultados. Se o PHP não estiver funcionando bem,
       é interessante que você faça um <literal>php -i</literal>
       e você verá qualquer mensagem de erro exibida
       antes da tabela de informações.
      </entry>
     </row>
     <row>
      <entry>-h</entry>
      <entry>
       Com essa opção você pode obter informações sobre
       a atual lista de opções de linha de comando e
       pequenas descrições dessas opções.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  O PHP executável pode ser utilizando para rodar scripts PHP absolutamente
  independente de um servidor web. Se você está num sistema Unix,
  você pode acrescentar uma linha especial ao início de seu script e
  torná-lo executável, então o sistema operacional saberá que programa
  deverá rodar o script. Na plataforma Windows, você pode associar
  <literal>php.exe -q</literal> com o clique duplo em arquivos
  <literal>.php</literal> ou fazer um arquivo batch
  para rodar seus scripts através do PHP. A primeira linha acrescentada ao
  script nos Unix não funcionam no Windows, por isso você não pode escrever
  programas independentes de plataforma desse jeito. Um exemplo simples de como escrever
  um programa para a linha de comando segue abaixo:
 </para>
 <example>
  <title>Um script para rodar na linha de comando (script.php)</title>
  <programlisting role="php">
<![CDATA[
#!/usr/bin/php -q
<?php

if ($argc != 2 || in_array($argv[1], array('--help', '-help', '-h', '-?'))) {
?>

Este é um script de linha de comando com um parâmetro.

  Uso:
  <?php echo $argv[0]; ?> <opcao>

  <opcao> pode ser qualquer palavra que
  você queira imprimir. Com as opções --help, -help, -h
  ou -?, você pode obter essa ajuda.

<?php
} else {
    echo $argv[1];
}
?>
]]>
  </programlisting>
 </example>
 <para>
  No script acima, nós utilizamos uma primeira linha especial para indicar
  que este arquivo precisa rodar pelo PHP e que não deve imprimir headers
  HTTP. Há duas variáveis que você precisa conhecer para escrever aplicações
  em linha de comando com o PHP: <varname>$argc</varname> e
  <varname>$argv</varname>. O primeiro é o número de argumentos mais
  um (o nome do script executando). O segundo é um array
  contendo os argumentos, começando com o nome do script no índice
  zero (<varname>$argv[0]</varname>).
 </para>
 <para>
  No programa acima é verificado se há apenas um argumento
  fornecido. Se o argumento for <literal>--help</literal>,
  <literal>-help</literal>, <literal>-h</literal> ou <literal>-?</literal>,
  é impresso uma mensagem de ajuda, imprimindo o nome do script dinamicamente.
  Qualquer outro argumento é exibido como informado.
 </para>
 <para>
  Para rodar esse aplicativo nos Unix, basta torná-lo
  executável e o chamar diretamente como
  <literal>script.php exibaisso</literal> ou
  <literal>script.php -h</literal>. No Windows, você pode fazer um
  arquivo batch para esta tarefa:
 </para>
 <example>
  <title>Arquivo batch para rodar um script em linha de comando (script.bat)</title>
  <programlisting role="winbat">
@c:\php\php.exe -q script.php %1 %2 %3 %4
  </programlisting>
 </example>
 <para>
  Assumindo que você nomeou o programa acima como
  <filename>script.php</filename>, e você tem um
  <filename>php.exe</filename> em
  <filename>c:\php\php.exe</filename> este arquivo batch
  irá rodar com os seguintes parâmetros:
  <literal>script.bat exibaisso</literal> ou
  <literal>script.bat -h</literal>.
 </para>
 <para>
  Veja também a documentação da extensão <link linkend="ref.readline">Readline</link>
  para mais funções que você pode usar
  para incrementar suas aplicações para linha de comando em PHP.
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
