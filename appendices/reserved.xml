<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.34 Maintainer: ae Status: ready -->

 <appendix id="reserved">
  <title>Palavras reservadas do PHP</title>
  <para>
   Esta é uma lista de identificadores predefinidos do PHP. Nenhum
   dos identificadores listados aqui pode ser utilizado como seus identificadores
   nos scripts. Esta lista inclui palavras-chave e variáveis predefinidas,
   constantes e nomes de classes. Esta lista ainda não está
   completa.
  </para>

  <sect1 id="reserved.keywords">
  <title>Lista de palavras-chave (keywords)</title>
   <simpara>
    Estas palavras tem um significado especial no PHP. Algumas delas representam coisas
    que parecem funções, algumas parecem constantes mas na verdade não o são
    realmente: elas são construtores de linguagem. Você não pode usar nenhuma
    das seguintes palavras como constantes, nomes de classes ou de funções.
    Utilizar como nome de variáveis geralmente não causa erros, mas pode levar a confusão.
   </simpara>

   <table>
    <title>Palavras-chave do PHP</title>
    <tgroup cols="4">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="migration.old-function">cfunction</link>
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        const
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="function.eval">eval</link>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>Variáveis predefinidas</title>

   <para>
    Desde o PHP 4.1.0, o método preferencial para obter
    <link linkend="language.variables.external">variáveis externas</link> é
    através das superglobais mencionadas acima. Antes disso, as pessoas utilizavam
    <link linkend="ini.register-globals">register_globals</link>
    ou os arrays pré-definidos do PHP (<varname>$HTTP_*_VARS</varname>).

    &avail.register-long-arrays;
   </para>

   <sect2 id="reserved.variables.server">
    <title>Variáveis do servidor: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      Introduzida na versão 4.1.0. Em versões anteriores, use
      <varname>$HTTP_SERVER_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     <varname>$_SERVER</varname> é um array contendo informações
     como headers, caminhos e localizações do script. Os itens deste
     array são criados pelo servidor web. Não há garantias que 
     todos os servidores web geram todas elas: alguns servidores talvez omitam algumas ou
     geram outras que não estão listadas aqui. Mesmo assim, um grande número
     dessas variáveis estão de acordo com a <ulink
     url="&url.cgispec;">especificação CGI 1.1</ulink>, então você pode
     esperar encontrá-las nesse array.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     significa que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_SERVER;</command> para pode acessá-la dentro de funções ou métodos, como
     era necessário com <varname>$HTTP_SERVER_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> contém a mesmas
     informações, mas ela não é uma superglobal.(Note que
     <varname>$HTTP_SERVER_VARS</varname> e <varname>$_SERVER</varname>
     são variáveis diferentes como também o PHP as manipula diferentemente)
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_SERVER</varname> e <varname>$HTTP_SERVER_VARS</varname>.
     Para maiores informações, veja o capítulo de segurança entitulado
     <link linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>

    <simpara>
     Você poderá ou não encontrar qualquer um dos seguintes elementos dentro de
     $_SERVER. Note que poucos (ou nenhum) deles estão disponíveis (ou
     não terão qualquer sentido) se você estiver rodando o PHP na linha de comando.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         O nome do arquivo do script atualmente em uso, relativo ao
         document root. Por exemplo,
         <varname>$_SERVER['PHP_SELF']</varname> em um script com o
         endereço <filename>http://example.com/test.php/foo.bar</filename>
         pode ser <filename>/test.php/foo.bar</filename>.
        </simpara>
        <simpara>
         Se estiver rodando o PHP em linha de comando, esta variável
         não está disponível.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         Array de argumentos passado para o script. Quando o script
         é executado na linha de comando, isto permite um acesso aos parâmetros
         de linha de comando no estilo do C. Quando chamado via método GET, ele
         conterá a query string.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Contém o número de parâmetros da linha de comando passados para o
         script (se executando da linha de comando).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         O número de revisão da especificação CGI que o servidor está utilizando,
         por exemplo : '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         O nome host do servidor onde o script atual é
         executado. Se o script está rodando em um host virtual, este
         será o valor definido para aquele host virtual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         A string de identificação do servidor, fornecida nos headers quando
         respondendo a requests.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Nome e número de revisão do protocolo de informação pelo qual a
         página foi requerida, por exemplo '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         Contém o método de request utilizando para acessar a página. Geralmente '<literal>GET</literal>',
         '<literal>HEAD</literal>', '<literal>POST</literal>' ou '<literal>PUT</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         A query string (string de solicitação), se houver, pela qual a página foi acessada.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         O diretório raiz sob onde o script atual é
         executado, como definido no arquivos de configuração do servidor.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         O conteúdo do header <literal>Accept:</literal> da
         requisição atual, se houver.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         O conteúdo do header <literal>Accept-Charset:</literal>
         da requisição atual, se houver. Exemplo:
         '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         O conteúdo do header <literal>Accept-Encoding:</literal>
         da requisição atual, se houver. Exemplo: '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         O conteúdo do header <literal>Accept-Language:</literal>
         da requisição atual, se houver. Exemplo '<literal>en</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         O conteúdo do header <literal>Connection:</literal> da
         requisição atual, se houver. Exemplo: '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         O conteúdo do header <literal>Host:</literal> da
         requisição atual, se houver.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         O endereço da página (se houver) através da qual o agente do
         usuário acessou a página atual. Essa diretiva é informada pelo agente do usuário. Nem
         todos os browsers geram esse header, e alguns ainda possuem a habilidade
         de modificar o conteúdo do <varname>HTTP_REFERER</varname> como recurso. Em
         poucas palavras, não é confiável.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         O conteúdo do header <literal>User_Agent:</literal> da
         requisição atual, se houver. É uma string
         denotando o agente de usuário pelo qual a página é acessada. Um
         exemplo típico é: <computeroutput>Mozilla/4.5 [en] (X11; U;
         Linux 2.2.9 i586)</computeroutput>. Além de outras coisas, você
         pode utilizar este valor com <function>get_browser</function> para
         personalizar a geração de suas páginas para as capacidades do agente do
         usuário.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         O endereço IP de onde o usuário está visualizado a página
         atual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         O nome do host que o usuário utilizou para chamar a página
         atual. O DNS reverso (lookup) do
         <varname>REMOTE_ADDR</varname> do usuário.
        </simpara>
        <note>
         <simpara>
          Seu servidor web precisa estar configurado para criar essa variável. Por
          exemplo, no Apache você precisa colocar um <literal>HostnameLookups On</literal>
          dentro do &httpd.conf;. Veja também
          <function>gethostbyaddr</function>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         A porta TCP na máquina do usuário utilizada para comunicação com
         o servidor web.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <simpara>
         O caminho absoluto o script atualmente em execução.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         O valor fornecido pela diretiva SERVER_ADMIN (do Apache) no
         arquivo de configuração do servidor. Se o script está sendo executado
         em um host virtual, este será os valores definidos para aquele 
         host virtual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         A porta na máquina servidora utilizada pelo servidor web
         para comunicação. Como default, este valor é '<literal>80</literal>'.
         Utilizando SSL, entretanto, mudará esse valor para a porta de comunicação
         segura HTTP.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         String contendo a versão do servidor e nome do host virtual
         que é adicionado às páginas geradas no servidor, se ativo.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         O caminho real do script relativo ao sistema de arquivos
         (não o document root), depois realizou todos os mapeamentos
         de caminhos (virtual-to-real).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Contém o caminho completo do script atual. Útil para páginas
         que precisam apontar para elas mesmas (dinamicamente).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         O URI fornecido para acessar a página atual, por
         exemplo, '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_USER</varname>'</term>
       <listitem>
        <simpara>
         Quando executando sob o Apache como módulo e fazendo autenticaçào HTTP, esta
         variável estará definida com o username fornecido pelo usuário.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_PW</varname>'</term>
       <listitem>
        <simpara>
         Quando executando sob o Apache como módulo e fazendo autenticaçào HTTP, esta
         variável estará definida com a senha fornecida pelo usuário.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>AUTH_TYPE</varname>'</term>
       <listitem>
        <simpara>
         Quando executando sob o Apache como módulo e fazendo autenticaçào HTTP, esta
         variável estará definida com o tipo de autenticação utilizado.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>Variáveis de ambiente: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      Introduzida na versão 4.1.0. Em versões anteriores, utilize
      <varname>$HTTP_ENV_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Estas variáveis são importadas dentro no espaço global do PHP do
     ambiente sob qual o interpretador do PHP está rodando. Muitos são
     são criados no shell (terminal) sob o qual o PHP é executado e sistemas
     diferentes normalmente utilizam vários sabores de shells, e
     uma lista definitiva é impossível. Verifique a documentação
     de sua shell para a lista de variáveis ambiente definidas.
    </simpara>

    <simpara>
     Outras variáveis ambiente incluem as variáveis CGI, informadas
     aqui independente do PHP estar rodando como um módulo do servidor ou
     como processador CGI.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     significa que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_ENV;</command> para pode acessá-la dentro de funções ou métodos, como
     era necessário com <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contém a mesma
     informação, mas não é uma superglobal. (Note que
     <varname>HTTP_ENV_VARS</varname> e <varname>$_ENV</varname>
     são variáveis diferentes como também o PHP as manipula diferentemente)
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_ENV</varname> e <varname>$HTTP_ENV_VARS</varname>.
     Para maiores informações, veja o capítulo de segurança entitulado
     <link linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>Cookies HTTP: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
     Introduzida na versão 4.1.0. Em versões anteriores, utilize
      <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Contém um array associativo de variáveis passas para o script atual
     através de cookies HTTP.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     significa que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_COOKIE;</command> para pode acessá-la dentro de funções ou métodos, como
     era necessário com <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contém as mesmas
     informações, mas não é uma superglobal. (Note que
     <varname>HTTP_COOKIE_VARS</varname> e <varname>$_COOKIE</varname>
     são variáveis diferentes como também o PHP as manipula diferentemente)
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_COOKIE</varname> e <varname>$HTTP_COOKIE_VARS</varname>.
     Para maiores informações, veja o capítulo de segurança entitulado
     <link linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>Variáveis HTTP GET: <varname>$_GET</varname></title>

    <note>
     <simpara>
      Introduzida na versão 4.1.0. Em versões anteriores, use
      <varname>$HTTP_GET_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Contém um array associativo de variáveis passadas para o script atual
     através do método HTTP GET.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     significa que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_GET;</command> para pode acessá-la dentro de funções ou métodos, como
     era necessário com <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contém as mesmas
     informações, mas não é uma superglobal. (Note que
     <varname>HTTP_GET_VARS</varname> e <varname>$_GET</varname>
     são variáveis diferentes como também o PHP as manipula diferentemente)
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_GET</varname> e <varname>$HTTP_GET_VARS</varname>.
     Para maiores informações, veja o capítulo de segurança entitulado
     <link linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>Variaveis HTTP POST: <varname>$_POST</varname></title>

    <note>
     <simpara>
      Introduzida na versão 4.1.0. Em versões anteriores, use
      <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Contém um array associativo de variáveis passadas para o script atual
     através do método HTTP POST.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     siginifica que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_POST;</command> para pode acessá-la dentro de funções ou métodos, como
     era necessário com <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contém as mesmas
     informações, mas não é uma superglobal. (Note que
     <varname>HTTP_POST_VARS</varname> e <varname>$_POST</varname>
     são variáveis diferentes como também o PHP as manipula diferentemente)
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_POST</varname> e <varname>$HTTP_POST_VARS</varname>.
     Para maiores informações, veja o capítulo de segurança entitulado
     <link linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>Variáveis de upload de arquivos HTTP: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Introduzida na versão 4.1.0. Em versões anteriores, use
      <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>

    <simpara>
     Contém um array associativo dos itens carregador no script atual
     através do método HTTP POST.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     significa que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_FILES;</command> para pode acessá-la dentro de funções ou métodos, como
     era necessário com <varname>$HTTP_FILES_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contém as mesmas
     informações, mas não é uma superglobal.
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_FILES</varname> e <varname>$HTTP_POST_FILES</varname>.
     Para maiores informações, veja o capítulo de segurança entitulado
     <link linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Variáveis da requisição: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Introduzida na versão 4.1.0. Não há array equivalente em versões
      anteriores.
     </simpara>
    </note>

    <simpara>
     Contém um array associativo com os conteúdos de
     <varname>$_GET</varname>, <varname>$_POST</varname>
     e <varname>$_COOKIE</varname>.
    </simpara>

    <note>
     <simpara>
      Até o PHP 4.3.0, as informações de <varname>$_FILES</varname>
      também estavam incluídas em <varname>$_REQUEST</varname>.
     </simpara>
    </note>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     significa que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_REQUEST;</command> para pode acessá-la dentro de funções ou métodos.
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_REQUEST</varname>. Para maiores informações, veja
     o capítulo de segurança entitulado <link
     linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Variáveis de sessão: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Introduzida na versão 4.1.0. Em versões anteriores, use
      <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Contém um array associativo das variáveis de sessão disponíveis para
     o script atual. Veja a documentação das <link linkend="ref.session">funções de Sessões
     </link> para maiores informações de como
     utilizá-las.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     siginifica que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $_SESSION;</command> para pode acessá-la dentro de funções ou métodos, como
     era necessário com <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contém as mesmas
     informações, mas não é uma superglobal.
    </simpara>

    <simpara>
     Se a diretiva <link
     linkend="ini.register-globals">register_globals</link>
     está ativa, então essas variáveis tornam-se disponíveis no
     escopo global do script (por exemplo, separados dos arrays
     <varname>$_SESSION</varname> e <varname>$HTTP_SESSION_VARS</varname>
     Para maiores informações, veja o capítulo de segurança entitulado
     <link linkend="security.registerglobals">Utilizando registradores
     globais</link>. Estas variáveis globais individuais não são superglobais.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Variaveis globais: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> foi disponibilizada desde a versão 3.0.0.
     </simpara>
    </note>

    <simpara>
     Um array associativo contendo referências para todas as variáveis
     atualmente definidas no escopo global do script. Os nomes
     das variáveis são as chaves do array.
    </simpara>

    <simpara>
     Esta é uma variável 'superglobal', ou automaticamente global. Isto
     significa que ela é disponível em todos os escopos (níveis) de um
     script. Você não precisa fazer um <command>global
     $GLOBALS;</command> para pode acessá-la dentro de funções ou métodos.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>A mensagem de erro anterior: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> é uma variável contendo o
     texto da última mensagem de erro gerada pelo PHP. Esta variável
     somente está disponível no escopo em que o erro
     ocorreu, e somente se a opção de configuração <link
     linkend="ini.track-errors">track_errors</link>
     está ativa (seu default é off).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>Classes pre-definidas</title>

   <sect2 id="reserved.classes.standard">
    <title>Classes padrão</title>

    <simpara>
     Estas classes são definidas dentro do conjunto padrão de funções incluídas
     na compilação do PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        A classe de onde a função <function>dir</function> é instanciada.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.php5">
    <title>Classes Predefinidas no PHP 5</title>

    <simpara>
     Essas classes predefinidas adicionais foram introduzidas no
     PHP 5.0.0
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.ming">
    <title><link linkend="ref.ming">Classes definidas pelo Ming</link></title>

    <simpara>
     Estas classes são definidas na extensão
     <link linkend="ref.ming">Ming</link>,
     e somente estarão disponíveis quando esta extensão for
     compilada dento do PHP ou carregada em tempo de execução.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title><link linkend="ref.oci8">Classes definidas pelo Oracle 8</link></title>

    <simpara>
     Estas classes são definidas na extensão
     <link linkend="ref.oci8">Oracle 8</link>,
     e somente estarão disponíveis quando esta extensão for
     compilada dento do PHP ou carregada em tempo de execução.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title><link linkend="ref.qtdom">Classes definidas pelo qtdom</link></title>

    <simpara>
     Estas classes são definidas na extensão
     <link linkend="ref.qtdom">qtdom</link>
     e somente estarão disponíveis quando esta extensão for
     compilada dento do PHP ou carregada em tempo de execução.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
