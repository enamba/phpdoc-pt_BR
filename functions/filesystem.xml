<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
 <reference id="ref.filesystem">
  <title>Funções do Filesystem</title>
  <titleabbrev>Filesystem</titleabbrev>

  <refentry id="function.basename">
   <refnamediv>
    <refname>basename</refname>
    <refpurpose>
     Retorna a parte do nome do arquivo do path
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>basename</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
      <paramdef>string <parameter><optional>sufixo</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dado uma string contendo um path para um arquivo, essa função irá
     retornar o nome base do arquivo.
     Se o nome do arquivo é terminado em um <parameter>sufixo</parameter>
     este também será retirado.
    </para>
    <para>
     No Windows, tanto a barra (<literal>/</literal>) quanto a
     barra invertida (<literal>\</literal>) são usadas como caracter de
     separacao do path. Em outros ambientes, somente a barra
     (<literal>/</literal>).
    </para>
    <para>
     <example>
      <title>exemplo do <function>basename</function></title>
      <programlisting role="php">
$path = "/home/httpd/html/index.php";
$arquivo = basename ($path);        // $arquivo conterá "index.php"
$arquivo = basename ($path,".php"); // $arquivo conterá "index"
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      O parametro <parameter>sufixo</parameter> foi adicionado no PHP 4.1.0.
     </para>
    </note>
    <para>
     Veja também: <function>dirname</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chgrp">
   <refnamediv>
    <refname>chgrp</refname>
    <refpurpose>Modifica o grupo do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chgrp</function></funcdef>
      <paramdef>string <parameter>arquivo</parameter></paramdef>
      <paramdef>mixed <parameter>grupo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Tenta modificar o grupo do
     <parameter>arquivo</parameter> para o
     <parameter>grupo</parameter>. Somente o superusuário pode mudar
     o grupo de um arquivo arbitrário; outros usuários podem somente
     mudar o grupo de um arquivo para qual o usuário pertence.
    </para>
    <para>
     Retorna &true; se obtiver sucesso; caso contrário retorna
     &false;.
    </para>
    <para>
     Veja também <function>chown</function> e
     <function>chmod</function>.
    </para>
    <note>
     <simpara>
      Esta função não funciona em sistemas Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.chmod">
   <refnamediv>
    <refname>chmod</refname>
    <refpurpose>Modifica as permissões do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chmod</function></funcdef>
      <paramdef>string <parameter>arquivo</parameter></paramdef>
      <paramdef>int <parameter>modo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Tenta mudar as permissões do arquivo especificado por
     <parameter>arquivo</parameter> para o dado em
     <parameter>modo</parameter>.
    </para>
    <para>
     Note que <parameter>mode</parameter> não é assumido ser um numero
     octal, então strings (como "g+w") não funcionarão. Para garantir
     que a operação seja bem sucedide é necessário o prefixo zero (0)
     em <parameter>mode</parameter>:
     <informalexample>
      <programlisting role="php">
chmod ("/algumdir/algumarquivo", 755);   // decimal; provavelmente incorreto
chmod ("/algumdir/algumarquivo", "u+rwx,go+rx"); // string; incorreto
chmod ("/algumdir/algumarquivo", 0755);  // octal; correto valor da permissão
      </programlisting>
     </informalexample>
    </para>
    <para>
     Retorna &true; se obtiver sucesso e caso contrário &false;.
    </para>
    <para>
     Veja também <function>chown</function> e
     <function>chgrp</function>.
    </para>
    <note>
     <simpara>
      Esta função não funciona em sistemas Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.chown">
   <refnamediv>
    <refname>chown</refname>
    <refpurpose>Modifica o dono do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chown</function></funcdef>
      <paramdef>string <parameter>arquivo</parameter></paramdef>
      <paramdef>mixed <parameter>usuário</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Tenta modificar o dono do arquivo "arquivo" para o usuário
     "usuário". Somente o superusuário pode modificar o dono de
     um arquivo.
    </para>
    <para>
     Retorna &true; se obtiver sucesso e caso contrário &false;.
    </para>
    <para>
     Veja também <function>chown</function> e
     <function>chmod</function>.
    </para>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.clearstatcache">
   <refnamediv>
    <refname>clearstatcache</refname>
    <refpurpose>Limpa o  cache do file stat</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>clearstatcache</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Invocando a função do sistema (system call)
     <systemitem>stat</systemitem> ou <systemitem>lstat</systemitem>
     na maior parte do sistema é bem caro. Então, o resultado da ultima
     chamada para qualquer chamada para as funções de status (listadas
     abaixo) é guardada para a ultilização nas possiveis procimas
     chamadas utilizando o mesmo nome de arquivo. Se voce deseja forcar
     um check no status, por exemplo se o arquivo  for checado muitas
     vezes e pode mudar ou disaparecer, use esta função para limpar os
     resultados da ultima chamada da memória.
    </para>
    <para>
     Este valor somente reside no cache pelo tempo de somente um pedido.
    </para>
    <para>
     As funções afetadas são <function>stat</function>,
     <function>lstat</function>,
     <function>file_exists</function>,
     <function>is_writable</function>,
     <function>is_readable</function>,
     <function>is_executable</function>,
     <function>is_file</function>,
     <function>is_dir</function>,
     <function>is_link</function>,
     <function>filectime</function>,
     <function>fileatime</function>,
     <function>filemtime</function>,
     <function>fileinode</function>,
     <function>filegroup</function>,
     <function>fileowner</function>,
     <function>filesize</function>,
     <function>filetype</function>, e
     <function>fileperms</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.copy">
   <refnamediv>
    <refname>copy</refname>
    <refpurpose>Copia arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>copy</function></funcdef>
      <paramdef>string <parameter>origem</parameter></paramdef>
      <paramdef>string <parameter>destino</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Faz uma cópia de um arquivo. Retorna &true; se a copia é
     obtida com sucesso, caso contrário &false;.
     <example>
      <title>exemplo do <function>copy</function></title>
      <programlisting role="php">
if (!copy($arquivo, $arquivo.'.bak')) {
    print ("erro ao copiar $arquivo...&lt;br>\n");
}
      </programlisting>
     </example>
    </para>
    <para>
     Veja também: <function>rename</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.delete">
   <refnamediv>
    <refname>delete</refname>
    <refpurpose>Uma seção dipensável do manual</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>delete</function></funcdef>
      <paramdef>string <parameter>file</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Esta é uma seção dispensável do manual criada para satisfazer
     as pessoas que estão procurando por <function>unlink</function>
     ou <function>unset</function> no lugar errado.
    </para>
    <para>
     Veja também: <function>unlink</function> para deletar arquivos,
     <function>unset</function> para apagar váriaveis.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dirname">
   <refnamediv>
    <refname>dirname</refname>
    <refpurpose>Retorna o nome do diretório componente do path</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dirname</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dada uma string contendo um path para um arquivo, esta função
     irá retornar o nome do diretório.
    </para>
    <para>
     No Windows, tanto barra (<literal>/</literal>) quanto a
     barra invertida (<literal>\</literal>) são usadas como caracter
     separador no path. Em outros ambientes é utilizado a barra
     (<literal>/</literal>).</para>
    <para>
     <example>
      <title>exemplo do <function>dirname</function></title>
      <programlisting role="php">
$path = "/etc/passwd";
$file = dirname ($path); // $file is set to "/etc"
      </programlisting>
     </example>
    </para>
    <para>
     Veja também: <function>basename</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-free-space">
   <refnamediv>
    <refname>disk_free_space</refname>
    <refpurpose>Retorna o espaço disponivel no diretório.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>disk_free_space</function></funcdef>
      <paramdef>string <parameter>diretório</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dado uma string contendo um diretório, esta função retornará o
     numero de bytes disponíveis no correspondente filesystem ou
     partição de disco.
    </para>
    <para>
     <example>
      <title>exemplo de <function>disk_free_space</function></title>
      <programlisting role="php">
$df = disk_free_space("/"); // $df contém o número de bytes.
                          // disponível em "/"
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.diskfreespace">
   <refnamediv>
    <refname>diskfreespace</refname>
    <refpurpose>Sinônimo de <function>disk_free_space</function></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>diskfreespace</function></funcdef>
      <paramdef>string <parameter>diretório</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Este é um sinônimo obsoleto para a função
     <function>disk_free_space</function>.
     Ultilize aquela função ao invez.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-total-space">
   <refnamediv>
    <refname>disk_total_space</refname>
    <refpurpose>Retorna o tamanho total do diretório</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>disk_total_space</function></funcdef>
      <paramdef>string <parameter>diretório</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dado uma string contendo um diretório, esta função retornará o
     numero total de bytes correspondendo ao filesystem ou a partição
     de disco.
    </para>
    <para>
     <example>
      <title><function>disk_total_space</function> example</title>
      <programlisting role="php">
$df = disk_total_space("/"); // $df contém o numero total de
                             // bytes disponíveis em "/"
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fclose">
   <refnamediv>
    <refname>fclose</refname>
    <refpurpose>Fecha um ponteiro de arquivo aberto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>fclose</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     O arquivo apontado por <parameter>fp</parameter> é fechado.
    </para>
    <para>
     Retorna &true; se obtiver sucesso e caso contrário
     &false;.
    </para>
    <para>
     O ponteiro para o arquivo tem que ser válido e tem que
     apontar para um arquivo aberto por <function>fopen</function>
     ou <function>fsockopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.feof">
   <refnamediv>
    <refname>feof</refname>
    <refpurpose> Testa por fim-de-arquivo (eof) em um ponteiro de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>feof</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna &true; se obtiver o ponteiro estiver no fim do arquivo
     (eof) ou um erro ocorrer, caso contrário retorna &false;.
    </para>
    <para>
     O ponteiro para o arquivo tem que ser válido e tem que apontar para
     um arquivo aberto com sucesso por <function>fopen</function>,
     <function>popen</function>, ou <function>fsockopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fflush">
   <refnamediv>
    <refname>fflush</refname>
    <refpurpose>Força a ida da saida para o arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fflush</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Esta função forca que toda a saída que está no buffer
     para qual o arquivo está apontado pelo
     <parameter>fp</parameter> seja escrita.
     Retorna &true; se obtiver sucesso e caso contrário
     &false;.
    </para>
    <para>
     O ponteiro de arquivo tem que ser válido e apontar para
     um arquivo que foi aberto com sucesso por
     <function>fopen</function>, <function>popen</function>,
     ou <function>fsockopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetc">
   <refnamediv>
    <refname>fgetc</refname>
    <refpurpose>Ler caracter do ponteiro de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fgetc</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna uma string contendo somente um caracter lido do arquivo
     apontado por fp. Retorna &false; no fim do arquivo (eof).
    </para>
    <para>
     O ponteiro de arquivo tem que ser válido e apontar para um
     arquivo aberto com sucesso por <function>fopen</function>,
     <function>popen</function>, ou <function>fsockopen</function>.
    </para>
    <para>
     Veja também <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fsockopen</function>, e
     <function>fgets</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetcsv">
   <refnamediv>
    <refname>fgetcsv</refname>
    <refpurpose>
     Ler uma linha do ponteiro de arquivos e parse por campos CSV
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>fgetcsv</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>comprimento</parameter></paramdef>
      <paramdef>string
       <parameter>
        <optional>delimitador</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Similar à <function>fgets</function> exceto que
     <function>fgetcsv</function> parses a linha que lê por campos
     no formato <acronym>CSV</acronym> e retorna um vetor (array)
     contendo os campos lidos. O delimitador dos campos é a virgula,
     a menos que seja especificado com o terceiro parametro que é
     opcional.
    </simpara>
    <simpara>
     <parameter>Fp</parameter> tem que ser um ponteiro de arquivo
     válido para um arquivo aberto com sucesso por
     <function>fopen</function>, <function>popen</function>,
     ou <function>fsockopen</function>
    </simpara>
    <simpara>
     Comprimento tem que ser maior do que a maior linha a ser encontrada
     no arquivo CSV (incluindo caracteres de terminação de linha).
    </simpara>
    <simpara>
     <function>fgetcsv</function> retorna &false; ao encontrar um erro,
     incluindo fim de arquivo (eof).
    </simpara>
    <simpara>
     N.B. Uma linha em branco em um arquivo CSV será retornada como um
     vetor contendo um único campo nulo (&null;), e não será tratado
     como um erro.
    </simpara>
    <example>
     <title>
      exemplo de <function>fgetcsv</function> - Ler e imprimir os conteúdos
      inteiros de um arquivo CSV.
     </title>
     <programlisting role="php">
$row = 1;
$fp = fopen ("test.csv","r");
while ($data = fgetcsv ($fp, 1000, ",")) {
    $num = count ($data);
    print "&lt;p&gt; $num campos na linha $row: &lt;br&gt;";
    $row++;
    for ($c=0; $c&lt;$num; $c++) {
        print $data[$c] . "&lt;br&gt;";
    }
}
fclose ($fp);
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.fgets">
   <refnamediv>
    <refname>fgets</refname>
    <refpurpose>Ler a linha de um ponteiro de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fgets</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>comprimento</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna uma string com até comprimento - 1 bytes lidos do arquivo
     apontado por fp. A leitura acaba quando comprimento - 1 bytes
     foram lidos, em uma nova linha (newline) (que é incluida no valor
     retornado), ou em um fim de arquivo (eof) (o que acontecer
     primeiro).
    </para>
    <para>
     Se um erro ocorrer, retorna &false;.
    </para>
    <para>
     Equivocos comuns:
    </para>
    <simpara>
     Pessoas acostumadas a semantica do fgets em 'C' devem notar a
     diferenca em como o fim do arquivo (eof) é retornado.
    </simpara>
    <simpara>
     O ponteiro para o arquivo deve ser válido e deve apontar para um
     arquivo aberto com sucesso por <function>fopen</function>,
     <function>popen</function>, ou
     <function>fsockopen</function>.
    </simpara>
    <para>
     Um simples exemplo segue:
     <example>
      <title>Lendo um arquivo linha a linha</title>
      <programlisting role="php">
$fd = fopen ("/tmp/arquivodeentrada.txt", "r");
while (!feof ($fd)) {
    $buffer = fgets($fd, 4096);
    echo $buffer;
}
fclose ($fd);
      </programlisting>
     </example>
    </para>
    <para>
     Veja também <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fgetc</function>,
     <function>fsockopen</function>, e
     <function>socket_set_timeout</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetss">
   <refnamediv>
    <refname>fgetss</refname>
    <refpurpose>
     Ler uma linha de um ponteiro de arquivo e retira as tags HTML
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fgetss</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>comprimento</parameter></paramdef>
      <paramdef>string
       <parameter>
        <optional>tags_permitidas</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Identico a <function>fgets</function>, exceto que fgetss
     tenta retirar qualquer tag HTML ou PHP do texto que ele lê.
    </para>
    <para>
     Você pode retirar o terceiro parametro opcional para especificar
     quais tags não devem ser retiradas. 
     <note>
      <para>
       <parameter>tags_permitidas</parameter> foi adicionada no PHP 3.0.13,
       PHP4B3.
      </para> 
     </note>
    </para>
    <para>
     Veja também <function>fgets</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>, e
     <function>strip_tags</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.file">
   <refnamediv>
    <refname>file</refname> 
    <refpurpose>Ler um arquivo inteiro para um array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>file</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>use_include_path</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Identico a <function>readfile</function>, exceto que 
     <function>file</function> returna o arquivo no array. Cada
     elemento do array corresponde a uma linha no arquivo, inclusive 
     com o caracter de nova linha.
    </para>
    <para>
     Você pode usar o segundo parametro opcional como "1", se voce
     deseja procurar o arquivo no  <link
     linkend="ini.include-path">include_path</link> também.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
// ler uma webpage para um array e o imprimir
$fcontents = file ('http://www.php.net');
while (list ($line_num, $line) = each ($fcontents)) {
    echo "&lt;b&gt;Linha $line_num:&lt;/b&gt; " . htmlspecialchars ($line) . "&lt;br&gt;\n";
}

// ler uma web paga para uma string
$fcontents = join ('', file ('http://www.php.net'));
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <para>
     Veja também <function>readfile</function>,
     <function>fopen</function>, <function>fsockopen</function>, e
     <function>popen</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.file-exists">
   <refnamediv>
    <refname>file_exists</refname>
    <refpurpose>Checar se um arquivo existe</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>file_exists</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Retorna &true; se o arquivo expecificado por 
     <parameter>nomedoarquivo</parameter> existe; &false; caso contrário.
    </simpara>
    <simpara>
     Esta função não irá funcionar em  <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     para ser examinado tem que ser accessivel pelo filesystem do servidor.
    </simpara>
    <simpara>
     Os resultados desta função são guardados no cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </simpara>
   </refsect1>
  </refentry>


  <refentry id="function.fileatime">
   <refnamediv>
    <refname>fileatime</refname>
    <refpurpose>Obtém o último tempo de acesso do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileatime</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara> 
     Retorna o tempo que o arquivo foi acessado por último, ou &false; 
     em caso de erro. O tempo que é retornado é um timestamp UNIX.
     Returns the time the file was last accessed, or &false; in case of
     an error. The time is returned as a Unix timestamp.
    </simpara>
    <simpara>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </simpara>
    <simpara>
     Nota: O atime do arquivo deve mudar para quando os blocos
     de informação  do arquivo são lidos. Isto pode ser caro
     em termos de performance quando uma aplicação frequentemente
     acessa um numero muito grande de arquivos ou diretórios.
     Alguns filesystems Unix podem ser montados com updates dos
     atimes desabilitados para aumentar a performance destas 
     aplicações; USENET news spools é um exemplo comum. Nestes
     filesystems esta função é inútil.
    </simpara>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessível pelo filesystem do servidor.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filectime">
   <refnamediv>
    <refname>filectime</refname>
    <refpurpose>Ler o tempo de modificação do inode do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filectime</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna o tempo em que o arquivo foi modificado pela última vez,
     ou &false; em caso de erro. O tempo é retornado como um timestamp
     Unix.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
    <para>
     Nota: Na maior parte dos filesystems Unix, um arquivo é
     considerado modificado quando a informação do inode é
     modificada; isto é, quando as permissões, dono (owner),
     grupo (group), ou outra metadata do inode é modificada.
     Veja também <function>filemtime</function> (o que é o que
     você deseja usar quando criando rodapés com informações 
     sobre última vez que o arquivo foi modificado em web pages)
     e <function>fileatime</function>.
    </para>
    <para>Note também que em alguns textos Unix o ctime do arquivo
     é referido como sendo o tempo de criação do tempo do arquivo.
     Isto é errado. Não há tempo de criação de arquivos Unix na
     maior parte dos filesystems Unix.
    </para>
    <simpara>
     Esta função não irá funcionar em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessivel pelo filesystem do servidor.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filegroup">
   <refnamediv>
    <refname>filegroup</refname>
    <refpurpose>Ler o grupo do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filegroup</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna o group ID do dono do arquivo, ou &false; no caso de um
     erro. O group ID é retornado em um formato numérico, use
     <function>posix_getgrgid</function> para resolver para o nome do
     grupo.
    </para>
    <para>
     O resultado desta função são guardados em cache. Veja
      <function>clearstatcache</function> para mais detalhes.
    </para>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows
     </simpara>
    <simpara>
     Esta função não irá funcionar em <link
     linkend="features.remote-files">arquivos remotos</link>; o
     arquivo a ser examinado tem que ser acessivel atravez do 
     filesystem do servidor.
    </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.fileinode">
   <refnamediv>
    <refname>fileinode</refname>
    <refpurpose>Ler o inode do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileinode</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Retorna o numero do inode do arquivo, ou &false; em caso de erro.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja 
     <function>clearstatcache</function> para mais detalhes.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o
     arquivo a ser examinado tem que ser acessivel pelo filesystem
     do servidor.
    </simpara>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.filemtime">
   <refnamediv>
    <refname>filemtime</refname>
    <refpurpose>Ler o tempo de modificação do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filemtime</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna o tempo em que o arquivo foi modificado pela última vez, ou
     &false; em caso de erro. O tempo é retornado como um timestamp Unix.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o
     arquivo a ser examinado tem que ser acessivel pelo filesystem
     do servidor.
    </simpara>
    <para>Nota: Esta função retorna o tempo quando os blocos de
     informação do arquivo são escritos, isto é, o tempo quando o
     conteúdo do arquivo foi mudado. Para obter uma data de
     modificação para utilizar em rodapés use a função
     <function>date</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fileowner">
   <refnamediv>
    <refname>fileowner</refname>
    <refpurpose>Ler o dono(owner) do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileowner</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna o ID do usuário(user ID) do dono(owner) do arquivo, ou &false;
     caso um erro ocorra. O ID do usuário é retornado no formato numérico,
     use <function>posix_getpwuid</function> para obter o username do
     usuário.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessivel pelo filesystem do servidor.
    </simpara>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.fileperms">
   <refnamediv>
    <refname>fileperms</refname>
    <refpurpose>Ler as permissões do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileperms</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna as permissões do arquivo, ou &false; em caso de erro.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessivel pelo filesystem do servidor.
    </simpara>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.filesize">
   <refnamediv>
    <refname>filesize</refname>
    <refpurpose>Ler o tamanho do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filesize</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Retorna o tamanho do arquivo, ou &false; em caso de erro.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes. 
    </para>
    <simpara>
     This function will not work on <link
     linkend="features.remote-files">remote files</link>; the file to
     be examined must be accessible via the server's filesystem.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filetype">
   <refnamediv>
    <refname>filetype</refname>
    <refpurpose>Ler o tipo de arquivo (file type)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>filetype</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna o tipo do arquivo(file type). Valores possiveis são
     fifo, char, block, link, file e unknown(desconhecido).</para>
     <para> Retorna &false; se um erro ocorrer.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessivel pelo filesystem do servidor.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.flock">
   <refnamediv>
    <refname>flock</refname>
    <refpurpose>Portable advisory file locking</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>flock</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>operacao</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>wouldblock</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     PHP suporta uma maneira portável de lock arquivos completos
     em uma advisory way (que significa que todos os programas acessando
     tem que usar a mesma maneira de locking ou não irá funcionar).
    </simpara>
    <simpara>
     <function>flock</function> opera em <parameter>fp</parameter>,
     que tem que ser um ponteiro de arquivo aberto com sucesso.
     <parameter>operacao</parameter> é um dos seguintes valores:
    </simpara>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
         Para obter uma lock compartilhada (leitura), use
         <parameter>operacao</parameter> como LOCK_SH (use 1 se a versão
         do PHP for anterior a 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         Para obter uma lock exclusiva (gravação), use
         <parameter>operacao</parameter> como LOCK_EX (use 2 se a versão
         do PHP for anterior a 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         Para retirar uma lock (compartilhada ou exclusiva), use
         <parameter>operacao</parameter> como LOCK_UN (use 3 se a versão
         do PHP for anterior a 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         Se você não quer usar  <function>flock</function> para
         bloquear enquanto locking, addicione LOCK_NB (3 se a versão
         do PHP for anterior a 4.0.1) a <parameter>operacao</parameter>.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <simpara>
     <function>flock</function> permite que você possa fazer um simples
     modelo leitura/gravação (reader/writer) que pode ser usado em 
     virtualmente todas as plataformas (incluindo a maior parte dos
     Unixes e até mesmo Windows). O terceiro argumento opcional é usado
     como &true; se a lock iria bloquear (EWOULDBLOCK errno condition)
    </simpara>
    <simpara>
     <function>flock</function> retorna &true; em caso de sucesso e 
     &false; em caso de erro (por exemplo quando uma lock não pode
     ser obtida).
    </simpara>
    <warning>
     <para>
      Na maior parte dos sistemas operacionais <function>flock</function>
      é implementada no nível do processo. Quando usando um servidor 
      com um multithreaded API como ISAPI você não pode confiar no
      <function>flock</function> para proteger os arquivos contra outros
      scripts PHP rodando em threads paralelos do mesmo servidor.
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.fopen">
   <refnamediv>
    <refname>fopen</refname>
    <refpurpose>Abrir um arquivo ou uma URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fopen</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>use_include_path</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Se <parameter>nomedoarquivo</parameter> começa com "http://"
     (não diferencia entre caracteres maiusculas e minusculas),
     uma conexão HTTP 1.0 é aberta para o servidor especificado, a
     página é requisitada usando o método HTTP GET, e um ponteiro
     de arquivo é retornado no começo do corpo da resposta. O 
     cabeçalho 'Host:' é enviado com o pedido para que virtual
     hosts baseados em nomes sejam suportados.
    </simpara>
    <simpara>
     Note que o ponteiro de arquivo deixa você retirar somente o
     corpo(<emphasis>body</emphasis>) da resposta; você não pode
     acessar o cabeçalho de resposta HTTP usando esta função.
    </simpara>
    <simpara>
     Versões anteriores a PHP 4.0.5 não suportam redirecionamentos HTTP.
     Por causa disso, diretórios devem incluir a barra no final.
    </simpara>
    <simpara>
     Se <parameter>nomedoarquivo</parameter> começa com "ftp://" (não
     diferencia entre caracteres maiusculas e minusculas também), uma
     conexão para o servidor especificado é aberta e um ponteiro para o
     arquivo perdido é retornado. Se o servidor não suporta modo passivo,
     isto irá falhar. Você pode abrir arquivos tanto para leitura quanto
     para gravação via ftp (mas não para ambos simultâneamente).
    </simpara>
    <simpara>
     Se <parameter>nomedoarquivo</parameter> é ou "php://stdin",
     ou "php://stdout", ou "php://stderr", o correspondente stream
     stdio será aberto. (Isto foi introduziso no PHP 3.0.13; em
     versões anteriores, um nome de arquivo como "/dev/stdin" ou
     "/dev/fd/0" deve ser usado para acessar os streams stdio.)
    </simpara>
    <simpara>
     Se <parameter>nomedoarquivo</parameter> começa com qualquer outra
     coisa, o arquivo será aberto no filesystem e um ponteiro para o
     arquivo será retornado.
    </simpara>
    <simpara>
     Se a abertura falhar, a função retornará &false;.
    </simpara>
    <para>
     <parameter>mode</parameter> pode ser qualquer um dos seguintes:
     <itemizedlist>
      <listitem>
       <simpara>
        'r' - Abrir somente para leitura; coloca o ponteiro de arquivo
        no começo do arquivo.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'r+' - Abrir para leitura e gravação; colocar o ponteiro de
        arquivo no começo do arquivo.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'w' - Abrir somente para gravação; colocar o ponteiro de
        arquivo no começo do arquivo e truncar o arquivo para tamanho
        zero. Se o arquivo não existir, tentar cria-lo.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'w+' - Abrir para leitura e escrita; colocar o ponteiro de
        arquivo no início do arquivo e truncar o arquivo para tamanho
        zero. Se o arquivo não existir, tentar cria-lo.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'a' - Abrir o arquivo somente para escrita; colocar o ponteiro
        de arquivo no fim do arquivo.  Se o arquivo não existe, tentar
        cria-lo.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'a+' - Abrir o arquivo para leitura e gravação; colocar o
        ponteiro no fim do arquivo. Se o arquivo não existe, tentar
        cria-lo.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <note>
     <para>
      O <parameter>mode</parameter> pode conter a letra 'b'. Isto é
      útil somente em sistemas que diferenciam entre arquivos
      binários e texto (por exemplo Windows. É inútil em Unix).
      Se não nescessário, será ignorado.
     </para>
    </note>
    <para>
     Você pode usar o terceiro parametro opctional como "1", se você
     quer procurar pelo arquivo no <link
     linkend="ini.include-path">include_path</link>, também.
    </para>
    <para>
     <example>
      <title>exemplo do <function>fopen</function></title>
      <programlisting role="php">
$fp = fopen ("/home/rasmus/arquivo.txt", "r");
$fp = fopen ("/home/rasmus/arquivo.gif", "wb");
$fp = fopen ("http://www.php.net/", "r");
$fp = fopen ("ftp://usuario:senha@exemplo.com.br/", "w");
      </programlisting>
     </example>
    </para>
    <simpara>
     Se você está tendo problemas com a leitura e gravação para
     arquivos e você está usando a versão de modulo de servidor do
     PHP, lembre-se de ter certeza que os arquivos e diretórios que
     você está usando precisam ser acessíveis ao processo do servidor
     de HTTP.
    </simpara>
    <para>
     Na plataforma Windows, tenha cuidado para usar uma segunda
     barra invertida (escape) usada no path de um arquivo, ou usar
     a barra normal.
     <informalexample>
      <programlisting role="php"> 
$fp = fopen ("c:\\data\\info.txt", "r");
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Veja também <function>fclose</function>,
     <function>fsockopen</function>,
     <function>socket_set_timeout</function>, e
     <function>popen</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fpassthru">
   <refnamediv>
    <refname>fpassthru</refname> 
    <refpurpose>
     Imprime todo o restante de um ponteiro de arquivo
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fpassthru</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Lê até o fim do arquivo (EOF) do ponteiro de arquivo dado e 
     imprime os resultados para a saída normal (standard output).
    </simpara>
    <simpara>
     Se um error ocorrer, a função <function>fpassthru</function>
     retorna &false;.
    </simpara>
    <simpara>
     O ponteiro de arquivo tem que ser válido e apontar para um
     arquivo aberto com sucesso por <function>fopen</function>,
     <function>popen</function>, ou <function>fsockopen</function>.
     O arquivo é fechado quando <function>fpassthru</function>
     acaba de ler (deixando <parameter>fp</parameter> sem utilidade).
    </simpara>
    <simpara>
     Se você quiser somente jogar o conteúdo do arquivo para stout você
     pode querer usar a função <function>readfile</function>, que vai
     salvar a você a chamada a função <function>fopen</function>.
    </simpara>
    <simpara>
     Veja também <function>readfile</function>,
     <function>fopen</function>, <function>popen</function>, e
     <function>fsockopen</function>
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fputs">
   <refnamediv>
    <refname>fputs</refname>
    <refpurpose>Escrever para um ponteiro de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fputs</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>comprimento</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>fputs</function> é uma função sinônima (alias) para 
     <function>fwrite</function>, e é identica em todas as maneiras.
     Note que o parametro <parameter>comprimento</parameter> é opcional
     e se não for especificado a string inteira será escrita.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fread">
   <refnamediv>
    <refname>fread</refname>
    <refpurpose>Leitura binary-safe de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fread</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>comprimento</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>fread</function> lê até 
     <parameter>comprimento</parameter> bytes. A leitura é 
     interrompida quando <parameter>comprimento</parameter>
     bytes foram lidos ou o fim do arquivo (eof) foi alcançado,
     o que ocorrer primeiro.
    </simpara> 
    <para>
     <informalexample>
      <programlisting role="php">
// ler o conteúdo do arquivo para uma string
$nomedoarquivo = "/usr/local/algo.txt";
$fd = fopen ($nomedoarquivo, "r");
$conteudo = fread ($fd, filesize ($nomedoarquivo));
fclose ($fd);
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Em sistemas que diferenciam entre arquivos binários e texto
      (por exemplo Windows) o arquivo tem que ser aberto com 'b'
      incluído como parametro na função <function>fopen</function>.
     </para>
    </note>
    <para>
     <informalexample>
      <programlisting role="php">
$nomedoarquivo = "c:\\arquivos\\algumaimg.gif";
$fd = fopen ($nomedoarquivo, "rb");
$conteudo = fread ($fd, filesize ($nomedoarquivo));
fclose ($fd);
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Veja também <function>fwrite</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>,
     <function>fgets</function>, <function>fgetss</function>,
     <function>fscanf</function>, <function>file</function>, e
     <function>fpassthru</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fscanf">
   <refnamediv>
    <refname>fscanf</refname>
    <refpurpose>Parses a entrada de um arquivo de acordo com um formato</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>fscanf</function></funcdef>
      <paramdef>int <parameter>handle</parameter></paramdef>
      <paramdef>string <parameter>formato</parameter></paramdef>
      <paramdef>string 
       <parameter><optional>var1</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A função <function>fscanf</function> é semelhante a
     <function>sscanf</function>, mas usa como entrada um arquivo
     associado com <parameter>handle</parameter> e interpreta a
     entrada de acordo com o <parameter>formato</parameter>
     especificado. Se somente dois parametros forem passados a esta
     função, os valores parsed serão retornados como um array.
     De outro modo, se parametros opcionais são passados a função
     irá retornar o número de valores utilizados. Os parametros opcionais
     tem que ser passados por referência.
     <example>
      <title>Exemplo do <function>fscanf</function></title>
      <programlisting role="php">
$fp = fopen ("users.txt","r");
while ($userinfo = fscanf ($fp, "%s\t%s\t%s\n")) {
    list ($name, $profission, $countrycode) = $userinfo;
    //... fazer algo com os valores
}
fclose($fp);
      </programlisting>
     </example>
     <example>
      <title>users.txt</title>
      <programlisting>
javier  argonauta        pe
hiroshi escultor         jp
robert  tradutor         us
luigi   florista         it
      </programlisting>
     </example>
    </para>
    <para>
     Veja também <function>fread</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>sscanf</function>,
     <function>printf</function>, e <function>sprintf</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fseek">
   <refnamediv>
    <refname>fseek</refname>
    <refpurpose>Procura (seeks) em um ponteiro de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fseek</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>whence</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Modifica o indicador de posição do arquivo referenciado por
     <parameter>fp</parameter>. A nova posição é obtida, medindo em
     bytes do início do arquivo, é obtida ao adicionar
     <parameter>offset</parameter> a posição especificada por
     <parameter>whence</parameter>, cujo valor é definido como
     se segue:
     <simplelist>
      <member>SEEK_SET - Use a posição igual à <parameter>offset</parameter>
      bytes. </member> <member>SEEK_CUR - Use a posição para a 
      localização atual mais <parameter>offset</parameter>.</member>
      <member>SEEK_END - Use a posição para o fim do arquivo (eof)
      mais <parameter>offset</parameter>.</member>
     </simplelist>
    </para>
    <para>Se <parameter>whence</parameter> não é especificado é
     presumido ser SEEK_SET.</parameter>
    </para>
    <para>
     Em caso de sucesso, retorna 0; caso contrário, retorna -1. Note
     que fazer um seek depois do fim do arquivo (eof) é considerado 
     um erro.
    </para>
    <para>
     Não pode ser usado em ponteiros de arquivo retornados por 
     <function>fopen</function> se for usado o formato "http://"
     ou "ftp://".
    </para>
    <note>
     <para>
      O argumento <parameter>whence</parameter> foi adicionado depois do
      PHP 4.0 RC1.
     </para>
    </note>
    <para>
     Veja também <function>ftell</function> e
     <function>rewind</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fstat">
   <refnamediv>
    <refname>fstat</refname>
    <refpurpose>
     Ler a informação sobre um arquivo usando um ponteiro de arquivo aberto
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>fstat</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Mantém estatísticas do arquivo aberto pelo ponteiro de
     arquivos fp. Esta função é similar a função
     <function>stat</function> exceto que ela opera em um
     ponteiro de arquivo aberto ao invéz de um nome de arquivo.
    </para>
    <para>
     Retorna um array com as estatísticas do arquico com os seguintes
     elementos:
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>número de links</simpara></listitem>
      <listitem><simpara>user id do dono (owner)</simpara></listitem>
      <listitem><simpara>group id (owner)</simpara></listitem>
      <listitem><simpara>tipo de device se inode device *</simpara></listitem>
      <listitem><simpara>tamanho em bytes</simpara></listitem>
      <listitem><simpara>tempo do último acesso</simpara></listitem>
      <listitem><simpara>tempo da última modificação(modification)</simpara></listitem>
      <listitem><simpara>tempo da última mudança(change)</simpara></listitem>
      <listitem><simpara>tamanho do bloco para o filesystem I/O *</simpara></listitem>
      <listitem><simpara>número de blocos alocados</simpara></listitem>
     </orderedlist>
     * - somente válido em sistemas suportando o tipo st_blksize--outros
     sistemas (por exemplo Windows) retornam -1</para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes. 
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftell">
   <refnamediv>
    <refname>ftell</refname>
    <refpurpose>Diz ao ponteiro de arquivo a posição de leitura/gravação</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ftell</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna a posição do ponteiro de arquivo referenciado por fp; por
     exemplo o seu offset no file stream.
    </para>
    <para>
     Se um error ocorrer, retorna &false;.
    </para>
    <para>
     O ponteiro de arquivo tem que ser válidoe apontar para um 
     arquivo aberto com sucesso por <function>fopen</function> ou
     <function>popen</function>.
    </para>
    <para> 
     Veja também <function>fopen</function>, <function>popen</function>,
     <function>fseek</function> e <function>rewind</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftruncate">
   <refnamediv>
    <refname>ftruncate</refname>
    <refpurpose>
     Corta um arquivo para um tamanho especificado.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ftruncate</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>comprimento</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Pega o ponteiro de arquivo, fp, e corta o arquivo no comprimento
     especificado. O arquivo final terá os 
     <paramenter>comprimento</parameter> bytes iniciais idênticos ao
     arquivo original.
     Esta função retorna &true; em caso de sucesso e &false; em caso
     de falha.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fwrite">
   <refnamediv>
    <refname>fwrite</refname>
    <refpurpose>Gravação em arquivos binary-safe</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fwrite</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>comprimento</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>fwrite</function> grava os conteúdos de
     <parameter>string</parameter> para o stream de arquivo apontado
     por <parameter>fp</parameter>. Se o argumento
     <parameter>comprimento</parameter> é dado, a gravação irá parar
     depois de que <parameter>comprimento</parameter> bytes foram
     escritos ou o fim da <parameter>string</parameter> é alcançada,
     o que ocorrer primeiro.
    </simpara>
    <simpara>
     Note que se o argumento <parameter>comprimento</parameter> é dado,
     então a opção de configuração <link
     linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>
     será ignorada e nenhuma barra será retirada do
     <parameter>string</parameter>.
    </simpara>
    <note>
     <para>
      Em sistemas que diferenciam entre arquivos binários e texto
      (por exemplo Windows) o arquivo tem que ser aberto com 'b'
      incluído no parametro mode do <function>fopen</function>.
     </para>
    </note>
    <simpara>
     Veja também <function>fread</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function> e
     <function>fputs</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.set-file-buffer">
   <refnamediv>
    <refname>set_file_buffer</refname>
    <refpurpose>
     Configura o buffer de um ponteiro de arquivo
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>set_file_buffer</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>buffer</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     A saída usando <function>fwrite</function> é normalmente 
     guardada em um buffer de 8K. Isto significa que se se tem 
     dois processos querendo gravar no mesmo stream de saída (output)
     (um arquivo), cada um é pausado depois de 8K de informações para
     deixar o outro processo escrever. <function>set_file_buffer</function>
     configura o buffer para operações de escrita no dado ponteiro de
     arquivo <parameter>fp</parameter> para o <parameter>buffer</parameter>
     em bytes. Se <parameter>buffer</parameter> é 0 então as operações
     de escrita não utilizarão o buffer. Isso garante que todas
     as gravações com <function>fwrite</function> são completadas
     antes que outros processos são possibilitados de escreverem
     para este stream de saída.
    </simpara>
    <simpara>
     Esta função retorna 0 em caso de sucesso, ou fim do arquivo (eof)
     se o pedido não puder ser honrado.
    </simpara>
    <para>
     O seguinte exemplo demonstra como usar 
     <function>set_file_buffer</function> para criar um stream
     sem usar o buffer.
     <example>
      <title>exemplo de <function>set_file_buffer</function></title>
      <programlisting role="php">
$fp=fopen($arquivo, "w");
if($fp){
  set_file_buffer($fp, 0);
  fputs($fp, $saida);
  fclose($fp);
}
      </programlisting>
     </example>
    </para>

    <simpara>
     Veja também <function>fopen</function> e <function>fwrite</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-dir">
   <refnamediv>
    <refname>is_dir</refname>
    <refpurpose>Diz se o arquivo é um diretório</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_dir</function></funcdef>
      <paramdef>string <parameter>nomedorarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna &true; se o nomedoarquivo existe e é um diretório.
    </para>
    <para>
     Os resultados desta função são guardados em cache.
     Veja <function>clearstatcache</function> para mais detalhes.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessível pelo filesystem do servidor.
    </simpara>
    <para>
     Veja também <function>is_file</function> e
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-executable">
   <refnamediv>
    <refname>is_executable</refname>
    <refpurpose>Diz se um arquivo é executável</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_executable</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna &true; se no nomedoarquivo existe e é executável.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes. 
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessivel pelo filesystem do servidor.
    </simpara>
    <para>
     Veja também <function>is_file</function> e
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-file">
   <refnamediv>
    <refname>is_file</refname>
    <refpurpose>
     Diz se o arquivo é um arquivo comum
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_file</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna &true; se o nome do nomedoarquivo existe e é um arquivo comum.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
    <para>
     Veja também <function>is_dir</function> e
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-link">
   <refnamediv>
    <refname>is_link</refname>
    <refpurpose>
     Diz se o arquivo é um link simbólico (symbolic link)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_link</function></funcdef>
      <paramdef>string <parameter>arquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna &true; se o nomedoarquivo existe e é um link simbólico
     (symbolic link).
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes. 
    </para>
    <para>
     Veja também <function>is_dir</function> e
     <function>is_file</function>.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessivel pelo filesystem do servidor.
    </simpara>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.is-readable">
   <refnamediv>
    <refname>is_readable</refname>
    <refpurpose>
     Diz se o arquivo é legivel (readable)
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_readable</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna &true; se o nomedoraquivo existe e é legível (readable).
    </para>
    <para>
     Lembre-se que o PHP deve estar acessando o arquivo como o mesmo
     usuário que o servidor de web roda (frequentemente 'nobody').
     Limitações do safemode não são levadas em consideração.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes. 
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessivel pelo filesystem do servidor.
    </simpara>
    <para>
     Veja também <function>is_writable</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writable">
   <refnamediv>
    <refname>is_writable</refname>
    <refpurpose>Diz se pode-se escrever para o arquivo(writable)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_writable</function></funcdef>
      <paramdef>string <parameter>arquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retorna &true; se o nomedoarquivo existe e pode ser escrito para.
     O argumento nomedoarquivo pode ser um nome de diretório, deixando
     você saber se o diretório pode ser escrito para (writeable).
    </para>
    <para>
     Lembre-se que o PHP deve estar acessando o arquivo como o mesmo
     usuário que o servidor de web roda (frequentemente 'nobody').
     Limitações do safemode não são levadas em consideração.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
    <simpara>
     Esta função não funcionará em <link
     linkend="features.remote-files">arquivos remotos</link>; o arquivo
     a ser examinado tem que ser acessível pelo filesystem do servidor.
    </simpara>
    <para>
     Veja também <function>is_readable</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writeable">
   <refnamediv>
    <refname>is_writeable</refname>
    <refpurpose>Diz se pode-se escrever para o arquivo(writable)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_writeable</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Esta é uma função sinônima (alias) para 
     <function>is_writable</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-uploaded-file">
   <refnamediv>
    <refname>is_uploaded_file</refname>
    <refpurpose>Diz se o arquivo foi uploaded via HTTP POST</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_uploaded_file</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     Esta função é somente disponível em versões do PHP3 depois de
     3.0.16, e em versões do PHP 4 depois de 4.0.2.
    </para>

    <para>
     Retorna &truel se o arquivo com o nome <varname>nomedoarquivo</varname>
     foi uploaded via HTTP POST. Isto é útil para ter certeza que um
     usuário malicioso, não está tentando confundir o script em trabalhar
     em arquivos que não deve estar trabalhando--por exemplo,
     <filename>/etc/passwd</filename>.
    </para>

    <para>
     Este tipo de confirmação é importante principalmente se existe
     alguma chance que qualquer coisa feita com os arquivos uploadeados
     poderiam revelar o seu conteúdo para o usuário, ou mesmo
     para outros usuários no mesmo sistema.
    </para>

    <para>
     Veja também <function>move_uploaded_file</function>, e a seção
     <link linkend="features.file-upload">Handling file uploads</link>
     para um simples exemplo de utilização desta função.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.link">
   <refnamediv>
    <refname>link</refname>
    <refpurpose>Criando um hard link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>link</function></funcdef>
      <paramdef>string <parameter>alvo</parameter></paramdef>
      <paramdef>string <parameter>link</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <function>link</function> cria um hard link.</para>
    <para>
     Veja também <function>symlink</function> para criar soft links,
     e <function>readlink</function> assim como
     <function>linkinfo</function>.
    </para>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.linkinfo">
   <refnamediv>
    <refname>linkinfo</refname>
    <refpurpose>Ler informações sobre um link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>linkinfo</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>linkinfo</function> retorna o campo st_dev da 
     structure em C do UNIX retornado pela chamada do sistema 
     (system call) lstat. Esta função é usada para verificar
     se um link (apontado por <parameter>path</parameter>)
     realmente existe (usando o mesmo metodo que a macro S_ISLNK
     definida em stat.h). Retorna 0 ou &false; em caso de erro.
    </para>
    <para>
     Veja também <function>symlink</function>, <function>link</function>,
     e <function>readlink</function>.
    </para>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.mkdir">
   <refnamediv>
    <refname>mkdir</refname>
    <refpurpose>Criar um diretório</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mkdir</function></funcdef>
      <paramdef>string <parameter>nomedopath</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Tenta criar o diretório especificado por 
     <parameter>nomedopath</parameter>.
    </para>
    <para>
     Note que você provavelmente quer especificar o mode como
     um número octal, o que significa que ele deve ter o zero
     inicial. O mode é também modificado pela umaks atual,
     o que você pode mudar usando <function>umask</function>.
     <informalexample>
      <programlisting role="php">
mkdir ("/path/para/o/meu/dir", 0700);
      </programlisting>
     </informalexample>
    </para>
    <para>
     Retorna &true; em sucesso e &false; em caso de falha.
    </para>
    <para>
     Veja também <function>rmdir</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.move-uploaded-file">
   <refnamediv>
    <refname>move_uploaded_file</refname>
    <refpurpose>Move um arquivo uploadeado para uma nova localização</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>move_uploaded_file</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
      <paramdef>string <parameter>destino</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     Esta função está disponível somente em versões do PHP 3 depois
     da 3.0.16, e em versões do PHP 4 depois da 4.0.2.
    </para>

    <para>
     Esta função checa para ter certeza que o arquivo designado por
     <parameter>nomedoarquivo</parameter> é um arquivo válido 
     uploadeado (significando que ele foi uploadeado pelo mecanismo
     do PHP de HTTP POST). Se o arquivo é válido, ele será movido
     para o nomedoarquivo dado pelo <parameter>destino</parameter>.
    </para>

    <para>
     Se <parameter>nomedoarquivo</parameter> não é um arquivo
     uploadeado válido, então não haverá nenhuma ação e 
     <function>move_uploaded_file</function> irá retornar &false;.
     &false;. 
    </para>

    <para>
     Se <parameter>nomedoarquivo</parameter> é um arquivo uploadeado
     válido e não pode ser movido por alguma razão, nenhuma ação
     irá ocorrer, e <function>move_uploaded_file</function> irá 
     retornar &false;. Adicionalmente, um aviso será transmitido.
    </para>

    <para>
     Este tipo de confirmação é importante principalmente se existe
     alguma chance que qualquer coisa feita com os arquivos uploadeados
     poderiam revelar o seu conteúdo para o usuário, ou mesmo
     para outros usuários no mesmo sistema.
    </para>

    &note.sm.uidcheck;

    <para>
     Veja também <function>is_uploaded_file</function>, e a seção
     <link linkend="features.file-upload">Handling file uploads</link>
     para um simples exemplo de utilização desta função.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.parse-ini-file">
   <refnamediv>
    <refname>parse_ini_file</refname>
    <refpurpose>Parse um arquivo de configuração</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>parse_ini_file</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
      <paramdef>bool 
       <parameter>
        <optional>processar_secoes</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>parse_ini_file</function> carrega no
     arquivo ini especificado no 
     <parameter>nomedoarquivo</parameter>, e retorna as 
     configurações dele em um array associativo.
     Ao usar <parameter>processar_secoes</parameter> como
     &true;, você receberá um array multidimensional, com
     os nomes das seções e os parametros incluidos. O
     padrão (default) para 
     <parameter>processar_secoes</parameter> é &false;.
    </para>
    <note>
     <para>
      Esta função não tem nada a ver com o arquivo
      <filename>php.ini</filename>. Este já é processado na hora
      que você executa o script. Esta função pode ser usada para ler
      os arquivos de configuração de sua própria aplicação.
     </para>
    </note>
    <para>
     A estrutura do arquivo ini é similar a do 
     <filename>php.ini</filename>.
    </para>
    <para>
     <example>
      <title>Conteúdo de exemplo.ini</title>
      <programlisting>
; Este é um arquivo de configuração de exemplo
; Comentário começam com ';', como no php.ini

[primeira_secao]
um = 1
cinco = 5

[segunda_secao]
path = /usr/local/bin
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>exemplo de <function>parse_ini_file</function></title>
      <programlisting>
<![CDATA[
<?php

// Parse sem as seções
$ini_array = parse_ini_file("exemplo.ini");
print_r($ini_array);

// Parse com as seções
$ini_array = parse_ini_file("exemplo.ini", TRUE);
print_r($ini_array);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Would produce:
     <informalexample>
      <programlisting>
Array
(
    [um] => 1
    [cinco] => 5
    [path] => /usr/local/bin
)
Array
(
    [primeira_secao] => Array
        (
            [um] => 1
            [cinco] => 5
        )

    [segunda_secao] => Array
        (
            [path] => /usr/local/bin
        )

)
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pathinfo">
   <refnamediv>
    <refname>pathinfo</refname>
    <refpurpose>Retorna informação sobre o path de um arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pathinfo</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pathinfo</function> retorna um array associatico
     contendo informações sobre o <parameter>path</parameter>. O
     seguinte elementos do array são retornados:
     <parameter>dirname</parameter>, <parameter>basename</parameter>
     e <parameter>extension</parameter>.
    </para>
    <para>
     <example>
      <title>Exemplo de <function>pathinfo</function></title>
      <programlisting role="php">
&lt;?php

$partes_do_path = pathinfo("/www/htdocs/index.html");

echo $partes_do_path["dirname"] . "\n";
echo $partes_do_path["basename"] . "\n";
echo $partes_do_path["extension"] . "\n";

?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Produziria:
     <informalexample>
      <programlisting>
/www/htdocs
index.html
html
      </programlisting>
     </informalexample>
    </para>
    <para>
     Veja também <function>dirname</function>,
     <function>basename</function>, <function>parse_url</function>
     e <function>realpath</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pclose">
   <refnamediv>
    <refname>pclose</refname>
    <refpurpose>Fechar um processo de um ponteiro de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pclose</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Fecha um ponteiro de arquivo a uma pipe aberta por
     <function>popen</function>.
    </para> 
    <para>
     O ponteiro de arquivo tem que ser válido e tem que ser retornado
     por uma chamada bem sucedida a função <function>popen</function>.
    </para> 
    <para>
     Retorna o status da terminação do processo que rodava.
    </para>
    <para>
     Veja também <function>popen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.popen">
   <refnamediv>
    <refname>popen</refname>
    <refpurpose>Abrir um processo de ponteiro de arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>popen</function></funcdef>
      <paramdef>string <parameter>command</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Abre uma pipe para um processo executado ao se dar um fork
     para o comando dado por command.
    </para>
    <para>
     Retorna um ponteiro de arquivo identico ao retornado por 
     <function>fopen</function>, exceto que ele é unidirecional
     (somente pode ser usado para leitura ou gravação) e tem que ser
     fechado com pclose. Este ponteiro pode ser usado com
     <function>fgets</function>, <function>fgetss</function> e
     <function>fputs</function>.
    </para>
    <para>
     Caso um erro ocorra retorna &false;.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
$fp = popen ("/bin/ls", "r");
      </programlisting>
     </informalexample>
    </para>
    <para>
     Veja também <function>pclose</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readfile">
   <refnamediv>
    <refname>readfile</refname>
    <refpurpose>Ler o conteúdo de um arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>readfile</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>use_include_path</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Lê um arquivo e escreve o seu conteúdo para a saída padrão
     (standard output).
    </para>
    <para>
     Retorna o número de bytes lido do arquivo. Se um error ocorrer,
     retorna &false; e ao menos que a função seja chamada como
     @readfile, uma mensagem de erro será impressa.
    </para>
    <para>
     Se <parameter>nomedoarquivo</parameter> comeca com "http://"
     (não diferencia entre maiúsculas e mínusculas), uma conexão
     HTTP 1.0 será aberta para o servidor específicado e o texto
     da resposta será escrito para a saída padrão (standard output).
    </para>
    <para>
     Versões anteriores a PHP 4.0.5 não comportam redirecionamento de
     HTTP. Por causa disto, diretórios tem que incluir a barra ao fim.
    </para>
    <para>
     Se <parameter>nomedoarquivo</parameter> começa com "ftp://"
     (não diferencia entre maiúsculas e mínusculas), uma conexão
     para o servidor especificado é aberta e o arquivo requisitado é
     escrito e o arquivo requisitado é escrito para a saída padrão
     (standard output). Se o servidor não suporta modo passivo, ista
     conexão irá falhar.
    </para>
    <para>
     Se o <parameter>nomedoarquivo</parameter> não começar com nenhuma
     das duas strings acima, o arquivo será aberto do filesystem e
     o seu conteúdo escrito para a saída padrão (standard output).
    </para>
    <para>
     Você pode usar o segundo parametro opcional e o setar para "1",
     se você quiser procurar o arquivo no  <link
     linkend="ini.include-path">include_path</link>, também.
     linkend="ini.include-path">include_path</link>, too.
    </para>
    <para>
     Veja também <function>fpassthru</function>,
     <function>file</function>, <function>fopen</function>,
     <function>include</function>, <function>require</function> e
     <function>virtual</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readlink">
   <refnamediv>
    <refname>readlink</refname>
    <refpurpose>Retornar o alvo de um link simbólico</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>readlink</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <function>readlink</function> faz o mesmo que a função do C
    readlink e retorna os conteúdos do path do link simbólico ou
    0 em caso de erro.
    </para>
    <para>
     Veja também <function>symlink</function>,
     <function>readlink</function> e
     <function>linkinfo</function>.
    </para>
    <note>
     <simpara>
     Esta função não funciona em sistemas Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.rename">
   <refnamediv>
    <refname>rename</refname>
    <refpurpose>Renomear um arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>rename</function></funcdef>
      <paramdef>string <parameter>nomeantigo</parameter></paramdef>
      <paramdef>string <parameter>novonome</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Tenta renomear <parameter>nomeantigo</parameter> para
     <parameter>novonome</parameter>.
    </para> 
    <para>
     Retorna &true; em caso de sucesso, &false; caso contrário.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rewind">
   <refnamediv>
    <refname>rewind</refname>
    <refpurpose>Reinicializa a posição do ponteiro de arquivos para o início</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>rewind</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>   
     Muda o indicador de ponteiro de arquivo fp para o início do
     stream do arquivo.</para> <para> Se um erro ocorrer, 
     retornará 0.</para> <para> O ponteiro de arquivo tem que ser
     válido e tem que apontar para um arquivo que foi aberto com
     sucesso por <function>fopen</function>.
    </para>
    <para>
     Veja também <function>fseek</function> e
     <function>ftell</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.rmdir">
   <refnamediv>
    <refname>rmdir</refname>
    <refpurpose>Remover um diretório</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>rmdir</function></funcdef>
      <paramdef>string <parameter>nomedodir</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Tenta remover o diretório com o nome de nomedodir. O diretório
     tem que estar vazio e as permissões relevantes permitam a 
     esta operação.
    </para> 
    <para> 
     Em caso de erro, retorna 0.
    </para>
    <para>
     Veja também <function>mkdir</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.stat">
   <refnamediv>
    <refname>stat</refname>
    <refpurpose>Dar informação sobre um arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>stat</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Pegar estatísticas sobre o arquivo com o nome de nomedoarquivo.
    </para>
    <para>
     Retorna um array com as estatísticas do arquivo com os seguintes
     elementos:
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>inode protection mode</simpara></listitem>
      <listitem><simpara>número de links</simpara></listitem>
      <listitem><simpara>user id owner</simpara></listitem>
      <listitem><simpara>group id owner</simpara></listitem>
      <listitem><simpara>device type if inode device *</simpara></listitem>
      <listitem><simpara>tamanho em bytes</simpara></listitem>
      <listitem><simpara>time of last access</simpara></listitem>
      <listitem><simpara>time of last modification</simpara></listitem>
      <listitem><simpara>time of last change</simpara></listitem>
      <listitem><simpara>blocksize for filesystem I/O *</simpara></listitem>
      <listitem><simpara>number of blocks allocated</simpara></listitem>
     </orderedlist>
     * - somente válido em sistemas supportando o tipo st_blksize--outros
     sistemas (por exemplo Windows) retornam -1.
    </para>
    <para>
     Retorna &false; em caso de erro.
    </para>
    <para>
     <function>stat</function> não suporta URL ao contrário de
     <function>fopen</function>.
    </para>
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.lstat">
   <refnamediv>
    <refname>lstat</refname>
    <refpurpose>Dar informações sobre um arquivo ou link simbólico
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>lstat</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Pega as estatísticas do arquivo ou link simbólico com o nome de
     nomedoarquivo. Esta função é identica a <function>stat</function>
     exceto que se o parametro <parameter>nomedoarquivo</parameter>
     é um link simbólico o status do link simbólico é retornado e não
     o status do arquivo apontando pelo link simbólico.
    </para>
    <para>
     Retorna um array com as estatísticas do arquivo com os seguintes
     elementos:
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>inode protection mode</simpara></listitem>
      <listitem><simpara>number of links</simpara></listitem>
      <listitem><simpara>user id of owner</simpara></listitem>
      <listitem><simpara>group id owner</simpara></listitem>
      <listitem><simpara>device type if inode device *</simpara></listitem>
      <listitem><simpara>size in bytes</simpara></listitem>
      <listitem><simpara>time of last access</simpara></listitem>
      <listitem><simpara>time of last modification</simpara></listitem>
      <listitem><simpara>time of last change</simpara></listitem>
      <listitem><simpara>blocksize for filesystem I/O *</simpara></listitem>
      <listitem><simpara>number of blocks allocated</simpara></listitem>
     </orderedlist>
     * - somente válido em sistemas supportando o tipo st_blksize--outros
     sistemas (por exemplo Windows) retornam -1.
    <para>
     Os resultados desta função são guardados em cache. Veja
     <function>clearstatcache</function> para mais detalhes.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.realpath">
   <refnamediv>
    <refname>realpath</refname>
    <refpurpose>Retorna o path absoluto canonicalizado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>realpath</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>realpath</function> expande todos os links simbólicos
     e resolve referencias para '/./', '/../' e extra caracteres '/'
     na entrada pelo <parameter>path</parameter> e retorna o path
     absoluto canonicalizado . O path resultante não conterá nenhum
     link simbólico ou componentes '/./' e '/../'.
    </para>
    <para>
     <example>
      <title>exemplo de <function>realpath</function></title>
      <programlisting role="php">
$real_path = realpath ("../../index.php");
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.symlink">
   <refnamediv>
    <refname>symlink</refname>
    <refpurpose>Criar um link simbólico</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>symlink</function></funcdef>
      <paramdef>string <parameter>alvo</parameter></paramdef>
      <paramdef>string <parameter>link</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>symlink</function> cria um link simbólico
     do <parameter>alvo</parameter> existente com o nome
     especificado em <parameter>link</parameter>.
    </para>
    <para>
     Veja também <function>link</function> para criar hard links,
     e <function>readlink</function> junto com
     <function>linkinfo</function>.
    </para>
    <note>
     <simpara>
      Esta função não funciona em sistemas Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.tempnam">
   <refnamediv>
    <refname>tempnam</refname>
    <refpurpose>Criar um nome de arquivo único</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>tempnam</function></funcdef>
      <paramdef>string <parameter>dir</parameter></paramdef>
      <paramdef>string <parameter>prefix</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Cria um nome de arquivo temporário único no diretório especificado.
     Se o diretório não existe, <function>tempnam</function> pode
     gerar o nome de arquivo no diretório temporário do sistema.
    </para>
    <para>
     Antes do PHP 4.0.6 o comportamento da função
     <function>tempnam</function> era dependente do sistema.
     No Windows a váriavel de ambiente do sistema TMP irá
     sobresair o parametro <parameter>dir</parameter>, em
     Linux a váriavel de ambiente TMPDIR tem precedencia, 
     enquanto SVR4 irá sempre usar o parametro 
     <parameter>dir</parameter> se o diretório para o qual
     ele aponta existe. Consulte a documentação do seu sistema
     para a função tempnam(3) se em dúvida.
    </para>
    <para>
     Retorna o nome temporário do arquivo ou a string &null; em
     caso de falha.
     <example>
      <title>exemplo de <function>tempnam</function></title>
      <programlisting role="php">
$tmpfname = tempnam ("/tmp", "FOO");
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      O comportamento desta função mudou na versão 4.0.3. O arquivo 
      temporário é também criado para evitar uma condição de corrida (race)
      onde o arquivo pode aparecer no filesystem entre o tempo que a string
      foi gerada e antes que o script tem tempo para criar o arquivo.
     </simpara>
    </note>
    <para>
      Veja também <function>tmpfile</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.tmpfile">
   <refnamediv>
    <refname>tmpfile</refname>
    <refpurpose>Criar um arquivo temporário</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>arqtmp</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Cria um arquivo temporárop com um nome único em modo de
     gravação, retornando o handle do arquivo em modo similar ao
     retornado por <function>fopen</function>.
     O arquivo é automáticamente apagado quando fechado (usando
     <function>fclose</function>), ou quando o script acaba.
    </para>
    <para>
     Para detalhes consulte a documentação do seu sistem
     na função <literal>tmpfile(3)</literal>, assim como o
     header <filename>stdio.h</filename>.
    </para>
    <para>
     Veja também <function>tempnam</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.touch">
   <refnamediv>
    <refname>touch</refname>
    <refpurpose>Mudar o tempo de modificação do arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>touch</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
      <paramdef>int 
        <parameter>
         <optional>tempo</optional>
        </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Tenta mudar o tempo de modificação do arquivo com o nome de
     nomedoarquivo para o valor dado por tempo. Se a opção de tempo
     não é dada, o tempo atual será usado.
    </para>
    <para>
     Se o arquivo não existe, ele é criado.
    </para>
    <para>
     Retorna &true; em caso de sucesso e &false; caso contrário.
     <example>
      <title>exemplo da função <function>touch</function></title>
      <programlisting role="php">
if (touch ($nomedoarquivo)) {
    print "o tempo do $nomedoarquivo foi modificado
           para o dia e hora de agora";
} else {
    print "Desculpe, não foi possivel modificar o tempo de $nomedoarquivo";
}
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.umask">
   <refnamediv>
    <refname>umask</refname>
    <refpurpose>Modificar a umask atual</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>umask</function></funcdef>
      <paramdef>int <parameter>mask</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>umask</function> modifica o umask do PHP para o mask 
     &amp; 0777 e retorna o umask antigo. Quando o PHP está sendo 
     usado como um módulo do servidor o umask é restaurado quando 
     o pedido acaba.
    </para>
    <para>
     <function>umask</function> sem argumentos simplesmente retorna
     o umask atual.
    </para>
    <note>
     <simpara>
      Esta função pode não funcionar em sistemas Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.unlink">
   <refnamediv>
    <refname>unlink</refname>
    <refpurpose>Deleta um arquivo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>unlink</function></funcdef>
      <paramdef>string <parameter>nomedoarquivo</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Deleta <parameter>nomedoarquivo</parameter>. Similar a função
     C no Unix unlink().
    </para>
    <para>
     Retorna 0 ou &falso; em caso de erro.
    </para>
    <para>
     Veja também <function>rmdir</function> para remover diretórios.
    </para>
    <note>
     <simpara>
      Esta função pode não funcionar em sistemas Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
