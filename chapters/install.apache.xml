<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
  <sect1 id="install.apache">
   <title>Servidores-Apache</title>
   <para>
    Esta seção contém notas e dicas específicas para instalações do PHP em
    Apache, tanto para versões <link linkend="install.apache.unix">Unix</link>
    quanto para <link linkend="install.apache.windows">Windows</link>.
   </para>   
   <sect2 id="install.apache.unix">
    <title>Detalhes ao instalar o PHP com Apache no Unix</title>
    <para>
     Você pode selecionar argumentos para adicionar ao
     <command>configure</command> na linha 10 abaixo através da <link
     linkend="install.configure">Lista completa de opções do configure
     </link>. Os números de versões foram omitidos aqui, para assegurar
     que as instruções não estejam incorretas. Você deverá trocar o
     'xxx' aqui com os valores corretos dos seus arquivos.
    </para>

    <example id="install.apache.unix.longer">
     <title>
      Instruções de Instalação (Apache Versão de Módulo Compartilhado) para PHP 4
     </title>
     <screen>
<![CDATA[
1.  gunzip apache_xxx.tar.gz
2.  tar -xvf apache_xxx.tar
3.  gunzip php-xxx.tar.gz
4.  tar -xvf php-xxx.tar
5.  cd apache_xxx
6.  ./configure --prefix=/www --enable-module=so
7.  make
8.  make install
9.  cd ../php-xxx
10. ./configure --with-mysql --with-apxs=/www/bin/apxs
11. make
12. make install

  Se você decidir mudar as opções de seu configure depois da instalação
  você precisará somente repetir os últimos tres passos. Você somente precisará
  reiniciar o apache para o novo módulo funcionar. Não será necessário recompilar
  o Apache.

13. cp php.ini-dist /usr/local/lib/php.ini

  Você pode editar o seu arquivo .ini para configurar as opções do PHP.  Se
  você preferir que este arquivo fique em outro lugar, use a opção
  --with-config-file-path=/path no passo 10.

14. Edite o seu arquivo httpd.conf ou srm.conf e verifique que estas linas estejam presentes
    e não estejam comentadas:
  
   AddType application/x-httpd-php .php

   LoadModule php4_module        libexec/libphp4.so
 
  Você pode escolher qualquer extensão aqui. .php é simplesmente uma sugestão
  que nos damos. Você também pode incluir .html, e .php3 pode ser adicionado para 
  compatibilidade com versões antigas.
 
  O caminho no lado direito do comando LoadModule deve apontar
  para para o caminho do módulo PHP do seu sistema. O comando acima está correto para
  os passos mostrados acima.

15. Use seu procedimento normal para iniciar o servidor Apache. (Você deve
    para e reiniciar o servidor, não somente fazer um reinício por usar
    um sinal HUP ou USR1.)
]]>
      </screen>
     </example>

     <para>
      Dependendo da sua instalação do Apache e das variações Unix, existem inúmeras
      maneiras possíveis de parar e reiniciar o servidor. Abaixo estão algumas linhas típicas
      usadas para reiniciar e o servidor, para instalações de versões de apache/unix.
      Você deve trocar <literal>/caminho/para/</literal> pelo
      caminho destas aplicações nos seus sistemas.
      <informalexample>
       <screen>
<![CDATA[
1. Inúmeras variações de sistemas Linux:
/etc/rc.d/init.d/httpd restart

2. Usando os scripts apachectl:
/caminho/para/apachectl stop
/caminho/para/apachectl start

3. httpdctl and httpsdctl (Usando OpenSSL), igual ao apachectl:
/caminho/para/httpsdctl stop
/caminho/para/httpsdctl start

4. Usando mod_ssl, ou outro servidor SSL, você pode querer iniciar ou
reiniciar manualmente:
/caminho/para/apachectl stop
/caminho/para/apachectl startssl
]]>
       </screen>
      </informalexample>
      As localizações dos binários apachectl e http(s)dctl geralmente
      variam. Se o seu sistema tem os comandos <literal>locate</literal> ou
      <literal>whereis</literal> ou <literal>which</literal>,
      estem podem lhe ajudar a encontrar os programas de controle do servidor.
     </para>

     <para>
      Exemplos diferentes de compilação do PHP para apache estão a seguir:
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Isto irá criar uma biblioteca compartilhada <filename>libphp4.so</filename>
      que é carregada com o Apache usando uma linha LoadModule no
      arquivo <filename>httpd.conf</filename> do Apache. O suporte ao PostgreSQL
      está embutido dentro da biblioteca compartilhada <filename>libphp4.so</filename>.
     </para>
     <para>
      <informalexample>
       <programlisting>
<![CDATA[
./configure --with-apxs --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Isto irá criar uma biblioteca compartilhada <filename>libphp4.so</filename>
      para o Apache, mas isto também criará uma biblioteca compartilhada
      <filename>pgsql.so</filename> que é carregada com o PHP
      tanto ao usar a diretiva de extensão no arquivo
      &php.ini; ou então carregando ela explícitamente no script
      usando a função <function>dl</function>.
     </para>
     <para>
      <informalexample>
       <programlisting>
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      This will create a <filename>libmodphp4.a</filename> library, a
      <filename>mod_php4.c</filename> and some accompanying files and
      copy this into the <literal>src/modules/php4</literal> directory
      in the Apache source tree. Then you compile Apache using
      <literal>--activate-module=src/modules/php4/libphp4.a</literal>
      and the Apache build system will create
      <filename>libphp4.a</filename> and link it statically into the
      <filename>httpd</filename> binary. The PostgreSQL support is
      included directly into this <filename>httpd</filename> binary,
      so the final result here is a single <filename>httpd</filename>
      binary that includes all of Apache and all of PHP.
     </para>
     <para>
      <informalexample>
       <programlisting>
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Same as before, except instead of including PostgreSQL support
      directly into the final <filename>httpd</filename> you will get
      a <filename>pgsql.so</filename> shared library that you can load
      into PHP from either the &php.ini; file or
      directly using <function>dl</function>.
     </para>
     <para>
      When choosing to build PHP in different ways, you should consider
      the advantages and drawbacks of each method. Building as a shared
      object will mean that you can compile apache separately, and don't
      have to recompile everything as you add to, or change, PHP.
      Building PHP into apache (static method) means that PHP will
      load and run faster. For more information, see the Apache
      <ulink url="&url.apachedso;">webpage on DSO support</ulink>.
     </para>
    <note>
     <para>
      Apache's default http.conf currently ships with a section that looks
      like this:
      <informalexample>
       <programlisting>
<![CDATA[
User nobody
Group "#-1"
]]>
       </programlisting>
      </informalexample>
      Unless you change that to "Group nogroup" or something like that ("Group daemon" is
      also very common) PHP will not be able to open files.
     </para>
    </note>  
    <note>
     <para>
     Make sure you specify the installed version of apxs when using --with-apxs=/path/to/apxs.
     You must NOT use the apxs version that is in the apache sources but the one that is actually
     installed on your system.
     </para>
    </note>   
   </sect2>
   <sect2 id="install.apache.windows">
    <title>Installing PHP on Windows with Apache 1.3.x</title>
    
    <simpara>
     There are two ways to set up PHP to work with Apache 1.3.x
     on Windows. One is to use the CGI binary (php.exe),
     the other is to use the Apache module DLL. In either case
     you need to stop the Apache server, and edit your
     <filename>srm.conf</filename> or <filename>httpd.conf</filename>
     to configure Apache to work with PHP.
    </simpara>
    <simpara>
     It is worth noting here that now the SAPI module has been 
     made more stable under windows, we recommend it's use above
     the CGI binary, since it is more transparent and secure.
    </simpara>
    <simpara>
     Although there can be a few variations of configuring PHP
     under Apache, these are simple enough to be used by the
     newcomer. Please consult the Apache Docs for further
     configuration directives.
    </simpara>
  
    <para>
     If you unziped the PHP package to c:\php\ as described
     in the <link linkend="install.windows.manual">Manual
     Installation Steps</link> section, you need to insert
     these lines to your Apache configuration file to set
     up the CGI binary:
     <itemizedlist>
      <listitem>
       <simpara>
        <literal>
         ScriptAlias /php/ "c:/php/"
        </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>
         AddType application/x-httpd-php .php .phtml
        </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>
         Action application/x-httpd-php "/php/php.exe"
        </literal>
       </simpara>
      </listitem>
     </itemizedlist>
     Note that the second line in the list above can be found
     in the actual versions of <filename>httpd.conf</filename>,
     but it is commented out. Remember also to substitute the 
     <filename>c:/php/</filename> for your actual path to PHP.
     </para>

    <warning>
     <para>
      By using the CGI setup, your server is open
      to several possible attacks. Please read
      our <link linkend="security.cgi-bin">CGI security 
      section</link> to learn how to defend yourself from attacks.
     </para>
    </warning>

    <para>
     If you would like to use PHP as a module in Apache,
     be sure to move <filename>php4ts.dll</filename> to
     the windows/system (for Windows 9x/Me) or winnt/system32
     (for Windows NT/2000/XP) directory, overwriting any older file.
     Then you should add the following two lines to you Apache
     conf file:
     <itemizedlist>
      <listitem>
       <simpara>
        <literal>
         LoadModule php4_module c:/php/sapi/php4apache.dll
        </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <literal>
          AddType application/x-httpd-php .php .phtml
        </literal>
       </simpara>
      </listitem>
     </itemizedlist>
    </para>

    <simpara>
     After changing the configuration
     file, remember to restart the server, for example,
     <literal>NET STOP APACHE</literal> followed by
     <literal>NET START APACHE</literal>, if you run Apache
     as a Windows Service, or use your regular shortcuts.
    </simpara>
    
    <note>
     <simpara>
      You may find after using the windows installer for Apache
      that you need to define the <literal>AddModule</literal>
      directive for <filename>mod_php4.c</filename> in the 
      configuration file (<filename>httpd.conf</filename>).
      This is done by adding <literal>AddModule mod_php4.c</literal>
      to the <literal>AddModule</literal> list, near the beginning
      of the configuration file. This is especially important if
      the <literal>ClearModuleList</literal> directive is defined.
      Failure to do this may mean PHP will not be registered as an 
      Apache module.
     </simpara>
    </note>
    
    <simpara>
     There are 2 ways you can use the source code highlighting feature,
     however their ability to work depends on your installation.
     If you have configured Apache to use PHP as an ISAPI module, then by 
     adding the following line to your configuration file you can use
     this feature: <literal>AddType application/x-httpd-php-source .phps
     </literal>
    </simpara>
    <simpara>
     If you chose to configure Apache to use PHP as a CGI binary, you
     will need to use the <function>show_source</function> function. To
     do this simply create a PHP script file and add this code: 
     <literal>&lt;?php show_source ("original_php_script.php"); ?></literal>. 
     Substitute <literal>original_php_script.php</literal> with 
     the name of the file you wish to show the source of. 
    </simpara>
    
    <note>
     <simpara>
      On Win-Apache all backslashes in a path statement such
      as "c:\directory\file.ext", must be converted to
      forward slashes, as "c:/directory/file.ext".
     </simpara>
    </note>
   </sect2>
  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
