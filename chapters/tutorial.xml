<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.14 Maintainer: thomasgm  Status: ready -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Um simples tutorial</title>

  <para>
   Aqui nós iremos mostrar o básico do básico do PHP em um curto tutorial. 
   Este texto fala somente sobre a criação de páginas dinâmicas com o PHP, 
   visto que o PHP pode criar mais do que somente webpages. Veja a seção 
   entitulada <link linkend="intro-whatcando">O que o PHP pode fazer</link> 
   para mais informações.
  </para>
  <para>
   Fazer páginas com PHP é o mesmo que criar páginas HTML e você pode 
   criá-las e editá-las da mesma maneira que faz com suas páginas HTML normal.
  </para>

  <sect1 xml:id="tutorial.requirements">
   <title>O que eu preciso?</title>
   <para>
    Neste tutorial nós presumimos que seu servidor tem suporte ao PHP 
	ativado e que todos os arquivos terminam com a extensão  <filename>.php</filename>
	são tratados pelo PHP. Na maioria dos servidores esta é a extensão 
	padrão para os arquivos PHP, mas pergunte ao seu administrador só 
	para ter certeza. Se o seu servidor suporta PHP então você não precisa 
	fazer mais nada. Apenas crie seus arquivos <filename>.php</filename> 
	e coloque-os no seu diretório web e o servidor irá com um passe de 
	mágica mostrar suas páginas PHP. Não há nenhuma necessidade de compilação 
	para qualquer ferramenta extra. Pense nesses arquivos PHP como se eles 
	fossem páginas HTML com algumas tags à mais que deixaram você fazer coisas 
	mais interessantes do que somente páginas HTML estáticas.
   </para>
   <para>
    Digamos que você quer salvar sua preciosa conexão e desenvolver tudo 
	localmente. Neste caso, você precisará instalar um servidor web, 
	como o <link linkend="install.apache">Apache</link>, e claro o  
    <link xlink:href="&url.php.downloads;">PHP</link>.  Você também irá querer 
	instalar uma base de dados, como por exemplo o 
    <link xlink:href="&url.mysql.docs;">MySQL</link>.  Você pode instalá-los 
	separadamente ou pelo jeito mais simples que é  <link
    xlink:href="&url.installkits;">usar os pacotes pré-configurados.</link> 
	que irão instalar automaticamente todas as coisas com apenas alguns 
	cliques. É super fácil configurar um servidor web com suporte ao PHP 
	em qualquer sistema operacional, incluindo Linux e Windows. No Linux, 
	você deve procurar o <link xlink:href="&url.rpmfind;">rpmfind</link> 
	que é muito útil na localização de pacotes RPM.
   </para>
  </sect1>

  <sect1 xml:id="tutorial.firstpage">
   <title>Sua primeira página PHP</title>
   <para>
    Crie um novo arquivo chamado <filename>ola.php</filename> e coloque-o em seu 
	diretório root do seu servidor web (<varname>DOCUMENT_ROOT</varname>) 
    com o seguinte conteúdo:
   </para>
   <para>
    <example>
     <title>Nosso primeiro script PHP: <filename>ola.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP Teste</title>
 </head>
 <body>
 <?php echo "<p>Olá Mundo</p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
	  Use o seu navegador para acessar o arquivo pelo endereço de seu servidor web, 
	  ao final do endereço coloque o arquivo "/ola.php" como referência. Quando o 
	  desenvolvimento é local você usará uma url como esta <literal>http://localhost/ola.php</literal> 
      ou <literal>http://127.0.0.1/ola.php</literal> mas dependendo da configuração 
	  do seu servidor web. Entretanto isto está fora do escopo deste tutorial, 
	  veja também as diretivas <varname>DocumentRoot</varname> e 
      <varname>ServerName</varname> dos arquivos de configuração do seu servidor web. 
	  (no Apache o nome do arquivo é <filename>httpd.conf</filename>).
	  Se tudo foi configurado corretamente, o arquivo irá ser interpretado pelo PHP e
	  irá mostrar a seguinte mensagem de saída no seu navegador:
     </simpara>
     <para>
      <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Teste</title>
 </head>
 <body>
 <p>Olá Mundo</p>
 </body>
</html>
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    Note que isto não é como em um script CGI. O arquivo não precisa ser 
	executável ou especial em nenhum aspecto. Pense nesse arquivo como um 
	arquivo HTML normal mas com a diferença que ele pode conter algumas 
	tags especiais à mais que permitem à você fazer coisas mais interessantes 
	do que somente páginas HTML estáticas.
   </para>
   <para>
    Este exemplo é extremamente simples e você realmente não precisa usar 
	o PHP para criar uma página como esta. Tudo o que ele faz é mostrar 
	uma mensagem <literal>Olá Mundo</literal> usando a declaração <function>echo</function>
	do PHP.
   </para>
   <para>
    Se você tentar rodar este exemplo e ele não mostrar nenhuma mensagem de saída, 
	ou aparecer uma caixa de diálogo pedindo para você salvar o arquivo, ou você 
	ver o arquivo em formato de texto, há uma grande chance do seu servidor não 
	ter o PHP habilitado. Peça ao seu administrar para habilitar o PHP para você 
	usando o capítulo de <link linkend="installation">Instalação</link> do 
	manual. Se você está desenvolvendo localmente, também leia o capítulo indicado 
	acima para ter certeza de que configurou tudo corretamente. Se os 
	problemas continuarem à persistir, não hesite em usar uma das várias formas 
	de <link xlink:href="&url.php.support;">ajuda</link> que o PHP pode lhe oferecer.
   </para>
   <para>
    O objetivo do exemplo é mostrar o formato especial das tags do PHP. 
	Neste exemplo nós usamos <literal>&lt;?php</literal> para indicar que 
	à partir daquele ponto começa um código PHP. Então nós colocamos uma declaração 
	de fechamento para indicar que o script PHP acabou, usando a tag <literal>?&gt;</literal>. 
	Você pode usar o PHP em qualquer parte do seu código HTML, e também pode usar várias 
	tags de abertura e fechamento no mesmo arquivo. Para mais detalhes, leia a seção do 
	manual que fala da sintaxe <link linkend="language.basic-syntax">básica do PHP</link>.
   </para>
   <note>
    <title>Uma Nota sobre os Editores de Texto</title>
    <para>
	 Há muitos editores de textos e Integrated Development Enviroments (IDEs) 
	 que você pode usar para criar, editar e gerenciar arquivos PHP. Uma lista 
	 parcial destas ferramentas pode ser vista na <link xlink:href="&url.phpeditorlist;">Lista de Editores para PHP</link>. Se você gostaria de recomendar algum editor, por favor 
	 visite o endereço acima e pergunte à gerenciador do site para adicionar o seu 
	 editor à lista. Ter um editor que colore as sintaxes das tags  pode ser muito útil.
    </para>
   </note>
   
   <note>
    <title>Uma Nota sobre os Processadores Word</title>
    <para>
	 Processadores Word como o StarOffice Write, Microsoft Word e Abiword não 
	 são boas escolhas para editar arquivos PHP. Se você deseja usar um desses 
	 para testar seus scripts, você precisa verificar se você está salvando os 
	 arquivos como TEXTO PLANO ou o PHP não irá ser capaz de ler e executar 
	 o seu script.
    </para>
   </note>
   
   <note>
    <title>Uma Nota sobre o Bloco de Notas do Windows</title>
    <para>    
	 Se você está escrevendo seus scripts PHP usando o Bloco de Notas do Windows, 
	 você precisará verificar que os arquivos estão sendo salvos com a extensão 
	 .php. (O Bloco de Notas do Windows adiciona automaticamente a extensão .txt 
	 aos arquivos à não ser que você siga um dos passos a seguir para previnir isto). 
	 Quando a caixa de diálogo Salvar estiver aberta e você for digitar o nome do 
	 seu arquivo, coloque o nome do arquivo entre aspas (i.e. "<filename>ola.php</filename>").  
	 Uma alternativa, é você clicar na lista drop-down 'Documentos de Texto' na caixa 
	 de diálogo salvar e alterar para "Todos os tipos de arquivos". Você agora pode digitar 
	 o nome do seu arquivo sem usar as aspas.
    </para>
  </note>
  
  <para>
   Agora que você criou com sucesso um script simples em PHP, é hora de criar 
   o mais famoso dos scripts PHP! Uma chamada à função <function>phpinfo</function> 
   e você verá todas as informações sobre seu sistema e configurações disponíveis 
   como a de <link linkend="language.variables.predefined">Variáveis Pré-definidas</link>, 
   módulos carregados pelo PHP, e as opções de <link linkend="configuration">configuração</link>. 
   Tire algum tempo para ver e rever estas importantes informações.
  </para>
   
  </sect1>

  <sect1 xml:id="tutorial.useful">
   <title>Algo Útil</title>
   <para>
    Vamos fazer alguma coisa um pouco mais útil agora. Nós iremos checar 
	qual é o tipo de navegador que o visitante está utilizando para ver 
	a nossa página. De fato, para fazer isto nós teremos que checar 
	qual é o valor da string agente que o navegador envia como parte de 
	sua requisição HTTP. Esta informação é armazenada em uma <link
    linkend="language.variables">variável</link>. Variáveis sempre 
	começam com um símbolo de cifrão no PHP. A variável que nos interessa 
	no momento é a <varname>$_SERVER["HTTP_USER_AGENT"]</varname>.
   </para>
   <note>
    <title>Nota sobre as Auto-Globais do PHP</title>
    <para>
     <link linkend="reserved.variables.server">$_SERVER</link> é uma variável 
	 especial reservada do PHP que contém todas as informações sobre o servidor web. 
	 Ela é conhecida como uma Auto-Global (ou Superglobal). Veja a página do manual 
	 relacionada as <link linkend="language.variables.superglobals">Auto-globais</link> 
	 para mais informações. Estas variáveis especiais foram introduzidas no PHP 
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link>.  Antes desta versão, nós usávamos 
	 os velhos arrays <varname>$HTTP_*_VARS</varname>, 
	 como o <varname>$HTTP_SERVER_VARS</varname>.  Entretanto, este estilo antingo 
	 foi removido, porém ainda existem. (Veja a nota sobre <link linkend="tutorial.oldcode">códigos antigos</link>.)
    </para>
   </note>
   <para>
    Para chamar esta variável, nós podemos fazer isto:
   </para>
   <para>
    <example>
    <title>Imprimindo a variável (Elemento Array)</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER["HTTP_USER_AGENT"]; ?>
]]>
    </programlisting>
    <para>
	 Um exemplo de saída deste script poderia ser:
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)
     </screen>
    </para>
   </example>
   </para>
   <para>
    Há muitos <link linkend="language.types">tipos</link> de 
	variáveis disponíveis no PHP. No exemplo acima nós escrevemos 
	um elemento <link linkend="language.types.array">Array</link>. 
	Arrays podem ser muito úteis.
   </para>
   <para>
    <varname>$_SERVER</varname> é somente uma variável que é automaticamente 
	disponibilizada para você pelo PHP. Uma lista de Variáveis Reservadas pode 
	ser vista na seção <link linkend="reserved.variables">Variáveis Reservadas</link> 
	do manual ou você pode pegar uma lista completa delas criando um arquivo como 
	este:
   </para>
   <para>
    <example>
     <title>Exibindo todas as variáveis pré-definidas usando a função <function>phpinfo</function></title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Se você carregar este arquivo no seu navegador você irá ver uma página 
	com todas as informações sobre o PHP junto com uma lista de todos os tipos 
	de variáveis disponíveis para você.
   </para>
   <para>
    Você pode colocar mútiplas declarações PHP dentro da tag PHP e 
	criar pequenos blocos de códigos que faem muito mais do que um 
	simples echo. Por exemplo, se você quer checar se o navegador é 
	o Internet Explorer faça algo como isso:
   </para>
   <para>
    <example>
     <title>Exemplo usando <link linkend="control-structures">controles de declarações</link> e <link linkend="language.functions">funções</link></title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
	echo "Você está usando o Internet Explorer<br />";
}
?>
]]>
     </programlisting>
     <para>
	 Um exemplo de Saída seria:
      <screen role="html">
<![CDATA[
Você está usando o Internet Explorer<br />
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    Aqui nós mostraremos alguns novos conceitos. Nós temos a 
	declaração <link linkend="control-structures.if">if</link>. 
	SE você é familiar com a sintaxe básica usada pela linguagem 
	C isto parecerá ser lógico para você. Se você não conhece a 
	linguagem C ou alguma outra linguagem onde a sintaxe usada acima 
	é usada, você provavelmente precisará de um livro introdutório sobre o 
	PHP, dê uma lida nos primeiros capítulos do livro, ou leia a parte 
	sobre a <link linkend="langref">Referência da Linguagem</link> no manual. 
	Você pode encontrar uma lista de livros sobre PHP em 
    at <link xlink:href="&url.php.books;">&url.php.books;</link>.
   </para>
   <para>
    O segundo conceito que iremos abordar é a chamada à função <function>strstr</function>. 
	A função <function>strstr</function> é trazida junto com o PHP, ela faz uma busca 
	em uma palavra por uma outra palavra. Neste caso nós procuramos pela palavra 
	<literal>"MSIE"</literal> dentro de <varname>$_SERVER["HTTP_USER_AGENT"]</varname>. 
	Se a palavra for encontrada, a função returna &true; e se ela não for encontrada 
	a função retorna &false;. Se o retorno for &true;, a declaração 
	<link linkend="control-structures.if">if</link> ocorre e o código dentro dela 
	é executado. Caso contrário, o código não é executado. Sinta-se à vontade para 
	criar exemplos similares com o <link linkend="control-structures.if">if</link>, 
	<link linkend="control-structures.else">else</link>, e outras funções como a 
	<function>strtoupper</function> e 
    <function>strlen</function>.  Cada uma delas está no manual com seus respectivos 
	exemplos.
   </para>
   <para>
    Nós podemos avançar agora e mostrar à você como alternar entre os modos 
	PHP mesmo que você esteja executando blocos de códigos:
   </para>
   <para>
    <example>
     <title>Mesclando entre os modos PHP e HTML</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
?>
<h3>strstr retorna verdadeiro</h3>
<center><b>Você está usando o Internet Explorer</b></center>
<?php
} else {
?>
<h3>strstr retorna falso</h3>
<center><b>Você não está usando o Internet Explorer</b></center>
<?php
}
?>
]]>
     </programlisting>
     <para>
	  Um exemplo de saída deste script poderia ser:
      <screen role="html">
<![CDATA[
<h3>strstr retorna verdadeiro</h3>
<center><b>Você está usando o Internet Explorer</b></center>
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    Ao invés de usar a declaração echo do PHP para imprimir a saída dos dados, nós saímos do 
	modo do PHP e usamos o HTML normal. O importante à notar aqui é que a lógica do script 
	continua intacta. Somente alguns blocos HTML será enviados de acordo com o que a declaração 
    <function>strstr</function> retornar, ou seja &true; ou &false;. Em outras palavras, 
	se a palavra <literal>MSIE</literal> for encontrada ou não.
   </para>
  </sect1>
   
  <sect1 xml:id="tutorial.forms">
   <title>Tratando Formulários</title>
   <para>
    Uma das características mais fortes do PHP é o jeito como ele trata 
	formulários HTML. O conceito básico que é importante entender é que qualquer 
	elemento de formulário em um formulário irá automaticamente ficar disponível 
	para você usá-los em seus scripts PHP. Por favor leia a seção 
    <link linkend="language.variables.external">Variáveis externas do PHP</link> 
	para mais informaçõess exemplos de como usar formulários com PHP. Aqui vai um 
	exemplo:
   </para>
   <para>
    <example>
     <title>Um simples formulário HTML</title>
     <programlisting role="html">
<![CDATA[
<form action="acao.php" method="POST">
 Seu nome <input type="text" name="nome" />
 Sua idade: <input type="text" name="idade" />
 <input type="submit">
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Não há nada de especial neste formulário. É um formulário HTML comum 
	sem nenhuma tag especial de qualquer tipo. Quando o usuário preencer este 
	formulário e clicar no botão enviar, a página <filename>action.php</filename> 
	é chamada. Neste arquivo nós teremos algo como este:
   </para>
   <para>
    <example>
     <title>Imprimindo dados de nosso formulário</title>
     <programlisting role="php">
<![CDATA[
Oi <?php echo $_POST["nome"]; ?>.
Você tem <?php echo $_POST["idade"]; ?> anos.
]]>
     </programlisting>
     <para>
	  Um exemplo de saída deste script seria:
      <screen role="html">
<![CDATA[
Oi Thomas.
Você tem 18 anos.
]]>
      </screen>
     </para>
    </example>
   </para>
   <para>
    É óbvio o que este script faz. Não há nada de mais nele. 
	As variáveis <varname>$_POST["nome"]</varname> e <varname>$_POST["idade"]</varname> 
	são automaticamente criadas para você pelo PHP. Antigamente nós usávamos 
	a auto-global <varname>$_SERVER</varname>, agora nós simplesmente usamos a auto-global 
	<link linkend="reserved.variables.post">$_POST</link> que contém todos os dados vindos do 
	POST. Se você usar o método <emphasis>GET</emphasis> então nossas informações residirão 
	na auto-global <link linkend="reserved.variables.get">$_GET</link>. Você também pode usar 
	a auto-global <link linkend="reserved.variables.request">$_REQUEST</link> 
	se você não se importa com o tipo de dados que vêm do seu formulário. 
	Esta auto-global contém uma mescla de GET, POST, COOKIE e FILE. Veja também 
	a função <function>import_request_variables</function>.
   </para>
  </sect1>
  
  <sect1 xml:id="tutorial.oldcode">
   <title>Usando códigos antigos com a nova versão do PHP</title>
   <para>
    Agora que o PHP cresceu e é uma linguagem de script popular, há muitos 
	recursos por ai que fazem uma listagem de códigos que você pode reusar em 
	seus próprios scripts. Para a maioria dos desenvolvedores da linguagem PHP 
	tentaram manter a compatibilidade, para que um script escrito em uma versão 
	antiga do PHP, pude-se (deveria) rodar sem nenhuma alteração em uma versão 
	mais nova do PHP, em prática algumas alterações serão geralmente necessárias.
   </para>
   <para>
    Duas das coisas mais importantes recentemente alteradas que afetam um código antigo é:
    <itemizedlist>
     <listitem>
      <simpara>
	   O velho método que não está mais em uso que é o de usar arrays <varname>$HTTP_*_VARS</varname> 
	   (que precisam ser indicados como sendo globais quando usados dentro de uma função 
	   ou método). A seguir nós abordaremos os 
       <link linkend="language.variables.superglobals">arrays auto-globais</link> 
	   no PHP <link xlink:href="&url.php.release4.1.0;">4.1.0</link>. 
       Eles são: <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_ENV</varname>, <varname>$_REQUEST</varname>, e 
       <varname>$_SESSION</varname>.  Os antigos arrays <varname>$HTTP_*_VARS</varname>, 
	   como os $HTTP_POST_VARS, ainda existem até a versão do PHP 3.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
	   Variáveis externas não são mais registrdas no escopo global por padrão. 
	   Em outras palavras, com o PHP <link xlink:href="&url.php.release4.2.0;">4.2.0</link> 
	   a diretiva <link linkend="ini.register-globals">register_globals</link> está  
       <emphasis>desligada</emphasis> por padrão no arquivo &php.ini;. O método utilizado 
	   atualmente é o de acessar estes valores via arrays auto-globais como mencionado acima. 
	   Scripts antigos, livros, e tutoriais podem estar utilizando a diretiva ligada. Se ela 
	   estiver ligada, por exemplo, você poderá utilizar a variável <varname>$id</varname> 
	   da URL <literal>http://www.exemplo.com/pagina.php?id=42</literal>.  Se a diretiva estiver 
	   desligada, você usará <varname>$_GET['id']</varname>.
      </simpara>
     </listitem>
    </itemizedlist>
	Para mais detalhes destas alterações, veja a seção 
    <link linkend="language.variables.predefined">variáveis pré-definidas</link>.
   </para>
  </sect1>
  
  <sect1 xml:id="tutorial.whatsnext">
   <title>O que mais?</title>
   <para>
    Com o que você sabe agora você deverá estar apto à entender a maioria 
	do manual e também os vários exemplos de scripts disponíveis no arquivo 
	de exemplos. Você também pode encontrar outros exemplos nos sites do 
	php.net e nos links da seção:
    <link xlink:href="&url.php.links;">&url.php.links;</link>.
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

