<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 288721 Maintainer: narigone Status: ready -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.general" xmlns="http://docbook.org/ns/docbook">
   <title>Considerações Gerais</title>
   <simpara>
    Um sistema completamente seguro é virtualmente impossível de se conseguir,
    então uma abordagem freqüentemente usada em segurança é um compromisso entre
    risco e usabilidade. Se cada variável enviada pelo usuário precias
    de duas formas de validação biométrica (como escaneamento de retina e
    impressão digital), você teria um nível de checagem extremamente alto.
    Demoraria meia hora para preencher um formulário mais ou menos
    complexo, o que incentivaria os usuários a achar maneiras de
    burlar a segurana.
   </simpara>
   <simpara>
    A melhor segurança é frequentemente aquele preenche os requerimentos
    sem obstruir o usuário de fazer o seu trabalho,
    ou sobrecarregando o programador com complexidade
    excessiva. De fato, alguns ataques de segurança exploram
    esse tipo de segurança super-produzida, que tende a degradar com o tempo.
   </simpara>
   <simpara>
    Uma frase que vale a pena lembrar: Um sistema é tão bom quanto o elo
    mais fraco na corrente. Se todas as transações são maciçamente registradas baseado
    no tempo, localização, tipo de transação, etc. mas o usuário só
    é verificado baseado em um único cookie, a validade de ligar os usuários
    ao registro de transação torna-se muito fraca.
   </simpara>
   <simpara>
    Quando estiver testando, tenha em mente que você não será capaz de testar
    todas as possibilidades nem mesmo para as páginas mais simples. A entrada
    que você pode esperar será totalmente diferente da entrada dada por
    um empregado irritado, um cracker com meses livres para tentar
    quebrar o sistema, ou um gato andando pelo teclado. Por isso é melhor
    olhar ao código da perspectiva lógica, para discernir
    onde dados inesperados podem ser introduzidos, e depois seguir aonde
    o mesmo é modificado, reduzido ou amplificado.
   </simpara>
   <simpara>
    A Internet está cheia de gente tentando fazer o próprio nome
    quebrando o código dos outros, derrubando sites, enviando
    conteúdo indevido e de outras formas fazendo seu dia interessante.
    Não importa se você tem um site grande ou pequeno, você é
    um alvo simplesmente por estar online, tendo um servidor que pode
    ser conectado. Muitos programas de cracking não discernem por tamanho, eles
    simplesmente vasculham blocos gigantes de IPs procurando por vítimas. Tente
    não se tornar um.
   </simpara>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
