<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.7 Maintainer: narigone Status: ready -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.globals" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Usando a diretiva Register Globals</title>
   <para>
    Talvez a mudança mais controversa no PHP foi quando o valor padrão da
    diretiva do PHP <link linkend="ini.register-globals">
    register_globals</link> passou de ON (Ligado) para OFF (Desligado) na versão
    <link xlink:href="&url.php.release4.2.0;">4.2.0</link>. Era muito comum as
    pessoas dependerem da diretiva e muitas delas nem sabiam que ela existia
    e presumiam que era a maneira como o PHP funcionava. Essa página explica como
    alguém pode escrever código inseguro com essa diretiva, mas tenha em mente que
    a diretiva em si não é insegura, o uso incorreto dela é que é.
   </para>
   <para>
    Quando ligada, a diretiva register_globals criará para seus scripts vários
    tipos de variáveis, como as variáveis oriundas de formulários HTML. Isso,
    combinado com o fato de que o PHP não requer inicialização de variáveis,
    significa que é mais fácil escrever código inseguro. Foi uma decisão
    difícil, mas a comunidade do PHP decidiu que, por padrão, essa diretiva
    deveria ser desabilitada. Quando habilitada, é possível usar variáveis sem saber ao
    certo de onde elas vieram. Variáveis internas que são definidas no script em si
    se misturam com dados enviados pelos usuários e
    desabilitando a diretiva muda isso. Vamos demonstrar
    um exemplo de uso incorreto de register_globals:
   </para>
   <para>
    <example>
        <title>Exemplo de uso incorreto de register_globals = on</title>
     <programlisting role="php">
<![CDATA[
<?php
// define $authorized = true somente se o usuário for autenticado
if (authenticated_user()) {
    $authorized = true;
}
// Porque nós não inicializamos $authorized como false, ela pode ser
// definida através de register_globals, como usando GET auth.php?authorized=1
// Dessa maneira, qualquer um pode ser visto como autenticado!
if ($authorized) {
    include "/highly/sensitive/data.php";
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Quando register_globals estiver habilitada, sua lógica pode ser comprometida. Quando
    desligada <varname>$authorized</varname> não pode ser configurada via GET, então
    estará correto, embora geralmente seja uma boa prática de programação
    inicializar as variáveis primeiro. Por exemplo, no nosso exemplo acima nós podemos
    executar primeiro <literal>$authorized = false</literal>. Dessa forma
    o código funcionaria com register_globals ligada ou desligada, já que
    os usuário não seriam autorizados a não ser que a autenticação tenha sucesso.
   </para>
   <para>
    Outro exemplo é o quando usando <link linkend="ref.session">sessions</link>.
    Quando a diretiva está ligada, nós também podemos usar
    <varname>$username</varname> no exemplo mas novamente é preciso
    perceber que <varname>$username</varname> também pode vir de outro lugar,
    como via GET (através da URL).
   </para>
   <para>
    <example>
     <title>Exemplo de uso de sessões com register_globals ligada ou desligada</title>
     <programlisting role="php">
<![CDATA[
<?php
// Nós não saberiamos de onde $username veio mas sabemos que $_SESSION
// guarda dados da sessão.
if (isset($_SESSION['username'])) {

    echo "Hello <b>{$_SESSION['username']}</b>";

} else {

    echo "Hello <b>Guest</b><br />";
    echo "Would you like to login?";

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Além disso tudo, é possível tomar medidas preventivas para avisar quando alguém
    está tentando criação de variáveis falsas. Se você sabe de antemão de onde uma
    variável deve vir, você pode verificar se os dados enviados estão
    chegando de maneira incorreta. Embora isso não seja garantia
    de que os dados não são forjados, torna necessário ao atacante
    adivinhar o tipo certo de falsificação. Se você não se importar de onde os
    dados vierão, você pode usar o array <varname>$_REQUEST</varname>, que
    contêm a mistura dos dados de GET, POST e COOKIE. Veja também a seção do manual
    sobre como usar <link linkend="language.variables.external">variáveis de fora
    do PHP</link>.
   </para>
   <para>
    <example>
     <title>Detecção simples de falsificação de variáveis</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['MAGIC_COOKIE'])) {

    // MAGIC_COOKIE vem de um cookie.
    // Valide os dados do cookie!

} elseif (isset($_GET['MAGIC_COOKIE']) || isset($_POST['MAGIC_COOKIE'])) {

   mail("admin@example.com", "Possível tentativa de ataque", $_SERVER['REMOTE_ADDR']);
   echo "Violação de Segurança, o Administrador foi alertado.";
   exit;

} else {

   // MAGIC_COOKIE não foi criada por essa REQUEST

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    É óbvio que só desligar register_globals não significa que seu código
    está seguro. Cada dado que é enviado deve ser validado de
    outras maneiras. Sempre valide os dados enviados pelos usuário e inicialize
    suas variáveis! Para checar por variáveis não inicializadas, você pode configurar
    <function>error_reporting</function> para mostrar erros do nível
    <constant>E_NOTICE</constant>.
   </para>
   <para>
    Para mais informações sobre emulação de register_globals como ligada ou desligada, veja esse <link linkend="faq.misc.registerglobals">FAQ</link>.
   </para>

   &note.superglobals;

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
