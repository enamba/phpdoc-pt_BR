<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: narigone Status: ready -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.filesystem" xmlns="http://docbook.org/ns/docbook">
   <title>Segurança do Sistema de Arquivos</title>
   <simpara>
    O PHP está sujeito à segurança encontrada na maioria dos sistemas de servidor
    com respeito à permissões de arquivos e diretórios. Isso permite que
    você controle quais arquivos no sistema podem ser lidos e por quem. É preciso
    ter cuidado com quaisquer arquivos que são lidos por todos para assegurar
    que eles podem ser lidos por todos os usuários que tem acesso ao
    sistema de arquivos.
   </simpara>
   <simpara>
    Já que o PHP foi desenhado para permitir acesso em nível de usuário ao sistema
    de aruqivos, é possível escrever um script PHP que permitirá
    ler arquivos do sistema com /etc/passwd, modificar suas conexões
    de ethernet, enviar trabalhos de impressão gigantes, etc. Isso tem
    algumas implicações óbvias, já que você precisa ter certeza que os arquivos
    que você lê e escreve são apropriados.
   </simpara>
   <simpara>
    Considere o seguinte script, onde um usuário indica que ele quer
    apagar um arquivo no seu diretório home. Isso presume uma situação
    onde uma interface web PHP é usada regularmente para controle
    de arquivos, então o usuário do Apache tem permissão de apagar arquivos
    nos diretórios home dos usuários.
   </simpara>
   <para>
    <example>
     <title>Checagem fraca de variáveis resulta em....</title>
     <programlisting role="php">
<![CDATA[
<?php
// remove a file from the user's home directory
$username = $_POST['user_submitted_name'];
$userfile = $_POST['user_submitted_filename'];
$homedir  = "/home/$username";

unlink("$homedir/$userfile");

echo "The file has been deleted!";
?>
]]>
     </programlisting>
    </example>
   Já que o nome do usuário e do arquivo são enviáveis pelo formulário,
   um usuário pode enviar um nome de usuário e de arquivo que pertença a outra pessoa,
   e apagá-lo, mesmo que eles não tenham permissão para fazê-lo.
   Nesse caso, você desejaria ter alguma outra forma de autenticação.
   Considere o que poderia acontecer se as variáveis enviadas forem
   "../etc/" and "passwd". O código então leria efetivamente:
    <example>
     <title>... um ataque ao sistema de arquivos</title>
     <programlisting role="php">
<![CDATA[
<?php
// remove um arquivo de qualquer lugar no disco rígido
// que o usuário do PHP tenha acesso. Se o PHP tiver acesso de administrador (root):
$username = $_POST['user_submitted_name']; // "../etc"
$userfile = $_POST['user_submitted_filename']; // "passwd"
$homedir  = "/home/$username"; // "/home/../etc"

unlink("$homedir/$userfile"); // "/home/../etc/passwd"

echo "The file has been deleted!";
?>
]]>
     </programlisting>
    </example>
    Existem duas medidas importantes que você deve tomar para previnir
    esses problemas.
    <itemizedlist>
     <listitem>
      <simpara>
       Só dar permissões limitadas ao usuário executando o binário do PHP.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Checar todas as variáveis que são enviadas.
      </simpara>
     </listitem>
    </itemizedlist>
    Aqui temos um script melhorado:
    <example>
     <title>Checagem mais segura do nome do arquivo</title>
     <programlisting role="php">
<![CDATA[
<?php
// remove um arquivo do disco rígido que o
// usuário do PHP tenha acesso.
$username = $_SERVER['REMOTE_USER']; // usando um mecanismo de autenticação
$userfile = basename($_POST['user_submitted_filename']);
$homedir  = "/home/$username";

$filepath = "$homedir/$userfile";

if (file_exists($filepath) && unlink($filepath)) {
    $logstring = "Deleted $filepath\n";
} else {
    $logstring = "Failed to delete $filepath\n";
}
$fp = fopen("/home/logging/filedelete.log", "a");
fwrite($fp, $lo gstring);
fclose($fp);

echo htmlentities($logstring, ENT_QUOTES);

?>
]]>
     </programlisting>
    </example>
    No entanto, ele ainda possui falhas. Se seu sistema de autenticação
    permitir que os usuários criem seu próprios logins, e um usuário
    escolher o login "../etc/", o sistema está novamente exposto. Por
    essa razão, você pode preferir escrever uma checagem mais específica:
    <example>
     <title>Checagem mais segura do nome do arquivo</title>
     <programlisting role="php">
<![CDATA[
<?php
$username     = $_SERVER['REMOTE_USER']; // usando um mecanismo de autenticação
$userfile     = $_POST['user_submitted_filename'];
$homedir      = "/home/$username";

$filepath     = "$homedir/$userfile";

if (!ctype_alnum($username) || !preg_match('/^(?:[a-z0-9_-]|\.(?!\.))+$/iD', $userfile)) {
    die("Bad username/filename");
}

//etc...
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Dependendo do seu sistema operacional, existe uma variedade enorme de arquivos
    que você tem que se preocupar, incluindo dispositivos  (/dev/
    or COM1), arquivos de configuração (arquivos /etc/ e .ini),
    áres de armazenamento conhecidas (/home/, My Documents), etc. Por essa
    razão, normalmente é mais fácil criar uma política onde você proibe
    tudo exceto aquilo que for explicitamente permitido.
   </para>
   <sect1 xml:id="security.filesystem.nullbytes">
    <title>Problemas relacionados a bytes nulos (Null)</title>
    <simpara>
     Como o PHP usa funções em C para operações relacionadas ao
     sistema de arquivos, ele pode lidar com bytes nulos de maneira inexperada.
     Como bytes nules denotam fim de string em C, strings contendo eles
     não serão consideradas por inteiro, mas apenas até que um byte nulo ocorra.

     O seguinte exemplo mostra um código vulnerável que demonstra esse problema:
    </simpara>
    <example>
     <title>Script vulnerável à bytes nulos</title>
     <programlisting role="php">
<![CDATA[
<?php
$file = $_GET['file']; // "../../etc/passwd\0"
if (file_exists('/home/wwwrun/'.$file.'.php')) {
    // file_exists will return true as the file /home/wwwrun/../../etc/passwd exists
    include '/home/wwwrun/'.$file.'.php';
    // the file /etc/passwd will be included
}
?>
]]>
     </programlisting>
    </example>
    <para>
     Portanto, qualquer string comprometida que é usada em uma operação de sistema de arquivos deve
     sempre ser validada corretamente. Aqui está uma versão melhorada do exemplo anterior:
    </para>
    <example>
     <title>Validando entrada corretamente</title>
     <programlisting role="php">
<![CDATA[
<?php
$file = $_GET['file']; 

// Whitelisting possible values
switch ($file) {
    case 'main':
    case 'foo':
    case 'bar':
        include '/home/wwwrun/include/'.$file.'.php';
        break;
    default:
        include '/home/wwwrun/include/main.php';
}
?>
]]>
     </programlisting>
    </example>
   </sect1>

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
