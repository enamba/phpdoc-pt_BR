<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 283798 Maintainer: ae Status: ready -->
<chapter xml:id="language.functions" xmlns="http://docbook.org/ns/docbook">
  <title>Funções</title>

  <sect1 xml:id="functions.user-defined">
   <title>Funções definidas pelo usuário</title>

   <para>
    Uma função pode ser definida usando a seguinte sintaxe:
   </para>
   <para>
    <example>
     <title>Pseudo-código de demonstração de uma função</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo ($arg_1, $arg_2, /* ..., */ $arg_n)
{
    echo "Exemplo de função.\n";
    return $valor_retornado;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    Qualquer código PHP válido pode aparecer dentro de uma função, mesmo outras funções
    e definições de <link linkend="keyword.class">classes</link>.

   </simpara>
   <para>
    Nomes de funções seguem as mesmas regras que outros rótulo no PHP. Um
    nome de função válido começa com uma letra ou um sublinhado, seguido,
    seguido por qualquer número de letras, números ou sublinhado. Com uma expressão
    regular, seria expressado com:
    <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>.
   </para>
    &tip.userlandnaming;
   <simpara>
    As funções não precisam ser criadas antes de serem referenciadas,
    <emphasis>exceto</emphasis> quando uma função é condicionalmente definida
    como mostrado nos dois exemplos abaixo.
   </simpara>
   <para>
    Quando uma função é definida condicionalmente como nos dois
    exemplos abaixo, sua definição precisa ser processada <emphasis>antes</emphasis>
    de ser chamada.
   </para>
   <para>
    <example>
     <title>Funções definidas condicionalmente</title>
     <programlisting role="php">
<![CDATA[
<?php

$makefoo = true;

/* Nos nao podemos chamar foo() daqui
   porque ela ainda não existe,
   mas nos podemos chamar bar() */

bar();

if ($makefoo) {
  function foo ()
  {
    echo "Eu não existo até que o programa passe por aqui.\n";
  }
}

/* Agora nos podemos chamar foo()
   porque $makefoo foi avaliado como true */

if ($makefoo) foo();

function bar()
{
  echo "Eu existo imediatamente desde o programa começar.\n";
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Funções dentro de funções</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo()
{
  function bar()
  {
    echo "Eu não existo até foo() ser chamada.\n";
  }
}

/* Nós não podemos chamar bar() ainda
   porque ela ainda não foi definida. */

foo();

/* Agora nós podemos chamar bar(),
   porque o processamento de foo()
   tornou a primeira acessivel */

bar();

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Todas as funções e classes no PHP tem escopo global - elas podem
    ser chamadas fora de uma função mesmo que tenham sido definidas dentro e vice-versa.
   </para>
   <simpara>
    O PHP não suporta sobrecarga de funções, e também não é possível cancelar ou
    alterar a definição de funções previamente declaradas.
   </simpara>
   <note>
    <simpara>
     Nomes de funções são insensíveis ao caso, mas é melhor chamar
     as funções da mesma forma que ela aparecem nas declarações.
    </simpara>
   </note>
   <simpara>
    Ambos <link linkend="functions.variable-arg-list">número variável de argumentos
    </link> e <link linkend="functions.arguments.default">argumentos
    padrões</link> são suportados em funções. veja também as referencias
    das funções
    <function>func_num_args</function>,
    <function>func_get_arg</function> e
    <function>func_get_args</function> para mais informações.
   </simpara>

   <para>
    É possível chamar funções recursivas no PHP. Entretanto evite o
    uso de funções/métodos recursivos com mais de 100-200 níveis de recursão já que isso
    pode estourar a pilha e causar o encerramento do script atual.
    <example>
     <title>Funções Recursivas</title>
     <programlisting role="php">
<![CDATA[
<?php
function recursion($a)
{
    if ($a < 20) {
        echo "$a\n";
        recursion($a + 1);
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
</sect1>

  <sect1 xml:id="functions.arguments">
   <title>Argumentos de funções</title>

   <simpara>
    Informações podem ser passadas para funções através da lista de argumentos, que é uma
    lista de expressões delimitados por vírgulas.
   </simpara>
   <para>
    O PHP suporta a passagem de argumentos por valor (the default), <link
    linkend="functions.arguments.by-reference">passagem por
    referência</link>, e <link
    linkend="functions.arguments.default">valores padrões de
    argumentos</link>. <link linkend="functions.variable-arg-list">lista de argumentos de
    tamanho variável</link> também são suportadas, veja também a referência das funções
    <function>func_num_args</function>,
    <function>func_get_arg</function>, e
    <function>func_get_args</function> para maiores informações.
   </para>
   <para>
    <example>
     <title>Passando arrays para funções</title>
     <programlisting role="php">
<![CDATA[
<?php
function takes_array($input)
{
    echo "$input[0] + $input[1] = ", $input[0]+$input[1];
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <sect2 xml:id="functions.arguments.by-reference">
    <title>Fazendo argumentos serem passados por referência</title>

    <simpara>
     Por padrão, argumentos de função são passados por valor (de forma que se
     você mudar o valor do parâmetro dentro da função, ele não é alterado fora
     da função). Para permitir que uma função modifique os
     seus argumentos, eles devem ser passados por referência.
    </simpara>
    <para>
     Para ter um argumento para uma função sempre passado por referência, adicione
     antes dele um "e comercial" (&amp;) ao nome do argumento na definição da função:
    </para>
    <para>
     <example>
      <title>Passando parâmetros de função por referência</title>
      <programlisting role="php">
<![CDATA[
<?php
function add_some_extra(&$string)
{
    $string .= ' e alguma coisa mais.';
}
$str = 'Isto é uma string,';
add_some_extra($str);
echo $str;    // imprime 'Isto é uma string, e alguma coisa mais.'
?>
]]>
      </programlisting>
     </example>
    </para>

   </sect2>

   <sect2 xml:id="functions.arguments.default">
    <title>Valores padrão de argumentos</title>

    <para>
     Uma função pode definir valores padrão no estilo C++ para argumentos escalares, como
     a seguir:
    </para>
    <para>
     <example>
      <title>Utilizando parâmetros padrão em funções</title>
      <programlisting role="php">
<![CDATA[
<?php
function cafeteira ($tipo = "cappuccino")
{
    return "Fazendo uma xícara de café $tipo.\n";
}
echo cafeteira ();
echo makecoffee(null);
echo cafeteira ("expresso");
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     A saída do código acima será:
    </para>
    <para>
     <screen>
Fazendo uma xícara de café cappucino.
Fazendo uma xícara de .
Fazendo uma xícara de café expresso.
     </screen>
    </para>

    <para>
     O PHP também permite o uso def <type>array</type>s e do tipo especial &null;
     como valores padrões, por exemplo:
    </para>
    <para>
     <example>
      <title>Usando tipos não escalares como valores padrões</title>
      <programlisting role="php">
<![CDATA[
<?php
function makecoffee($types = array("cappuccino"), $coffeeMaker = NULL)
{
    $device = is_null($coffeeMaker) ? "hands" : $coffeeMaker;
    return "Making a cup of ".join(", ", $types)." with $device.\n";
}
echo makecoffee();
echo makecoffee(array("cappuccino", "lavazza"), "teapot");
?>
]]>
        </programlisting>
       </example>

     </para>
    <simpara>
     O valor padrão precisa ser uma expressão constante, não (por
     exemplo) uma variável, um membro de classe ou uma chamada de função.
    </simpara>
    <para>
     Note que usando argumentos padrão, qualquer padrão deve vir após
     os argumentos sem padrão: caso contrário, as coisas não funcionarão
     como esperado. Considere o seguinte trecho de código:
    </para>
    <para>
     <example>
      <title>Uso incorreto de parâmetros padrão de função</title>
      <programlisting role="php">
<![CDATA[
<?php
function iogurtera ($tipo = "azeda", $sabor)
{
    return "Fazendo uma taça de $sabor $tipo.\n";
}

echo iogurtera ("framboesa");   // não funciona como esperado
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     A saída do exemplo acima é:
    </para>
    <para>
     <screen>
Warning: Missing argument 2 in call to iogurtera() in
/usr/local/etc/httpd/htdocs/php3test/functest.html on line 41
Fazendo uma taça de framboesa.
     </screen>
    </para>
    <para>
     Agora, compare o que está acima com este:
    </para>
    <para>
     <example>
      <title>Uso correto de parâmetros padrão de função</title>
      <programlisting role="php">
<![CDATA[
<?php
function iogurtera ($sabor, $tipo = "azeda")
{
    return "Fazendo uma taça de $sabor $tipo.\n";
}

echo iogurtera ("framboesa");   // funciona
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     A saída deste exemplo é:
    </para>
    <para>
     <screen>
Fazendo uma taça de framboesa azeda.
     </screen>
    </para>

     <note>
      <simpara>
       A partir do PHP 5, os valores padrões são passados por referência.
      </simpara>
     </note>
   </sect2>

   <sect2 xml:id="functions.variable-arg-list">
    <title>Número variável de argumentos</title>

    <simpara>
     O PHP4 e posteriores tem suporte para um número variável de argumentos
     nas funções definidas pelo usuário. Isto é realmente bem fácil, usando
     as funções <function>func_num_args</function>,
     <function>func_get_arg</function> e
     <function>func_get_args</function>.
    </simpara>

    <simpara>
     Nenhuma sintaxe especial é requerida, e a lista de argumentos ainda
     pode ser fornecida explicitamente com as definições de funções e se
     comportarão normalmente.
    </simpara>

   </sect2>

  </sect1>

  <sect1 xml:id="functions.returning-values">
   <title>Retornando valores</title>

   <para>
    Valores podem ser retornados utilizando a instrução opcional return. Qualquer
    tipo pode ser retornado, incluindo arrays e objetos. Isto faz com que
    as função termine sua execução imediatamente e passa o controle de volta para
    a linha de onde ela foi chamada. Veja a documentação da função <function>return</function>
    para maiores informações.
   </para>
   <para>
    <example>
     <title>O uso de <function>return</function></title>
     <programlisting role="php">
<![CDATA[
<?php
function quadrado ($num)
{
    return $num * $num;
}
echo quadrado (4);   // imprime '16'.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Você não pode retornar múltiplos valores a partir de uma função, mas
    resultados similares podem ser obtidos retornando um array.
   </para>
   <para>
    <example>
     <title>Retornando um array para devolver vários valores</title>
     <programlisting role="php">
<![CDATA[
<?php
function numeros_pequenos()
{
    return array (0, 1, 2);
}
list ($zero, $um, $dois) = numeros_pequenos();
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Para retornar uma referência de uma função, use o operador de referência &amp; 
    em ambas a declaração da função e quando definindo o valor para a variável.
   </para>
   <para>
    <example>
     <title>Retornando uma referência de uma função</title>
     <programlisting role="php">
<![CDATA[
<?php
function &retorna_referencia()
{
    return $alguma_referencia;
}

$nova_referencia =& retorna_referencia();
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Para mais detalhes sobre referências, leia a seção <link
    linkend="language.references">Referências</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="functions.variable-functions">
   <title>Funções variáveis</title>

   <para>
    O PHP suporta o conceito de funções variáveis. Isto significa que se
    um nome de variável tem parênteses no final dela, o PHP procurará
    uma função com o mesmo nome, qualquer que seja a avaliação da variável,
    e tentará executá-la. Entre outras coisas, isto pode
    ser usado para implementar callbacks, tabelas de função e assim por diante.
   </para>
   <para>
    Funções variáveis não funcionam com construtores de linguagem como
    <function>echo</function>, <function>print</function>,
    <function>unset</function>, <function>isset</function>,
    <function>empty</function>, <function>include</function>,
    <function>require</function> e outras assim. Utilize uma função de wrapper
    para usar quaisquer um destes construtores como uma função variável.
   </para>
   <para>
    <example>
     <title>Exemplo de funções variáveis</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo() {
    echo "Chamou foo()<br>\n";
}

function bar($arg = '')
{
    echo "Chamou bar(); com argumento '$arg'.<br />\n";
}

// Essa eh uma funcao wrapper para echo()
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // Chama foo()

$func = 'bar';
$func('test');  // Chama bar()

$func = 'echoit';
$func('test');  // Chama echoit()
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Um metodo de um objeto também pode ser chamado com a sintaxe de funções variáveis.
    <example>
     <title>Exemplo de chama de método variável</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    function MetodoVariavel()
    {
        $name = 'Bar';
        $this->$name(); // Isto chama o método Bar()
    }

    function Bar()
    {
        echo "Bar foi chamada!";
    }
}

$foo = new Foo();
$funcname = "MetodoVariavel";
$foo->$funcname();  // Isto chama $foo->MetodoVariavel()

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Veja também <function>call_user_func</function>,
    <link linkend="language.variables.variable">
    variáveis variáveis</link> e <function>function_exists</function>.
   </para>
  </sect1>

  <sect1 xml:id="functions.internal">
   <title>Funções internas (built-in)</title>

   <para>
    O PHP vem por padrão com muitas funções e contrutores. Também existem
    funções que necessitam que uma extenção especifica esteja compilada, se não
    erros fatais "undefined function" (função não definida) irão aparecer. Por exemplo, para usar
    as funções <link linkend="ref.image">image</link> como 
    <function>imagecreatetruecolor</function>, o PHP deve ser compilado com suporte
    <productname>GD</productname>. Ou, para usar
    <function>mysql_connect</function>, PHP deve ser compilado com suporte
    <link linkend="ref.mysql">MySQL</link>. Existem muitas funções do núcleo
    que são incluídas em cada versão do PHP, como
    <link linkend="ref.strings">string</link> e 
    <link linkend="ref.var">variable</link>. Uma chamada a 
    <function>phpinfo</function> ou
    <function>get_loaded_extensions</function> irá mostras quais extenções estão
    carregadas no PHP. Note também que várias extenções são ativadas por padrão e que
    o manual do PHP é dividido por extenção. Veja
    <link linkend="configuration">configução</link>,
    <link linkend="install">instalação</link>, e os capitulos
    individuais das extenções para como configurar o PHP.
   </para>
   <para>
    A leitura e entendimento de um protótipo de função é explicado na
    seção do manual entitulada
    <link linkend="about.prototypes">como ler uma definição de função</link>.
    É importante perceber o que a função retorna ou se a função trabalha
    diretamente no valor passado como argumento. Por exemplo,
    <function>str_replace</function> irá retornar a string modificada enquanto
    <function>usort</function> trabalha na própria variável passada no
    argumento. Cada página do manual também contém informações específicas de cada
    função, como: parâmetros da função, mudanças de comportamento,
    valores de retorno tanto para sucesso e erros, como outras informações disponíveis.
    O conhecimento destas diferenças importantes é crucial para
    escrever corretamente seu código PHP.
   </para>
   <note>
    <simpara>
     Se os parâmetros dados a uma função não forem o que ela espera, como
     passar um <type>array</type> aonde um <type>string</type> é esperado,
     o valor de retorno da função é indefinido. Neste caso provavelmente
     irá retornar &null; mas isto é apenas uma convenção, e
     você não pode depender disso.
    </simpara>
   </note>
   <para>
    Veja também <function>function_exists</function>,
    <link linkend="funcref">a referência de funções</link>,
    <function>get_extension_funcs</function> e
    <function>dl</function>.
   </para>
  </sect1>
  
  <sect1 xml:id="functions.anonymous">
   <title>Funções anonimas</title>

   <simpara>
    funções anonimas, também conhecidas como <literal>closures</literal>, permitem a criação
    de funções que não tem o nome especificado. Elas são mais úteis
    como o valor de parâmetros <link linkend="language.types.callback">callback</link>,
    mas podem tem vários outros usos.
   </simpara>

   <example>
    <title>Exemplo de Função Anonima</title>
    <programlisting role="php">
<![CDATA[
<?php
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');
// outputs helloWorld
?>
]]>
    </programlisting>
   </example>

   <simpara>
    Closures também podem ser usadas como valores de variáveis; PHP automaticamente
    converte expessões assim em instancias da classe interna
    <classname>Closure</classname>. Definindo um closure 
    a uma variável usa a mesma sintaxe que qualquer outra definição, incluindo
    o ponto-e-vírgula:
   </simpara>

   <example>
    <title>Exemplo de como definir uma função anonima para uma variável</title>
    <programlisting role="php">
<![CDATA[
<?php
$greet = function($name)
{
    printf("Hello %s\r\n", $name);
};

$greet('World');
$greet('PHP');
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Closures também podem herdar variáveis do escopo pai. Quaisquer variável assim
    deve ser declarada no cabeçalho da função. Herdar variáveis do escopo pai
    <emphasis>não</emphasis> é o mesmo que usar variáveis globais.
    Variáveis globais existem no escopo global, o qual é o mesmo não
    importa a função sendo executada. O escopo pai de um closure é a função
    no qual o closure foi declarado (não necessáriamente a função apartir do
    qual ele foi chamado). Veja o exemplo a seguir:
   </simpara>

   <example>
    <title>Closures e escopo</title>
    <programlisting role="php">
<![CDATA[
<?php
// A basic shopping cart which contains a list of added products
// and the quantity of each product. Includes a method which
// calculates the total price of the items in the cart using a
// closure as a callback.
class Cart
{
    const PRICE_BUTTER  = 1.00;
    const PRICE_MILK    = 3.00;
    const PRICE_EGGS    = 6.95;

    protected   $products = array();
    
    public function add($product, $quantity)
    {
        $this->products[$product] = $quantity;
    }
    
    public function getQuantity($product)
    {
        return isset($this->products[$product]) ? $this->products[$product] :
               FALSE;
    }
    
    public function getTotal($tax)
    {
        $total = 0.00;
        
        $callback =
            function ($quantity, $product) use ($tax, &$total)
            {
                $pricePerItem = constant(__CLASS__ . "::PRICE_" .
                    strtoupper($product));
                $total += ($pricePerItem * $quantity) * ($tax + 1.0);
            };
        
        array_walk($this->products, $callback);
        return round($total, 2);;
    }
}

$my_cart = new Cart;

// Add some items to the cart
$my_cart->add('butter', 1);
$my_cart->add('milk', 3);
$my_cart->add('eggs', 6);

// Print the total with a 5% sales tax.
print $my_cart->getTotal(0.05) . "\n";
// The result is 54.29
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Funções anonimas são atualmente implementadas usando a classe
    <link linkend="reserved.classes.closure">
    <classname>Closure</classname></link>. Este é um detalhe da implementação
    e você não deve se importar.
   </simpara>
   
   <note>
    <simpara>
     Funções anonimas estão disponíveis desde PHP 5.3.0.
    </simpara>
   </note>

   <note>
    <simpara>
     É possível usar <function>func_num_args</function>,
     <function>func_get_arg</function>, e <function>func_get_args</function>
     de um closure.
    </simpara>
   </note>
   
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
