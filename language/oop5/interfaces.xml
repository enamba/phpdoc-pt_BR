<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.14 Maintainer: felipe Status: ready --><!-- CREDITS: narigone -->
 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
  <title>Interfaces de Objetos</title>
  <para>
   Interfaces de Objetos permite a criação de código que especifica quais métodos
   e variáveis uma classe deve implementar, sem ter que definir como esses
   métodos serão tratados.
  </para>
  <para>
   Interfaces são definidas usando a palavra-chave 'interface', da mesma maneira que
   uma classe comum, mas sem nenhum dos métodos ter seu conteúdo
   definido.
  </para>
  <para>
   Todos os métodos declarados em uma interface devem ser public, essa é a natureza
   de uma interface.
  </para>
  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><literal>implements</literal></title>
   <para>
    Para implementar uma interface, o operador <literal>implements</literal> é usado.
    Todos os métodos na interface devem ser implementados na classe; não fazer isso
    resultará em um erro fatal. Classes podem implementar mais de uma interface se
    assim for desejado, separando cada interface com uma vírgula.
   </para>
   <note>
    <para>
     Uma classe não pode implementar duas interfaces que compartilham o mesmo nome
     uma vez que isso causaria ambigüidade.
    </para>
   </note>
   </note>
   <note>
    <para>
     Interfaces podem ser estendidas como classes, usando o operador <literal>extend</literal>.
    </para>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.constants">
   <title><literal>Constants</literal></title>
   <para>
    Its possible for interfaces to have constants. Interface constants works exactly 
    like <link linkend="language.oop5.constants">class constants</link>. They cannot 
    be overridden by a class/interface that inherits it.
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
    <title>Exemplo de Interface</title>
    <programlisting role="php">
<![CDATA[
<?php

// Declara a interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implementa a interface
// Isso funcionará
class Template implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }

    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }

        return $template;
    }
}

// Isso NÃO funcionará
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}

?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex2">
    <title>Interfaces estendíveis</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b extends a
{
    public function baz(Baz $baz);
}

// Isto irá funcionar
class c implements b
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// Isto não irá funcionar e resultará em um erro fatal
class d implements b
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex3">
    <title>Interface com herança múltipla</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b
{
    public function bar();
}

interface c extends a, b
{
    public function baz();
}

class d implements c
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex4">
    <title>Interfaces com constantes</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    const b = 'Interface constant';
}

// Imprime: Interface constant
echo a::b;


// Isto não funcionará porque não é permitido
// sobreescrever constantes. É o mesmo conceito como
// constantes de classes
class b implements a
{
    const b = 'Class constant';
}
?>
]]>
    </programlisting>
   </example>
   <simpara>
    Veja também o operador
    <link linkend="language.operators.type">instanceof</link>.
   </simpara>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
