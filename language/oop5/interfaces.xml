<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.5 Maintainer: narigone Status: ready -->
 <sect1 id="language.oop5.interfaces">
  <title>Interfaces de Objetos</title>
  <para>
   Interfaces de Objetos permite a criação de código que especifica quais métodos
   e variáveis uma classe deve implementar, sem ter que definir como esses
   métodos serão tratados.
  </para>
  <para>
   Interfaces são definidas usando a palavra-chave 'interface', da mesma maneira que
   uma classe comum, mas sem nenhum dos métodos ter seu conteúdo
   definido. Classes que implementam uma interface devem fazê-lo usando a
   palavra-chave 'interface', e devem ter definições para todos os métodos listados
   na interface. Classes podem implementar mais de uma interface se desejarem
   listando cada interface separada por um espaço.
  </para>
  <para>
   Dizer que uma classe implementa uma interface e depois não implementar todos
   os métodos na interface resultará em um erro fatal dizendo quais
   métodos não foram implementados.
  </para>
  <example>
   <title>Exemplo de Interface</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declara a interface 'iTemplate'
interface iTemplate
{
  public function editarVariavel($nome, $var);
  public function pegarHtml($template);
}

// Implementa a interface
// Isso vai funcionar
class Template implements iTemplate
{
  private $vars = array();
  
  public function editarVariavel($nome, $var)
  {
    $this->vars[$nome] = $var;
  }
  
  public function pegarHtml($template)
  {
    foreach($this->vars as $nome => $valor) {
      $template = str_replace('{'.$nome.'}',$valor, $template);
    }
    
    return $template;
  }
}

// Isso não vai funcionar
// Erro Fatal: Classe TemplateRuim contêm 1 método abstrato
// e deve, portanto, ser declareada abstrata (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function editarVariavel($nome, $var)
    {
        $this->vars[$nome] = $var;
    }
}

?> 
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
