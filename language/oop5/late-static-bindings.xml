<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: felipe Status: ready -->
 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>Late Static Bindings</title>
  <para>
   No PHP 5.3.0, o PHP implementa um recurso chamado late static bindings que
   pode ser usado para referenciar a classe chamada no contexto de herança estática.
  </para>

  <para>
   Este recurso foi nomeado "late static bindings" com um pespectiva interna em
   mente. "Late binding" vem do fato que <literal>static::</literal>
   não ser mais resolvido usando a classe onde o mesmo é definido mas
   ele será avaliado usando informação em tempo de execução.

   Ele foi também chamado "static binding" como pode ser usado para (mas não é 
   limitado para) chamada de métodos estáticos.
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title>Limitações do <literal>self::</literal></title>
   <para>
    Referências estáticas para a atual classe como <literal>self::</literal> ou
    <literal>__CLASS__</literal> são resolvidas usando a classe na qual
    a função pertence, como onde ele foi definido:
   </para>
   <example>
    <title>Uso do <literal>self::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        self::who();      
    }  
}  

class B extends A {      
    public static function who() {
         echo __CLASS__;
    }  
}   

B::test();
?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>
 
  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>Uso de Late Static Bindings</title>

   <para>
    Late static bindings tenta resolver a limitação introduzindo uma
    palavra-chave que referencia a classe que foi inicialiamente chamada em runtime.
    Basicamente, uma palavra-chave que permite você referenciar
    <literal>B</literal> em <literal>test()</literal> no exemplo
    anterior. Foi decidido não introduzir uma nova palavra-chave, mas usar
    <literal>static</literal> que já foi reservado.
   </para>

   <example>
    <title>Simples uso do <literal>static::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        static::who(); // Here comes Late Static Bindings     
    }  
}  

class B extends A {      
    public static function who() {
         echo __CLASS__;
    }  
}   

B::test();
?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     <literal>static::</literal> não funciona como <literal>$this</literal> para
     métodos estáticos! <literal>$this-></literal> segue a regra de
     herança quando <literal>static::</literal> não o faz. Esta diferença é
     detalhada depois nesta página.
    </para>
   </note>
   <example>
    <title>Uso do <literal>static::</literal> em um contexto não-estático</title>
    <programlisting role="php">
<![CDATA[
<?php
class TestChild extends TestParent {
    public function __construct() {
        static::who();
    }

    public function test() {
        $o = new TestParent();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class TestParent {
    public function __construct() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
$o = new TestChild;
$o->test();

?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
TestChild
TestParent
]]>
    </screen>
   </example>
   <note>
    <para>
     A resolução do Late static bindings termina em uma chamada estática
     inteiramente resolvida sem volta. Por outro lado, chamadas estáticas
     usando palavras-chave como <literal>parent::</literal> ou 
     <literal>self::</literal> encaminharão a informação.
    </para>
    <example>
     <title>Chamadas encaminhadas e não-encaminhadas</title>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function foo() {
        static::who();
    }
        
    public static function who() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function test() {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class C extends B {
    public static function who() {
        echo __CLASS__."\n";
    }
}

C::test();
?>  
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.late-static-bindings.edge-cases">
   <title>Edge cases</title>
   <para>
    Há várias diferentes formas de ser chamado um método no PHP, como
    callbacks ou métodos mágicos. Como late static bindings baseia sua 
    resolução em informação em runtine, ele pode dar resultados inesperados
    em então chamados edge cases.
   </para>
   <example>
    <title>Late static bindings em métodos mágicos</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {

   protected static function who() {
        echo __CLASS__."\n";
   }

   public function __get($var) {
       return static::who();
   }
}

class B extends A {

   protected static function who() {
        echo __CLASS__."\n";
   }
}

$b = new B;
$b->foo;
?>  
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
