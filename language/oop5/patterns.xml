<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 288721 Maintainer: felipe Status: ready --><!-- CREDITS: machado -->
<sect1 xml:id="language.oop5.patterns" xmlns="http://docbook.org/ns/docbook">
 <title>Patterns</title>
 <para>
  Padrões (Patterns) são formas de descrever melhores práticas e bons projetos.
  Eles mostram soluções flexíveis para problemas comuns de programação.
 </para>

 <sect2 xml:id="language.oop5.patterns.factory">
  <title>Factory</title>
  <para>
   O padrão Factory permite a instanciação de objetos em tempo de execução.
   É chamado de Factory uma vez que é responsável por "produzir" um objeto.
   O Factory parametrizado recebe como argumento o nome da classe para 
   instanciar.
  </para>
  <example>
   <title>Método Factory Parametrizado</title>
   <programlisting role="php">
<![CDATA[
<?php
class Exemplo
{
    // Método Factory parametrizado
    public static function factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception ('Driver não encontrado');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
    Definir esse método numa classe permite que drivers sejam carregados em
    tempo de execução. Se a classe <literal>Exemplo</literal> fosse uma classe
    de abstração de banco de dados, carregar um driver
    <literal>MySQL</literal> e um driver <literal>SQLite</literal> poderia ser
    feito como se segue:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Carregar um driver MySQL
$mysql = Exemplo::factory('MySQL');

// Carregar um driver SQLite 
$sqlite = Exemplo::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.patterns.singleton">
  <title>Singleton</title>
  <para>
   O padrão Singleton se aplica em situações em que é preciso haver uma só
   instância de uma classe.
   O exemplo mais comum é uma conexão com um banco de dados.
   Implementar esse padrão permite ao programador fazer essa instância única
   ser facilmente acessível por muitos outros objetos.
  </para>
  <example>
   <title>Função Singleton</title>
   <programlisting role="php">
<![CDATA[
<?php
class Exemplo
{
    // Guarda uma instância da classe
    private static $instance;
    
    // Um construtor privado; previne a criação direta do objeto
    private function __construct() 
    {
        echo 'Sou um construtor';
    }

    // O método singleton 
    public static function singleton()
    {
        if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }
    
    // Método exemplo
    public function latir()
    {
        echo 'Au!';
    }

    // Previne que o usuário clone a instância
    public function __clone()
    {
        trigger_error('Clone is not allowed.', E_USER_ERROR);
    }

}

?>
]]>
   </programlisting>
   <para>
    Isso permite que uma instância única de <literal>Exemplo</literal> seja
    recuperada.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Isso falharia porque o construtor é privado
$test = new Exemplo;

// Isso sempre vai recuperar uma instância da classe
$test = Exemplo::singleton();
$test->latir();

// Isso irá emitir um E_USER_ERROR.
$test_clone = clone $test;

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
