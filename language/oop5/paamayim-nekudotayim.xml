<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.8 Maintainer: narigone Status: ready -->
 <sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
  <title>Operador de Resolução de Escopo (::)</title>

  <para>
   O Operador de Resolução de Escopo, também chamado de Paamayim Nekudotayim, ou em
   termos mais simples, dois pontos duplo, é um token que permite acesso a
   métodos ou membros <link linkend="language.oop5.static">estáticos</link>,
   <link linkend="language.oop5.constants">constantes</link>, e sobrecarregados
   de uma classe.
  </para>

  <para>
   Quando referenciando esses itens de fora da definição da classe, você usa
   o nome da classe.
  </para>

  <para>
   Paamayim Nekudotayim pode parecer, de inicio, uma escolha estranha para um
   dois pontos duplo. No entanto, na hora de escrever o Engine da Zend 0.5
   (que provia o PHP3), foi o que a equipe da Zend decidiu.
   Realmente significa dois pontos duplo - em Hebreu! 
  </para>

  <example>
   <title>:: de fora da definição da classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class MinhaClasse {
  const VALOR_CONST = 'Um valor constante';
}
echo MinhaClasse::VALOR_CONST;
?>
]]>
   </programlisting>
  </example>

  <para>
   Duas palavras-chaves especiais <varname>self</varname> e <varname>parent</varname>
   são usadas para acessar membros ou métodos de dentro da definição da classe.
  </para>

  <example>
   <title>:: de dentro da definição da classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class OutraClasse extends MinhaClasse {
  public static $meu_estatico = 'variável estática';

  public static function doisPontosDuplo() {
     echo parent::VALOR_CONST . "\n";
     echo self::$meu_estatico . "\n";
  }
}

OutraClasse::doisPontosDuplo();
?>
]]>
   </programlisting>
  </example>

  <para>
   Quando uma subclasse sobrecarrega a definição de um método do pai,
   php não chamará o método pai. Fica a cargo da subclasse
   chamar o método pai ou não. Isso também aplica a definições de métodos <link
   linkend="language.oop5.decon">Construtores and Destrutores</link>, <link
   linkend="language.oop5.overloading">Sobrecarregados</link> e <link
   linkend="language.oop5.magic">Mágicos</link> também.
  </para>

  <example>
   <title>Chamando um método pai</title>
   <programlisting role="php">
<![CDATA[
<?php
class MinhaClasse {

  protected function minhaFuncao() {
    echo "MinhaClasse::minhaFuncao()\n";
  }
}

class OutraClasse extends MinhaClasse {

  /* Sobrecarrega a definição do pai */
  public function minhaFuncao() {

    /* Mas ainda chama a função pai */
    parent::minhaFuncao();
    echo "OutraClasse::minhaFuncao()\n";
  }
}

$classe = new OutraClasse();
$classe->minhaFuncao();
?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

