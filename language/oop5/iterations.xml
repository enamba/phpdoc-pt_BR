<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.11 Maintainer: narigone Status: ready -->
 <sect1 id="language.oop5.iterations">
  <title>Iteração de Objetos</title>
  <para>
  
   PHP 5 fornece uma maneira de defini objetos para que seja possível
   iterar por uma lista de items, com, por exeplo, uma instrução <xref 
   linkend="control-structures.foreach" /> . Por padrão, todas as 
   propriedades públicas serão usadas para a iteração.
   
  </para>

  <example>
   <title>Iteração Simples de Objeto</title>
   <programlisting role="php">
<![CDATA[
<?php

class MinhaClasse {
  public $var1 = 'valor 1';
  public $var2 = 'valor 2';
  public $var3 = 'valor 3';

  protected $protected = 'protegido';
  private   $private   = 'privado';

  function iterateVisible() {
    echo "MinhaClasse::iterateVisible:\n";
    foreach($this as $chave => $valor) {
      print "$chave => $valor\n";
    }
  }  
}

$classe = new MinhaClasse();

foreach($classe as $chave => $valor) {
  print "$chave => $valor\n";
}

echo "\n";


$class->iterateVisible();

?>
]]>
   </programlisting>
   <para>
     Terá como saída:
   </para>
   <screen role="php">
<![CDATA[
var1 => valor 1
var2 => valor 2
var3 => valor 3

MinhaClasse::iterateVisible:
var1 => valor 1
var2 => valor 2
var3 => valor 3
protected => protected var
private => private var
]]>
   </screen>

  </example>

 <para>
  Como a saída mostra, o <link
  linkend="control-structures.foreach">foreach</link> iteragiu por cada uma 
  das variáveis públicas definidas. Indo
  um pouco mais longe, você pode <varname>implementar</varname> uma das <link
  linkend="language.oop5.interfaces">interfaces</link> internas do PHP5 chamada
  <varname>Iterator</varname>. Isso permite que o objeto decida o que
  e como o objeto será iterado.
 </para>

  <example>
   <title>Iteração de Objeto implmentando Iterator</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyIterator implements Iterator {

  private $var = array();

  public function __construct($array) {
    if (is_array($array) ) {
      $this->var = $array;
    }
  }

  public function rewind() {
    echo "rewinding\n";
    reset($this->var);
  }

  public function current() {
    $var = current($this->var);
    echo "current: $var\n";
    return $var;
  }

  public function key() {
    $var = key($this->var);
    echo "key: $var\n";
    return $var;
  }

  public function next() {
    $var = next($this->var);
    echo "next: $var\n";
    return $var;
  }

  public function valid() {
    $var = $this->current() !== false;
    echo "valid: {$var}\n";
    return $var;
  }

}

$values = array(1,2,3);
$it = new MyIterator($values);

foreach ($it as $a => $b) {
  print "$a: $b\n";
}
]]>
   </programlisting>
   <para>
     Terá como saída:
   </para>
   <screen role="php">
<![CDATA[
rewinding
current: 1
valid: 1
current: 1
key: 0
0: 1
next: 2
current: 2
valid: 1
current: 2
key: 1
1: 2
next: 3
current: 3
valid: 1
current: 3
key: 2
2: 3
next:
current:
valid:
]]>
   </screen>

  </example>

  <para>
   Você também pode definir sua classe para que ela não tenha que definir
   todas as funções do <varname>Iterator</varname> simplesmente implementado
   a interface <varname>IteratorAggregate</varname> do PHP 5.
  </para>

  <example>
   <title>Iteração de Objeto implementado IteratorAggregate</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyCollection implements IteratorAggregate {
  private $items = array();
  private $count = 0;

  /* Definião requirida da interface IteratorAggregate */
  public function getIterator() {
    return new MyIterator($this->items);
  }

  public function add($value) {
    $this->items[$this->count++] = $value;
  }

}

$coll = new MyCollection();
$coll->add('value 1');
$coll->add('value 2');
$coll->add('value 3');

foreach ($coll as $key => $val) {
  echo "key/value: [$key -> $val]\n\n";
}

?>
</pre>
]]>
   </programlisting>
   <para>
     Will output:
   </para>
   <screen role="php">
<![CDATA[
rewinding
current: value 1
valid: 1
current: value 1
key: 0
key/value: [0 -> value 1]

next: value 2
current: value 2
valid: 1
current: value 2
key: 1
key/value: [1 -> value 2]

next: value 3
current: value 3
valid: 1
current: value 3
key: 2
key/value: [2 -> value 3]

next:
current:
valid:
]]>
   </screen>

  </example>

  <note>
   <para>
    Para mais exemplos de iteração, veja a
    <link linkend="ref.spl">Extensão SPL</link>.
   </para>
  </note> 
  
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
