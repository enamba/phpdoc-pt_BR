<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: narigone Status: ready -->
 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>Indução de Tipo</title>
  <para>
   PHP 5 introduz Indução de Tipo. Funções podem forçar que os parâmetros
   sejam objetos (especificando o nome da classe no protótipo da
   função) ou array (a partir do PHP 5.1). Contudo, se <type>NULL</type> é usado
   como o valor padrão do parametro, ele será permitido como um argumento nas
   chamadas à função.
  </para>

  <example>
   <title>Exemplo Indução de Tipo</title>
    <programlisting role="php">
<![CDATA[
<?php
// Uma classe de exemplo
class MinhaClasse
{
    /**
     * Uma função de teste
     *
     * Primeiro parâmetro deve ser um objeto do tipo OutraClasse
     */
    public function teste(OutraClasse $outraclasse) {
        echo $outraclasse->var;
    }


    /**
    * Outra função de teste
    *
    * Primeiro parâmetro deve ser um array
    */
    public function testa_array(array $array_de_entrada) {
        print_r($array_de_entrada);
    }
}

// Outro classe de exemplo
class OutraClasse {
    public $var = 'Alô Mundo';
}
?>
]]>
   </programlisting>
   <para>
    Não satisfazer a indução de tipo resulta em erro fatal (Catchable fatal error).
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Uma instância de cada classe
$minhaclasse = new MinhaClasse;
$outraclasse = new OutraClasse;

// Erro Fatal: Argumento 1 deve ser um objeto da classe OutraClasse
$minhaclasse->teste('hello');

// Erro Fatal: Argumento 1 deve ser uma instância de OutraClasse
$foo = new stdClass;
$minhaclasse->teste($foo);

// Erro Fatal: Argumento 1 deve ser diferente de null
$minhaclasse->teste(null);

// Funciona: Imprime Alô Mundo
$minhaclasse->teste($outraclasse);

// Erro Fatal: Argumento 1 deve ser um array
$minhaclasse->testa_array('a string');

// Funciona: Imprime o array
$minhaclasse->testa_array(array('a', 'b', 'c'));
?>
]]>
   </programlisting>
   <para>
    Indução de tipo também funciona com funções:
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Um exemplo de classe
class MinhaClasse {
    public $var = 'Alô Mundo';
}

/**
 * Uma função de teste
 *
 * Primeiro parâmetro deve ser um objeto do tipo MinhaClasse
 */
function MinhaFuncao (MinhaClasse $foo) {
    echo $foo->var;
}

// Funciona
$minhaclasse = new MinhaClasse;
MinhaFuncao($minhaclasse);
?>
]]>
   </programlisting>
   <para>
    Type hinting permitindo valor NULL:
   </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Aceitando valor NULL value */
function test(stdClass $obj = NULL) {

}

test(NULL);
test(new stdClass);

?>
]]>
   </programlisting>
  </example>
  <para>
   Indução de tipo só pode ser usado com tipos <type>objetos</type>. Indução
   tradicional com <type>int</type> e <type>string</type> não são
   suportados.
  </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
