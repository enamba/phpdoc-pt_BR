<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.3 Maintainer: narigone Status: ready -->
 <sect1 id="language.oop5.overloading">
  <title>Sobrecarga</title>

  <para>
   Tanto chamada de métodos e acesso a membros podem ser sobrecarregados pelos métodos
   __call, __get e __set. Esses métodos só serão disparados quando
   seu objeto ou o objeto herdado não contiver o
   membro ou método que você está tentando acessar.
  </para>

  <sect2 id="language.oop5.overloading.members">
   <title>Sobrecarga de método</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__get</methodname>
    <methodparam><type>mixed</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    Membros de classes podem ser sobrecarregados para executar código específico definido 
    na sua classe definindo esses métodos especialmente nomeados. O parâmetro <varname>$name</varname> 
    usado é o nome da variável que deve ser configurada ou recuperada.
    O parâmetro <varname>$value</varname> do método __set() especifica o
    valor que o objeto deve atribuir à variável <varname>$name</varname>.
   </para>

   <example>
    <title>Exemplo de sobrecarga com __get e __set</title>
    <programlisting role="php">
<![CDATA[
<?php
class Setter {
  public $n;
  private $x = array("a" => 1, "b" => 2, "c" => 3);

  function __get($nm) {
    print "Getting [$nm]\n";

    if (isset($this->x[$nm])) {
      $r = $this->x[$nm];
      print "Returning: $r\n";
      return $r;
    } else {
      print "Nothing!\n";
    }
  }

  function __set($nm, $val) {
    print "Setting [$nm] to $val\n";

    if (isset($this->x[$nm])) {
      $this->x[$nm] = $val;
      print "OK!\n";
    } else {
      print "Not OK!\n";
    }
  }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;
var_dump($foo);
?>
]]>
    </programlisting>
    <para>
     Terá a seguinte saída:
    </para>
    <screen role="php">
<![CDATA[
Setting [a] to 100
OK!
Getting [a]
Returning: 100
Setting [a] to 101
OK!
Getting [z]
Nothing!
Setting [z] to 1
Not OK!
object(Setter)#1 (2) {
  ["n"]=>
  int(1)
  ["x:private"]=>
  array(3) {
    ["a"]=>
    int(101)
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
]]>
    </screen>

   </example>
  </sect2>

  <sect2 id="language.oop5.overloading.methods">
   <title>Sobrecarga de método</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    Membros de classes podem ser sobrecarregados para executar código específico definido 
    na sua classe definindo esses métodos especialmente nomeados. O parâmetro
    <varname>$name</varname> usado é o nome da função que foi requerida
    a ser usada. Os argumentos que foram passado na função serão definidos
    como um array no parâmetro <varname>$arguments</varname>.
    O valor retorna do método __call() será retornado ao
    chamador do método.
   </para>

   <example>
    <title>Exemplo de sobrecarga com __call</title>
    <programlisting role="php">
  <![CDATA[
<?php
class Caller {
  private $x = array(1, 2, 3);

  function __call($m, $a) {
    print "Method $m called:\n";
    var_dump($a);
    return $this->x;
  }
}

$foo = new Caller();
$a = $foo->test(1, "2", 3.4, true);
var_dump($a);
?>
]]>
    </programlisting>
    <para>
     Will Output:
    </para>
    <screen role="php">
<![CDATA[

Method test called:
array(4) {
  [0]=>
  int(1)
  [1]=>
  string(1) "2"
  [2]=>
  float(3.4)
  [3]=>
  bool(true)
}
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>

  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
