<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.21 Maintainer: narigone Status: ready -->
 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>Sobrecarga</title>

  <para>
   Tanto chamada de métodos e acesso a membros podem ser sobrecarregados pelos métodos
   __call, __get e __set. Esses métodos só serão
   disparados quando seu objeto ou o objeto herdado não contiver o
   membro <modifier>public</modifier> ou método que você está tentando acessar.
   Todos os métodos sobrecarregados devem ser definidos
   <link linkend="language.oop5.visibility">estáticos</link>.
   Todos os métodos sobrecarregados devem ser definidos
   <link linkend="language.oop5.visibility">public</link>.
  </para>
  <para>
    A partir do PHP 5.1.0 também é possível sobrecarregar as
    funções <function>isset</function> and <function>unset</function> através
    dos métodos __isset e __unset respectivamente.
    O método __isset também é chamado com a função <function>empty</function>.
  </para>

  <sect2 xml:id="language.oop5.overloading.members">
   <title>Sobrecarga de membros</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    Membros de classes podem ser sobrecarregados para executar código específico definido
    na sua classe definindo esses métodos especialmente nomeados. O parâmetro <varname>$name</varname>
    usado é o nome da variável que deve ser configurada ou recuperada.
    O parâmetro <varname>$value</varname> do método __set() especifica o
    valor que o objeto deve atribuir à variável <varname>$name</varname>.
   </para>
   
   <note>
    <para>
     O método <literal>__set()</literal> não pode obter argumentos por referência.
    </para>
   </note>

   <example>
    <title>Exemplo de sobrecarga com __get, __set, __isset e __unset</title>
    <programlisting role="php">
<![CDATA[
<?php
class Setter
{
    public $n;
    private $x = array("a" => 1, "b" => 2, "c" => 3);

    public function __get($nm)
    {
        echo "Getting [$nm]\n";

        if (isset($this->x[$nm])) {
            $r = $this->x[$nm];
            print "Returning: $r\n";
            return $r;
        } else {
        echo "Nothing!\n";
        }
    }

    public function __set($nm, $val)
    {
        echo "Setting [$nm] to $val\n";

        if (isset($this->x[$nm])) {
            $this->x[$nm] = $val;
            echo "OK!\n";
        } else {
            echo "Not OK!\n";
        }
    }

    public function __isset($nm)
    {
        echo "Checking if $nm is set\n";

        return isset($this->x[$nm]);
    }

    public function __unset($nm)
    {
        echo "Unsetting $nm\n";

        unset($this->x[$nm]);
    }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;

var_dump(isset($foo->a)); //true
unset($foo->a);
var_dump(isset($foo->a)); //false

// Isso não passa pelo método __isset()
// porque 'n' é uma proriedade pública
var_dump(isset($foo->n));

var_dump($foo);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Setting [a] to 100
OK!
Getting [a]
Returning: 100
Setting [a] to 101
OK!
Getting [z]
Nothing!
Setting [z] to 1
Not OK!

Checking if a is set
bool(true)
Unsetting a
Checking if a is set
bool(false)
bool(true)

object(Setter)#1 (2) {
  ["n"]=>
  int(1)
  ["x:private"]=>
  array(2) {
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>Sobrecarga de método</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    O método mágico __call() permite captura a invocação de métodos não
    existentes. Dessa forma, __call() pode ser usado para implementar tratamento
    de métodos definidos pelo usuário que dependem do nome do próprio método ser chamado. 
    Isso é útil para implementações proxy, por exemplo. Os argumentos que são
    passados na função serão definidos como um array no 
    parâmetro <varname>$arguments</varname>. O valor retornado do 
    método __call() será retornado ao chamador do método.
   </para>

   <example>
    <title>Exemplo de sobrecarga com __call</title>
    <programlisting role="php">
  <![CDATA[
<?php
class Caller
{
    private $x = array(1, 2, 3);

    function __call($m, $a)
    {
        print "Método $m chamado:\n";
        var_dump($a);
        return $this->x;
    }
}

$foo = new Caller();
$a = $foo->teste(1, "2", 3.4, true);
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[

Método teste chamado:
array(4) {
  [0]=>
  int(1)
  [1]=>
  string(1) "2"
  [2]=>
  float(3.4)
  [3]=>
  bool(true)
}
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
