<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.34 Maintainer: amandavale Status: ready --><!-- CREDITS:
narigone -->
 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>Sobrecarga</title>

  <para>
   Sobrecarga em PHP provê recursos para <quote>criar</quote>
   dinamicamente membros e métodos.
   Estas entidades dinâmicas são processadas via métodos mágicos que podem
   estabelecer em uma classe para vários tipos de ações.
  </para>

  <para>
   Os métodos sobrecarregados são invocados quando interagem com membros ou
   métodos que não foram declarados ou não são
   <link linkend="language.oop5.visibility">visíveis</link> no escopo
   corrente. O resto desta seção usará os termos
   <quote>membros inacessíveis</quote> e <quote>métodos inacessíveis</quote>
   para se referirir a esta combinação de declaração e visibilidade.
  </para>

  <para>
   Todos os métodos sobrecarregados devem ser definidos como <literal>públicos</literal>.
  </para>

  <note>
   <para>
    Nenhum dos argumentos destes métodos mágicos podem ser 
    <link linkend="functions.arguments.by-reference">passados por referência</link>.
   </para>
  </note>

  <note>
   <para>
    A interpretação do PHP de <quote>sobrecarga</quote> é diferente da
    maioria das linguagens orientadas a objeto. Sobrecarga tradicionalmente
    provê a habilidade de ter múltiplos métodos com o mesmo nome, mas
    diferentes quantidades e tipos de argumentos.
   </para>
  </note>


  <sect2 xml:id="language.oop5.overloading.changelog">
   &reftitle.changelog;
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>5.3.0</entry>
        <entry>
         Adicionado <literal>__callStatic()</literal>.
         Adicionado warning para reforçar a visibilidade pública e a
         declaração não estática.
        </entry>
       </row>
       <row>
        <entry>5.1.0</entry>
        <entry>
         Adicionados <literal>__isset()</literal> e <literal>__unset()</literal>.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>


  <sect2 xml:id="language.oop5.overloading.members">
   <title>Sobrecarga de membros</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    <literal>__set()</literal> é executado ao se escrever dados para membros
    inacessíveis.
   </para>

   <para>
    <literal>__get()</literal> é utilizados para ler dados de membros
    inacessíveis.
   </para>

   <para>
    <literal>__isset()</literal> é disparado para chamar
    <function>isset</function> ou <function>empty</function>
    em membros inacessíveis.
   </para>

   <para>
    <literal>__unset()</literal> é invocado quando
    <function>unset</function> é usado em membros inacessíveis.
   </para>

   <para>
    O argumento <varname>$name</varname> é o nome do membro com o qual se está
    interagindo. O argumento <varname>$value</varname> do método <literal>__set()</literal>
    especifica o valor para o qual o membro <varname>$name</varname> deveria
    ser setado.
   </para>

   <para>
    Sobrecarga de membros somente trabalha no contexto de objetos. Estes
    métodos mágicos não serão disparados no contexto estático. Portanto estes
    métodos não podem ser declarados <link
     linkend="language.oop5.static">static</link>.
   </para>

   <example>
    <title>Exemplo de sobrecarga com  __get, __set, __isset and __unset</title>
    <programlisting role="php">
<![CDATA[
<?php
class MemberTest {
    /**  Local para dado sobrecarregado.  */
    private $data = array();

    /**  Sobrecarga não usada em membros declarados.  */
    public $declared = 1;

    /** Sobrecarga somente utilizada neste quando acessado do lado de fora da
    classe. */ 
    private $hidden = 2;

    public function __set($name, $value) {
        echo "Setando '$name' para '$value'\n";
        $this->data[$name] = $value;
    }

    public function __get($name) {
        echo "Obtendo '$name'\n";
        if (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        }

        $trace = debug_backtrace();
        trigger_error(
            'Propriedade não definida via __get(): ' . $name .
            ' em ' . $trace[0]['file'] .
            ' na linha ' . $trace[0]['line'],
            E_USER_NOTICE);
        return null;
    }

    /**  Como em PHP 5.1.0  */
    public function __isset($name) {
        echo "'$name' está setado?\n";
        return isset($this->data[$name]);
    }

    /**  Como em PHP 5.1.0  */
    public function __unset($name) {
        echo "Unsetting '$name'\n";
        unset($this->data[$name]);
    }

    /**  Não é um método mágico, apenas está aqui para exemplo.  */
    public function getHidden() {
        return $this->hidden;
    }
}


echo "<pre>\n";

$obj = new MemberTest;

$obj->a = 1;
echo $obj->a . "\n\n";

var_dump(isset($obj->a));
unset($obj->a);
var_dump(isset($obj->a));
echo "\n";

echo $obj->declared . "\n\n";

echo "Vamos experimentar com a proriedade privada chamada 'hidden':\n";
echo "Privados são visíveis dentro da classe, então __get() não usado...\n";
echo $obj->getHidden() . "\n";
echo "Privados não são vidíveis fora da classe, então __get() é usado...\n";
echo $obj->hidden . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Setando 'a' para '1'
Obtendo 'a'
1

'a' está setado?
bool(true)
Unsetting 'a'
'a' está setado?
bool(false)

1

Vamos experimentar com a proriedade privada chamada 'hidden':
Privados são visíveis dentro da classe, então __get() não usado...
2
Privados não são visíveis fora da classe, então __get() é usado...
Obtendo 'hidden'


Notice:  Propriedade não definida via __get(): hidden em <file> na linha 70 em
 <file> na linha 29
]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>Sobrecarga de método</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__callStatic</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    <literal>__call()</literal> é disparado quando invocando métodos
    inacessíveis em um contexto de objeto.
   </para>

   <para>
    <literal>__callStatic()</literal> é disparado quando invocando métodos
    inacessíveis em um contexto estático.
   </para>

   <para>
    O argumento <varname>$name</varname> é o nome do método sendo chamado. O
    argumento <varname>$arguments</varname> é um array enumerado contendo os
    parâmetros passados para o método <varname>$name</varname>.
   </para>

   <example>
    <title>Sobrecarga de métodos instanciados com  __call e __callStatic</title>
    <programlisting role="php">
  <![CDATA[
<?php
class MethodTest {
    public function __call($name, $arguments) {
        // Nota: valor de $name é case sensitive.
        echo "Chamando método objeto '$name' "
             . implode(', ', $arguments). "\n";
    }

    /**  Como em PHP 5.3.0  */
    public static function __callStatic($name, $arguments) {
        // Nota: valor de $name é case sensitive
        echo "Chamando método estático '$name' "
             . implode(', ', $arguments). "\n";
    }
}

$obj = new MethodTest;
$obj->runTest('no contexto objeto');

MethodTest::runTest('no contexto estático');  // Como em PHP 5.3.0
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Chamando método objeto 'runTest' no contexto objeto
Chamando método estático 'runTest' no contexto estático
]]>
    </screen>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
