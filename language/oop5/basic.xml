<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.7 Maintainer: narigone Status: ready -->

 <sect1 id="language.oop5.basic">
  <title>O Básico</title>

  <sect2 id="language.oop5.basic.class">
   <title>Classe</title>
   <para>
    Toda definição de classe começa com a palavra-chave class, seguido por um nome
    da classe, que pode ser qualquer nome que não seja uma palavra<link linkend="reserved">
    reservada</link> no PHP. seguido por um par de chaves, que 
    contém a definição dos membros e métodos da classe. Dentro de cada método,
    exceto por métodos<link linkend="language.oop5.static">estáticos (static)</link>,
    uma pseudo variável <varname>$this</varname> está disponível.
    <varname>$this</varname> é uma referência para a mesma instância que 
    chamou o método.
   </para>
   <example>
    <title>Definição simples de uma classe</title>
    <programlisting role="php">
<![CDATA[
<?php
class ClasseSimples {
   /* declaração de membro */
   public $var = 'um valor padrão';

   /* declaração de método */   
   public function mostraVar() {
     echo $this->var;             /* Ecoa o valor da minha própria $var */
   }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 id="language.oop5.basic.new">
   <title>new</title>
   <para>
    Para criar uma instância de um objeto, um novo objeto deve ser criado e
    atribuído a uma variável. Um objeto sempre será atribuído quando
    um novo objeto for criado a não ser que o objeto tem um<link
    linkend="language.oop5.decon">construtor</link> definido que dispara (throws) uma<link
    linkend="language.oop5.exceptions">exceção</link> por um erro.
   </para>
   <example>
    <title>Criando uma instância</title>
    <programlisting role="php">
<![CDATA[
<?php
$instancia = new ClasseSimples();
?>
]]>
    </programlisting>
   </example>
   <para>
    Quando atribuindo um instância já criada de um objeto à uma nova variável, a nova variável
    acessará a mesma instância do objeto que foi atribuída. Esse
    comportamento é o mesmo quando passando instâncias à uma função. Uma nova instância
    de um objeto já criado pode ser feita<link
    linkend="language.oop5.cloning">clonando (cloning)</link> ele.
   </para>
   <example>
    <title>Atribuição de Objetos</title>
    <programlisting role="php">
<![CDATA[
<?php
$atribuido  =  $instancia;
$referencia =& $instancia;


$instancia->var = '$atribuido terá esse valor';

$instancia = null; /* $instancia e $referencia se tornam nulos (null) */


var_dump($instancia);
var_dump($referencia);
var_dump($atribuido);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(ClasseSimples)#1 (1) {
   ["var"]=>
     string(26) "$atribuido terá esse valor"
}
]]>
    </screen>
   </example>
  </sect2>

  <sect2 id="language.oop5.basic.extend">
   <title>Herança (extend)</title>
   <para>
    Uma classe pode herdar métodos e membros de uma outra classe usando a
    palavra-chave extend na declaração. Não é possível herdar classes
    múltiplas, uma classe só pode herdar de uma classe base.
   </para>
   <para>
    Os métodos e membros herdados podem ser sobrecarregados, a menos que a classe
    pai tenha definido o método como <link
    linkend="language.oop5.final">final</link>, redeclarando-os
    usando o mesmo nome definido na classe pai. É possível acessar o método ou membro
    sobrecarregado referenciando-os com<link
    linkend="language.oop5.paamayim-nekudotayim">parent::</link>
   </para>
   <example>
    <title>Herança Simples</title>
    <programlisting role="php">
<![CDATA[
<?php
class ClasseHerdeira extends ClasseSimples {
  /* Redefine o método pai */
  function mostraVar() {
    echo "Classe Herdeira\n";
    parent::mostraVar();
  }
}

$herdeira = new ClasseHerdeira();
$herdeira->mostraVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Class Herdeira
um valor padrão
]]>
    </screen>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
