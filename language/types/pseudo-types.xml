<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.1 Maintainer: felipe Status: ready -->
<sect1 xml:id="language.pseudo-types">
 <title>Pseudo-tipos e variáveis utilizados nesta documentação</title> 

 <sect2 xml:id="language.types.mixed">
  <title>mixed</title>
  <para>
   <literal>mixed</literal> indica que um parâmetro pode aceitar vários (mas não
   necessariamente todos) os tipos
  </para>
  <para>
   <function>gettype</function>, por exemplo, aceita todos os tipos do PHP,
   enquanto <function>str_replace</function> somente aceita strings e arrays.
  </para>
 </sect2>

 <sect2 xml:id="language.types.number">
  <title>number</title>
  <para>
   <literal>number</literal> indica que um parâmetro pode ser tanto um
   <type>integer</type> ou <type>float</type>.
  </para>
 </sect2>

 <sect2 xml:id="language.types.callback">
  <title>callback</title>
  <para>
   Algumas funções como <function>call_user_func</function>
   ou <function>usort</function> aceitam callback de funções definidas por
   usuário como parâmetro. Funções de callback não podem ser somente
   simples funções, mas também métodos de objetos incluindo métodos estáticos
   de classes.
  </para>
  <para>
   Uma função PHP é simplesmente passado pelo seu nome como uma string. Você pode
   passar qualquer função nativa ou definida por usuário. Note que construtores da 
   linguagem como
   <function>array</function>,
   <function>echo</function>,
   <function>empty</function>,
   <function>eval</function>,
   <function>exit</function>,
   <function>isset</function>,
   <function>list</function>,
   <function>print</function> ou
   <function>unset</function> não podem ser chamados usando um callback.
  </para>
  <para>
   A method of an instantiated object is passed as an array containing
   an object as the element with index 0 and a method name as the
   element with index 1.
  </para>
  <para>
   Static class methods can also be passed without instantiating an
   object of that class by passing the class name instead of an
   object as the element with index 0.
  </para>
  <para>
   Apart from common user-defined function, 
   <function>create_function</function> can be used to create an anonymous
   callback function.
  </para>
  <para>
   <example>
    <title>
     Exemplo de funções callback
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Exemplo simples de callback
function my_callback_function() {
    echo 'Olá Mundo!';
}
call_user_func('my_callback_function');

// Exemplo de método callback
class MyClass {
    static function myCallbackMethod() {
        echo 'Olá Mundo!';
    }
}

// Type 1: Simple callback
call_user_func('my_callback_function'); 

// Type 2: Static class method call
call_user_func(array('MyClass', 'myCallbackMethod'));

// Type 3: Chamada de método de objeto
$obj = new MyClass();
call_user_func(array(&$obj, 'myCallbackMethod'));

// Type 4: Static class method call (As of PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Type 5: Relative static class method call (As of PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    No PHP 4, vocÊ irá ter que usar a referência para criar um callback que
    aponta para o objeto atual, e não uma cópia dele. Para mais detalhes,
    veja <link linkend="language.references">Referências explicadas</link>.
   </simpara>
  </note>
 </sect2>
 
 <sect2 xml:id="language.types.void">
  <title>void</title>
  <para>
   <literal>void</literal> no tipo de retorno indica que não há
   valor a ser retornado. <literal>void</literal> na lista de parâmetros indica que a
   função não aceita parâmetros.
  </para>
 </sect2>

 <sect2 xml:id="language.types.dotdotdot">
  <title>...</title>
  <para>
   <parameter>$...</parameter> no protótipo de uma função significa
   <literal>e assim por diante</literal>.
   O nome desta variável é usado quando a função suporta infinito número de
   argumentos.
  </para>
 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
