<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.7 Maintainer: felipe Status: ready --><!-- CREDITS: narigone -->
 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>Exceções</title>

  <para>
   PHP 5 tem um modelo de exceção similar ao de outras linguagens de programação.
   Uma exceção pode ser disparada (<literal>throw</literal>n), ou pega
   (caught ou "<literal>catch</literal>ed") no PHP. Código pode ser rodeado em um
   block <literal>try</literal>, para facilitar a captura de exceções em
   potencial. Cada bloco <literal>try</literal>, deve ter pelo menos um
   bloco <literal>catch</literal> correspondente. Vários blocos
   <literal>catch</literal> pode ser usado para pegar diferentes classes de
   exceções. A execução normal (quando nenhuma exceção é disparada dentro de um
   bloco <literal>try</literal> ou quando um <literal>catch</literal>
   compatível com a classe da exceção disparada não estiver presente) continuará após
   o último bloco <literal>catch</literal> definido na seqüência. Exceções podem ser
   disparadas (ou re-disparadas) dentro de um bloco <literal>catch</literal>.
  </para>
  <para>
   Quando uma exceção é disparada, código logo após à instrução não será
   executada, e o PHP tentará achar o primeiro bloco <literal>catch</literal>
   correspondente à exceção disparada. Se uma
   exceção não for pega, um Erro Fatal do PHP será lançado com uma
   mensagem "<literal>Uncaught Exception ...</literal>", a não ser que um tratador
   tenha sido definido com <function>set_exception_handler</function>.
  </para>
  <note>
   <para>
    Funções internas do PHP usam principalmente <link
    linkend="ini.error-reporting">Error reporting</link>, somente extensões
	modernas usam exceções. Contudo, os erros podem ser simplesmente traduzidos 
	para exceções com <link linkend="class.errorexception">ErrorException</link>.
   </para>
  </note>
  <example>
   <title>Disparando uma Exceção</title>
   <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Division by zero.');
    }
    else return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
  echo "Exceção pega: ",  $e->getMessage(), "\n";
}

// continua a execução
echo 'Hello World';
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Exceção pega: Division by zero.
Hello World
]]>
    </screen>
  </example>
   <example>
    <title>Exceções aninhadas</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class Test {
    public function testing() {
        try {
            try {
                throw new MyException('foo!');
            } catch (MyException $e) {
                /* rethrow it */
                throw $e;
            }
        } catch (Exception $e) {
            var_dump($e->getMessage());
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "foo!"
]]>
    </screen>
   </example>

  <sect1 xml:id="language.exceptions.extending">
   <title>Herdando Exceções</title>
   <para>
    Uma classe de exceção definida pelo usuário pode ser criada herdando a classe
    Exception. Os membros e propriedades abaixo mostram o que é acessível
    a partir da classe filha que deriva da Exception.
   </para>
   <example>
    <title>A classe nativa Exception</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception {

  protected $message = 'Unknown exception'; // Mensagem da exceção
  protected $code = 0;                      // Código da exceção definido pelo usuário
  protected $file;                          // Arquivo gerador da exceção
  protected $line;                          // Linha geradora da exceção

  function __construct(string $message=NULL, int code=0);

  final function getMessage();              // Mensagem da exceção
  final function getCode();                 // Código da exceção
  final function getFile();                 // Arquivo gerador
  final function getTrace();                // um array com o backtrace()
  final function getTraceAsString();        // String formatada do trace

  /* Sobrecarregável */
  function _toString();                     // String formatada para ser mostrada

}
?>
]]>
    </programlisting>
   </example>
   <para>
    Se uma classe herda da classe Exception e redefine o <link
    linkend="language.oop5.decon">construtor</link>, é altamente recomendado
    que o mesmo chame <link
    linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link>
    para garantir que todas as informações disponíveis sejam devidamente atribuídas. O
    método <link linkend="language.oop5.magic">__toString()</link> pode ser sobrecarregado
    para permitir uma saída personalizada quando o objeto é apresentado como string.
   </para>
   <example>
    <title>Herdando a classe Exception</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception {

  /* Redefine a exceção para que a mensagem não seja opcional */
  public function __construct($message, $code = 0) {

    // coisas personalizadas que você queira fazer
    // ...

    /* Garante que tudo é atribuído corretamente */
    parent::__construct($message, $code);
  }

  /* Representação do objeto personalizada no formato string */
  public function __toString() {
    return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
  }

  public function customFunction() {
    echo "Uma função personalizada para esse tipo de exceção\n";
  }

}

/**
 * Cria uma classe para testar a exceção
 */
class TestException {

  public $var;

  const THROW_NONE    = 0;
  const THROW_CUSTOM  = 1;
  const THROW_DEFAULT = 2;


  function __construct($avalue = self::THROW_NONE) {

    switch ($avalue) {
      case self::THROW_CUSTOM:
        // dispara exceção personalizada
        throw new MyException('1 é um parâmetro inválido', 5);
        break;

      case self::THROW_DEFAULT:
        // dispara a padrão
        throw new Exception('2 não é permitido como parâmetro', 6);

        break;

      default:
        // Nenhuma exceção, objeto será criado.
        $this->var = $avalue;
        break;

    }

  }

}

// Exemplo 1
try {
  $o = new TestException(TestException::THROW_CUSTOM);
}
catch (MyException $e) {            /* Será pega */
  echo "Pegou minha exceção\n", $e;
  $e->customFunction();
}
catch (Exception $e) {              /* Ignorado */
  echo "Pegou Exceção Padrão\n", $e;
}
var_dump($o);                       /* continua execução */
echo "\n\n";


// Exemplo 2
try {
  $o = new TestException(TestException::THROW_DEFAULT);
}
catch (MyException $e) {            /* Tipos não batem */
  echo "Pegou minha exceção\n", $e;
  $e->customFunction();
}
catch (Exception $e) {              /* Será pega */
  echo "Pegou Exceção Padrão\n", $e;
}
var_dump($o);                       /* continua execução */
echo "\n\n";


// Exemplo 3
try {
  $o = new TestException(TestException::THROW_CUSTOM);
}
catch (Exception $e) {              /* Será pega */
  echo "Default Exception caught\n", $e;
}
var_dump($o);                       /* continua execução */
echo "\n\n";


// Exemplo 4
try {
  $o = new TestException();
}
catch (Exception $e) {              /* Ignorada, nenhuma exceção */
  echo "Default Exception caught\n", $e;
}
var_dump($o);                       /* continua execução */
echo "\n\n";


]]>
    </programlisting>
   </example>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
