<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: narigone Status: ready -->
 <chapter xml:id="features.connection-handling" xmlns="http://docbook.org/ns/docbook">
  <title>Tratamento de Conexões</title>

  <para>
   O status de uma conexão é mantido internamente no PHP. Existem 3
   estados possíveis:
   <itemizedlist>
    <listitem><simpara>0 - NORMAL</simpara></listitem>
    <listitem><simpara>1 - ABORTED</simpara></listitem>
    <listitem><simpara>2 - TIMEOUT</simpara></listitem>
   </itemizedlist>
  </para>

  <simpara>
   Quando um script PHP está sendo executado normalmente, o estado NORMAL está ativo.
   Se o cliente remoto desconecta, o estado ABORTED (abortado) é
   ligado. Uma desconexão do cliente remoto é normalmente causada pelo
   usuário apertando o botão STOP. Se o tempo limite imposto pelo PHP (veja
   <function>set_time_limit</function>) é alcançado, o estado TIMEOUT (tempo acabado)
   é ligado.</simpara>

  <simpara>
   Você pode decidir se quer ou não que a desconexão do cliente cause
   que seu script seja abortado. As vezes é útil sempre fazer o seu
   script rodar até completar mesmo se não há nenhum navegador remoto recebendo
   a saída. O comportamento padrão, no entanto, é de seu script ser
   abortado quando o cliente remoto desconecta. Esse comportamento pode ser
   configurado através da diretiva ignore_user_abort &php.ini; assim como pela
   diretiva correspondente do Apache .conf, "php_value ignore_user_abort" ou
   com a função <function>ignore_user_abort</function>. Se você não disser
   para o PHP ignorar o abort do usuário e ele abortar, seu script
   será finalizado. A única exceção é se você tiver registrado uma função
   de finalização usando <function>register_shutdown_function</function>. Com uma
   função de finalização, quando um usuário remoto clica no botão STOP, a
   próxima vez que seu script tentar gerar alguma saída, o PHP detectará que
   a conexão foi abortada e a função de finalização é chamada.
   Essa função de finalização também será chamada no fim do seu script
   mesmo terminando normalmente, então para fazer algo diferente caso o cliente
   desconecte, você pode usar a função <function>connection_aborted</function>.
   Essa função retorna &true; se a conexão foi
   abortada.</simpara>

  <simpara>
   Seu script também pode ser finalizado pelo timer interno.
   O tempo limite padrão é de 30 segundos. Pode ser mudado usando a
   diretiva <option>max_execution_time</option> &php.ini; ou a diretiva do
   Apache .conf correspondente <literal>php_value max_execution_time</literal> assim como com
   a função <function>set_time_limit</function>. Quando o timer
   chega ao limite, o script será abortado e assim como o caso acima
   de desconexão, se uma função de finalização foi registrada, ela será
   chamada. Dentro da função de finalização você pode checar se a
   causa da finalização foi estouro do tempo limite chamando a
   função <function>connection_timeout</function>. Essa função retornará
   &true; se o a função de finalização foi chamada pelo tempo ter acabado.
  </simpara>

  <simpara>
   Uma coisa a ser notada é que ambos os estados ABORTED e TIMEOUT
   podem estar ligados ao mesmo tempo.  Isso é possível se você disser
   ao PHP para ignorar o abort do usuário.  O PHP continuará a notar o fato que
   o usuário pode ter quebrado a conexão, mas o script continuará
   executando. Se então ele alcançar o tempo limite, ele será abortado e
   sua função de finalização, se houver, será chamada. Nesse ponto,
   você terá que <function>connection_status</function>
   retorna 3.
  </simpara>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
