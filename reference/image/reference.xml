<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.19 Maintainer: fernandoc Status: ready -->       
<reference id="ref.image">
 <title>Imagens, Funções de</title>
 <titleabbrev>Imagens</titleabbrev>
  <partintro>                                                         
   <section id="image.intro">
    &reftitle.intro;
    <para>
     O PHP não esta limitado a criar apenas saída em HTML. Ele também pode
     ser usado para criar e manipular arquivos de imagem em uma diversidade de 
     formatos, incluindo gif, png, jpg, wbmp, e xpm. E ainda mais convenietemente,
     o PHP pode enviar streams de saída de imagem diratamente para o browser. Você precisará
     compilar o PHP com a biblioteca GD de imagens de funções para
     isto funcionar. O PHP e GD também podem requerer outras bibliotecas, dependendo
     dos formatos de imagens com os quais você queira trabalhar.
    </para>
    <para>
     Você pode usar as funções de imagem no PHP para obter o tamanho de imagens 
     <acronym>JPEG</acronym>, <acronym>GIF</acronym>,
     <acronym>PNG</acronym>, <acronym>SWF</acronym>,
     <acronym>TIFF</acronym> and <acronym>JPEG2000</acronym>.
    </para>
    <para>
     <note>
      <simpara>
       Leia a seção sobre requerimentos sobre como expandir as capacidades de imagem
       para ler, escrever e modificar imagens e para ler meta dados de fotos
       tiradas por cameras digitais.
      </simpara>
     </note>
    </para>
   </section>

   <section id="image.requirements">
    &reftitle.required;
    <para>
     Se você tiver a biblioteca <acronym>GD</acronym> (disponível em <ulink
     url="&url.gd;">&url.gd;</ulink>) você poderá também criar
     e manipular imagens.
    </para>
    <para>
     O formato das imagens que você pode manipilar dependem da versão da
     <acronym>GD</acronym> que você instalou, e de quaisquer outras bibliotecas que o 
     <acronym>GD</acronym> possa precisar para acessar estes formatos de imagens.
     Versões do <acronym>GD</acronym> anteriores a gd-1.6
     suportam imagens GIF, e não suportam PNG, enquanto versões  
     posteriores a gd-1.6 suportam PNG, não GIF.
      <note>
       <simpara>
        Apartir do PHP 4.3 existe uma versão empacotada da biblioteca GD.
        Esta versão empacotada tem algumas melhorias como alpha blending,
        e deve ser usada em preferência da biblioteca externa, já
        que seu código-fonte é melhor mantido e mais estável.
       </simpara>
      </note>
    </para>
    <para>
     Você pode querer melhorar o GD para manipular mais formatos de imagens.
     <table>
     <title>Formatos de imagens suportados</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Formato da imagens</entry>
         <entry>Biblioteca para baixar</entry>
         <entry>Notas</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>gif</literal></entry>
         <entry></entry>
         <entry>
          Suportado apenas em versões do GD anteriores a gd-1.6. Suporte <emphasis>Apenas para leitura
          </emphasis> esta disponível com o PHP 4.3.0 e a biblioteca
          GD empacotada.
         </entry>
        </row>
        <row>
         <entry><literal>jpeg-6b</literal></entry>
         <entry><ulink url="&url.jpeg;">&url.jpeg;</ulink></entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>png</literal></entry>
         <entry><ulink url="&url.libpng;">&url.libpng;</ulink></entry>
         <entry>
          Apenas suportados em versões do GD maiores do que gd-1.6.
         </entry>
        </row>
        <row>
         <entry><literal>xpm</literal></entry>
         <entry><ulink url="&url.libxpm;">&url.libxpm;</ulink></entry>
         <entry>
          É provavel que você já tenha esta biblioteca disponível, se o seu sistema
          tiver um ambiênte X instalado.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>

    <para>
     Voce pode querer melhorar o GD para lidar com fontes diferentes. As seguintes
     bibliotecas de fontes são suportadas:
     <table>
     <title>Bibliotes de fontes suportadas</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Biblioteca de fonte</entry>
         <entry>Download</entry>
         <entry>Notas</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>FreeType 1.x</literal></entry>
         <entry><ulink url="&url.freetype;">&url.freetype;</ulink></entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>FreeType 2</literal></entry>
         <entry><ulink url="&url.freetype;">&url.freetype;</ulink></entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>T1lib</literal></entry>
         <entry><ulink url="&url.t1lib;">&url.t1lib;</ulink>)</entry>
         <entry>
          Suporte para fontes Type 1.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>

    <para>
     Se você tiver o PHP compilado com <option role="configure">--enable-exif</option>
     você poderá trabalhar com as informações guardadas nos cabeçalhos de imagens
     <acronym>JPEG</acronym> e <acronym>TIFF</acronym>. Deste jeito você poderá
     ler meta dados gerados por cameras digitais como mencionado acia. Estas
     funções não precisam da biblioteca <acronym>GD</acronym>.
     <note>
      <simpara>
      O PHP não precisa de nenhum módulo adicional para o módulo exif.
      </simpara>
     </note>
    </para>
   </section>

   &reference.image.configure;

   &reference.image.ini;

   <section id="image.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.image.constants;

   <section id="image.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Criação de PNG com o PHP</title>
      <programlisting role="php">
<![CDATA[
<?php
    header("Content-type: image/png");
    $string = $_GET['text'];
    $im     = imagecreatefrompng("images/button1.png");
    $orange = imagecolorallocate($im, 220, 210, 60);
    $px     = (imagesx($im) - 7.5 * strlen($string)) / 2;
    imagestring($im, 3, $px, 9, $string, $orange);
    imagepng($im);
    imagedestroy($im);
?>
]]>
      </programlisting>
     </example>
     Este exemplo deve ser usado em uma página com uma tag como esta: &lt;img
     src=&quot;button.php?text=text&quot;&gt;. O script button.php acima
     pega a string &quot;text&quot; e coloca-a no topo de uma imagem base 
     que neste caso é &quot;images/button1.png&quot;
     e mostra a imagem resultante. Este é um meio conveniente de 
     evitar desenhar uma nova imagem de botão a cada vez que
     você quiser modificar o texto do botão. Com este metodo
     ele é dinamicamente gerado.
    </para>
   </section>
 </partintro>

&reference.image.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
