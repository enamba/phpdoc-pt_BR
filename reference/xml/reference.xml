<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-revision: 1.10 Maintainer: surfmax Status: ready -->
 <reference id="ref.xml">
  <title>XML parser functions</title>
  <titleabbrev>XML</titleabbrev>

  <partintro>

   <section id="xml.intro">
    &reftitle.intro;
    <para>
     XML (eXtensible Markup Language) é um formato de dados para intercâmbio de documentos na Web. Ele é um padrão definido pela
     The World Wide Web consortium (W3C).  Informações sobre XML e tecnologias
     relacionadas pode, ser encontradas em <ulink
     url="&url.xml;">&url.xml;</ulink>.
    </para>
    <para>
     Esta extensão do PHP implementa suporte para o James Clark's
     <productname>expat</productname> no PHP.  Esta ferramenta permite 
	 que você analise, mas não valide, documentos XML.  Ele suporta três
     source <link linkend="xml.encoding">character encodings</link>
     também fornecido pelo PHP: <literal>US-ASCII</literal>,
     <literal>ISO-8859-1</literal> e <literal>UTF-8</literal>.
     <literal>UTF-16</literal> não é suportado.
    </para>
    <para>
     Esta extensão te permite <link
     linkend="function.xml-parser-create">crear analisadores XML</link>
     e então definir <emphasis>(handlers)manipuladores</emphasis> para diferentes eventos 
	 XML. Cada analisador XML também tem alguns <link
     linkend="function.xml-parser-set-option">parâmetros</link> que você
     pode ajustar.
    </para>
   </section>

   <section id="xml.requirements">
    &reftitle.required;
    <para>
     Esta extensão utiliza o <productname>expat</productname>, que pode ser 
	 encontrado em <ulink url="&url.expat;">&url.expat;</ulink>. O 
     makefile que vem com o expat, por definição não constrói uma biblioteca,
	 você pode usar as regras de 'make' para isso:
     <programlisting role="makefile">
<![CDATA[
libexpat.a: $(OBJS)
    ar -rc $@ $(OBJS)
    ranlib $@
]]>
     </programlisting>
     Um pacote dos fontes RPM do expat podem ser encontrados em <ulink
     url="&url.expat.rpm;">&url.expat.rpm;</ulink>.
    </para>
   </section>

   &reference.xml.configure;

   <section id="xml.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="xml.resources">
    &reftitle.resources;
    <section id="xml.resources.xml">
     <title><literal>xml</literal></title>
     <para>
      O recurso <literal>xml</literal> enquanto retornado por
      <function>xml_parser_create</function> e
      <function>xml_parser_create_ns</function> refere-se a uma instância do analisador xml para ser usada coms as funções fornecidas por esta extensão.
     </para>
    </section>
   </section>

   &reference.xml.constants;

    <section id="xml.eventhandlers">
     <title>(handlers)manipuladores de Evento</title>
     <para>
      Os (handlers)manipuladores de eventos de XML definidos são:
      <table>
       <title>manipuladores XML suportados</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>função do PHP para definir o manipulador(handler)</entry>
          <entry>Descrição do evento</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><function>xml_set_element_handler</function></entry>
          <entry>
           Eventos elementares são emitidos toda vez que o analisador XML
           o início ou o fim das tags. Há (handler)manipuladores separadores para tags de
           início e tags de fim.
          </entry>
         </row>
         <row>
          <entry>
           <function>xml_set_character_data_handler</function>
          </entry>
          <entry>
           Dados de caractere são aproximadamente todo o conteúdo de 
           documentos XML, incluindo espaços em branco entre as tags. Note
           que o analisador XML não adiciona ou remove qualquer espaço em 
		   branco, ele está pronto para a aplicação se você decidir que espaços em branco são significativos.
          </entry>
         </row>
         <row>
          <entry>
           <function>xml_set_processing_instruction_handler</function>
          </entry>
          <entry>
           Programadores de PHP já estariam familiarizados com instruções de 
           processo (PIs).  &lt;?php ?&gt; é uma instrução de processo,
           onde <replaceable>php</replaceable> é chamada
           de o "PI target". O tratamento destes são
           application-specific, exceto que todos os PI targets iniciados
           com "XML" estão reservados.
          </entry>
         </row>
         <row>
          <entry><function>xml_set_default_handler</function></entry>
          <entry>
           O que não vai para outro (handler)manipulador vai para o manipulador padrão.
		   Você conseguirá coisas como o XML e declarações do tipo de documento
		   no manipulador padrão.
          </entry>
         </row>
         <row>
          <entry>
           <function>xml_set_unparsed_entity_decl_handler</function>
          </entry>
          <entry>
           Este manipulador será chamdo por uma declaração de um entity não
		   analisada (NDATA).
          </entry>
         </row>
         <row>
          <entry>
           <function>xml_set_notation_decl_handler</function>
          </entry>
          <entry>
           Este manipulador é chamado pela declaração de uma nota.
          </entry>
         </row>
         <row>
          <entry>
           <function>xml_set_external_entity_ref_handler</function>
          </entry>
          <entry>
           Este manipulador é chamado quando o analisador XML encontra uma referência para uma entity geral analizada externamente. Isto pode ser uma referência para um arquivo ou URL, por examplo.  Veja <link
           linkend="example.xml-external-entity">Um exemplo de entity
		   externa</link> para uma demonstração.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </para>
    </section>

    <section id="xml.case-folding">
     <title>Case Folding</title>
     <para>
      As funções de elementos do manipulador podem conseguir os nomes dos elementos
      <glossterm>case-folded</glossterm>.  Case-folding é definida pelo
      padrão XML como "um processo aplicado para uma sequência de caracateres,
      em que aqueles identificados como minúsculos são substituidos pelos seus 
      maiúsculos equivalentes". Em outras palavras, quando vai pro XML, case-folding 
      simplesmente significa mudar pra maiúsculas.
     </para>
     <para>
      Por definição, todos os nomed de elementos que são passados para as 
	  funções de manipulador são case-folded. Este comportamento pode ser
	  perguntado e controlado pelo analisador XML com o
      <function>xml_parser_get_option</function> e as funções
      <function>xml_parser_set_option</function>,
      respectivamente.
     </para>
    </section>

    <section id="xml.error-codes">
     <title>Error Codes</title>
     <para>
      As seguintes constantes são definidas para erros no código XML
	  (conforme retornado por <function>xml_parse</function>):
      <simplelist>
       <member>XML_ERROR_NONE</member>
       <member>XML_ERROR_NO_MEMORY</member>
       <member>XML_ERROR_SYNTAX</member>
       <member>XML_ERROR_NO_ELEMENTS</member>
       <member>XML_ERROR_INVALID_TOKEN</member>
       <member>XML_ERROR_UNCLOSED_TOKEN</member>
       <member>XML_ERROR_PARTIAL_CHAR</member>
       <member>XML_ERROR_TAG_MISMATCH</member>
       <member>XML_ERROR_DUPLICATE_ATTRIBUTE</member>
       <member>XML_ERROR_JUNK_AFTER_DOC_ELEMENT</member>
       <member>XML_ERROR_PARAM_ENTITY_REF</member>
       <member>XML_ERROR_UNDEFINED_ENTITY</member>
       <member>XML_ERROR_RECURSIVE_ENTITY_REF</member>
       <member>XML_ERROR_ASYNC_ENTITY</member>
       <member>XML_ERROR_BAD_CHAR_REF</member>
       <member>XML_ERROR_BINARY_ENTITY_REF</member>
       <member>XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF</member>
       <member>XML_ERROR_MISPLACED_XML_PI</member>
       <member>XML_ERROR_UNKNOWN_ENCODING</member>
       <member>XML_ERROR_INCORRECT_ENCODING</member>
       <member>XML_ERROR_UNCLOSED_CDATA_SECTION</member>
       <member>XML_ERROR_EXTERNAL_ENTITY_HANDLING</member>
      </simplelist>
     </para>
    </section>

    <section id="xml.encoding">
     <title>Codificação de Caracter</title>
     <para>
      A Extensão XML do PHP suporta o caracter <ulink
      url="&url.unicode;">Unicode</ulink> definido por
       <glossterm>character encoding</glossterm>s (codificação de caracteres)
	   diferentes. Há dois tipos de codificação de caracteres, <glossterm>source encoding</glossterm> e <glossterm> target encoding</glossterm>.
      A apresentação interna do PHP do documento é sempre codificada
      com <literal>UTF-8</literal>.
     </para>
     <para>
      Source encoding é feita quando um documento XML é <link
      linkend="function.xml-parse">analisado</link>. Em <link
      linkend="function.xml-parser-create"> criando um analisador
	  XML</link>, um source encoding pode ser especificado (Esta codificação 
      não poderá ser mudada após o tempo de vida do analisador XML). As
      codificações suportadas são <literal>ISO-8859-1</literal>,
      <literal>US-ASCII</literal> e <literal>UTF-8</literal>. O segundo
      são codificações single-byte, que significa que cada caractere é
	  representado por um  byte simples.
      <literal>UTF-8</literal> pode codificar caracteres compostos por
	  um número de bits variável (acima de 21) em um de seus 4 bytes. O
      source encoding padrão utilizado pelo PHP é
      <literal>ISO-8859-1</literal>.
     </para>
     <para>
      Target encoding é feito quando o PHP passa dados para as funções
	  do analisador XML. Quando um analisador XML é criado, o target encoding
      é definido igual ao source encoding, mas este pode ser mudado em qualquer 
      ponto. O target encoding afetará dados de caracter tão bem como nome de
	  tags e processando alvos da instrução.
     </para>
     <para>
      Se o analisador XML encontra caracteres de fora da linha que seu
      source encoding é capaz de detalhar, ele retornará um erro.  
     </para>
     <para>
      Se PHP encontra caracteres no documento XML analisado que não 
	  podem ser detalhados selecionados com target encoding, os caracteres com
	  problema serão "demoted". Atualmente, isto significa que tais caracteres serão substituidos por um sinal de interrogação.
     </para>
    </section>

   <section id="xml.examples">
    &reftitle.examples;
    <para>
     Aqui estão alguns exemplos de scripts PHP analisando documentos XML.
    </para>
    <section id="example.xml-structure">
     <title>Exemplo estruturado de elementos XML</title>
     <para>
      Este primeiro exemplo mostra a estrutura de elementos iniciais num
      documento com distanciamento da margem.
      <example>
       <title>Mostra estrutura do elemento XML </title>
       <programlisting role="php">
<![CDATA[
<?php
$file = "data.xml";
$depth = array();

function startElement($parser, $name, $attrs) {
    global $depth;
    for ($i = 0; $i < $depth[$parser]; $i++) {
        print "  ";
    }
    print "$name\n";
    $depth[$parser]++;
}

function endElement($parser, $name) {
    global $depth;
    $depth[$parser]--;
}

$xml_parser = xml_parser_create();
xml_set_element_handler($xml_parser, "startElement", "endElement");
if (!($fp = fopen($file, "r"))) {
    die("could not open XML input");
}

while ($data = fread($fp, 4096)) {
    if (!xml_parse($xml_parser, $data, feof($fp))) {
        die(sprintf("XML error: %s at line %d",
                    xml_error_string(xml_get_error_code($xml_parser)),
                    xml_get_current_line_number($xml_parser)));
    }
}
xml_parser_free($xml_parser);
?>
]]>
       </programlisting>
      </example>
     </para>
    </section>

    <section id="example.xml-map-tags">
     <title>Exemplo arrumação de Tag XML</title>
     <para>
      <example>
       <title>Arrumar XML to HTML</title>
       <para>
        Este exemplo arruma tags do documento XML diretamente para tags HTML.
         Elementos não encontrados no "array de arrumação" são ignorados. É claro,
		 este exemplo trabalhará apenas com um tipo de documento XML especifico.
       </para>
       <para>
        <programlisting role="php">
<![CDATA[
<?php
$file = "data.xml";
$map_array = array(
    "BOLD"     => "B",
    "EMPHASIS" => "I",
    "LITERAL"  => "TT"
);

function startElement($parser, $name, $attrs) {
    global $map_array;
    if ($htmltag = $map_array[$name]) {
        print "<$htmltag>";
    }
}

function endElement($parser, $name) {
    global $map_array;
    if ($htmltag = $map_array[$name]) {
        print "</$htmltag>";
    }
}

function characterData($parser, $data) {
    print $data;
}

$xml_parser = xml_parser_create();
// use case-folding so we are sure to find the tag in $map_array
xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, true);
xml_set_element_handler($xml_parser, "startElement", "endElement");
xml_set_character_data_handler($xml_parser, "characterData");
if (!($fp = fopen($file, "r"))) {
    die("could not open XML input");
}

while ($data = fread($fp, 4096)) {
    if (!xml_parse($xml_parser, $data, feof($fp))) {
        die(sprintf("XML error: %s at line %d",
                    xml_error_string(xml_get_error_code($xml_parser)),
                    xml_get_current_line_number($xml_parser)));
    }
}
xml_parser_free($xml_parser);
?>
]]>
        </programlisting>
       </para>
      </example>
     </para>
    </section>

    <section id="example.xml-external-entity">
     <title>Exemplo XML de Entity externa</title>
     <para>
      Este exemplo destaca o código XML. Ele ilusta como utilizar um 
	   analisador de referência a uma entity externa para incluir e 
	   analisar outros documentos, tão bem como PIs (instruções de 
	   processo) podem ser processadas, e uma forma de determinar 
       "trust" para PIs contendo códigos.
     </para>
     <para>
      Documentos XML que podem ser utilizados para este exemplo são encontrados 
	  abaixo do exemplo (<filename>xmltest.xml</filename> e
      <filename>xmltest2.xml</filename>.)
     </para>
     <para>
      <example>
       <title>Exemplo de Entity externa</title>
       <programlisting role="php">
<![CDATA[
<?php
$file = "xmltest.xml";

function trustedFile($file) {
    // only trust local files owned by ourselves
    if (!eregi("^([a-z]+)://", $file) 
        && fileowner($file) == getmyuid()) {
            return true;
    }
    return false;
}

function startElement($parser, $name, $attribs) {
    print "&lt;<font color=\"#0000cc\">$name</font>";
    if (sizeof($attribs)) {
        while (list($k, $v) = each($attribs)) {
            print " <font color=\"#009900\">$k</font>=\"<font 
                   color=\"#990000\">$v</font>\"";
        }
    }
    print "&gt;";
}

function endElement($parser, $name) {
    print "&lt;/<font color=\"#0000cc\">$name</font>&gt;";
}

function characterData($parser, $data) {
    print "<b>$data</b>";
}

function PIHandler($parser, $target, $data) {
    switch (strtolower($target)) {
        case "php":
            global $parser_file;
            // If the parsed document is "trusted", we say it is safe
            // to execute PHP code inside it.  If not, display the code
            // instead.
            if (trustedFile($parser_file[$parser])) {
                eval($data);
            } else {
                printf("Untrusted PHP code: <i>%s</i>", 
                        htmlspecialchars($data));
            }
            break;
    }
}

function defaultHandler($parser, $data) {
    if (substr($data, 0, 1) == "&" && substr($data, -1, 1) == ";") {
        printf('<font color="#aa00aa">%s</font>', 
                htmlspecialchars($data));
    } else {
        printf('<font size="-1">%s</font>', 
                htmlspecialchars($data));
    }
}

function externalEntityRefHandler($parser, $openEntityNames, $base, $systemId,
                                  $publicId) {
    if ($systemId) {
        if (!list($parser, $fp) = new_xml_parser($systemId)) {
            printf("Could not open entity %s at %s\n", $openEntityNames,
                   $systemId);
            return false;
        }
        while ($data = fread($fp, 4096)) {
            if (!xml_parse($parser, $data, feof($fp))) {
                printf("XML error: %s at line %d while parsing entity %s\n",
                       xml_error_string(xml_get_error_code($parser)),
                       xml_get_current_line_number($parser), $openEntityNames);
                xml_parser_free($parser);
                return false;
            }
        }
        xml_parser_free($parser);
        return true;
    }
    return false;
}

function new_xml_parser($file) {
    global $parser_file;

    $xml_parser = xml_parser_create();
    xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, 1);
    xml_set_element_handler($xml_parser, "startElement", "endElement");
    xml_set_character_data_handler($xml_parser, "characterData");
    xml_set_processing_instruction_handler($xml_parser, "PIHandler");
    xml_set_default_handler($xml_parser, "defaultHandler");
    xml_set_external_entity_ref_handler($xml_parser, "externalEntityRefHandler");
    
    if (!($fp = @fopen($file, "r"))) {
        return false;
    }
    if (!is_array($parser_file)) {
        settype($parser_file, "array");
    }
    $parser_file[$xml_parser] = $file;
    return array($xml_parser, $fp);
}

if (!(list($xml_parser, $fp) = new_xml_parser($file))) {
    die("could not open XML input");
}

print "<pre>";
while ($data = fread($fp, 4096)) {
    if (!xml_parse($xml_parser, $data, feof($fp))) {
        die(sprintf("XML error: %s at line %d\n",
                    xml_error_string(xml_get_error_code($xml_parser)),
                    xml_get_current_line_number($xml_parser)));
    }
}
print "</pre>";
print "parse complete\n";
xml_parser_free($xml_parser);

?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>xmltest.xml</title>
       <programlisting role="xml">
<![CDATA[
<?xml version='1.0'?>
<!DOCTYPE chapter SYSTEM "/just/a/test.dtd" [
<!ENTITY plainEntity "FOO entity">
<!ENTITY systemEntity SYSTEM "xmltest2.xml">
]>
<chapter>
 <TITLE>Título &plainEntity;</TITLE>
 <para>
  <informaltable>
   <tgroup cols="3">
    <tbody>
     <row><entry>a1</entry><entry morerows="1">b1</entry><entry>c1</entry></row>
     <row><entry>a2</entry><entry>c2</entry></row>
     <row><entry>a3</entry><entry>b3</entry><entry>c3</entry></row>
    </tbody>
   </tgroup>
  </informaltable>
 </para>
 &systemEntity;
 <section id="about">
  <title>Sobre este documento</title>
  <para>
   <!-- this is a comment -->
   <?php print 'Hi!  This is PHP version '.phpversion(); ?>
  </para>
 </section>
</chapter>
]]>
       </programlisting>
      </example>
     </para>
     <para>
      Este arquivo está incluido de <filename>xmltest.xml</filename>:
      <example>
       <title>xmltest2.xml</title>
       <programlisting role="xml">
<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE foo [
<!ENTITY testEnt "test entity">
]>
<foo>
   <element attrib="value"/>
   &testEnt;
   <?php print "This is some more PHP code being executed."; ?>
</foo>
]]>
       </programlisting>
      </example>
     </para>
    </section>
   </section>
  </partintro>

&reference.xml.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

