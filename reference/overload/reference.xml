<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.1 Maintainer: rarruda Status: ready -->
<!-- $Revision: 1.2 $ -->
 <reference id="ref.overload">
  <title>Object property and method call overloading</title>
  <titleabbrev>Object overloading</titleabbrev>

  <partintro id="overload.partintro">
   &warn.experimental;
   <para>
    O propósito desta extensão é permitir overload de propriedades
    de acesso e metodos de objetos. Somente uma função é definida
    nesta extensão, <function>overload</function> que recebe o
    nome da classe que deve ter esta funcionalidade habilitada.
    A classe especificada tem que definir os metodos para
    ter esta funcionalidade: <literal>__get()</literal>,
    <literal>__set()</literal> and <literal>__call()</literal>
    respectivamente para get/set as propriedades, ou chamar um metodo.
    Desta forma o overloading pode ser seletivo. Dentro destas funções
    o overloading é disabilitado de forma que você possa acessar 
    propriedades do objeto normalmente.
   </para>
   <para>
    Alguns exemplos simples da utilização da função
    <function>overload</function>
    <example>
     <title>Overload de uma classe no PHP</title>
     <programlisting role="php">
<![CDATA[
<?php

class OO
{
    var $a = 111;
    var $elem = array('b' => 9, 'c' => 42);

    // Metodo callback para pegar uma propriedade
    function __get($prop_name, &$prop_value)
    {
        if (isset($this->elem[$prop_name])) {
            $prop_value = $this->elem[$prop_name];
            return true;
        } else {
            return false;
        }
    }

    // Metodo callback para definir uma propriedade
    function __set($prop_name, $prop_value)
    {
        $this->elem[$prop_name] = $prop_value;
        return true;
    }
}

// Aqui nós é feito o overload do objeto OO
overload('OO');

$o = new OO;
print "\$o->a: $o->a\n"; // print: $o->a:
print "\$o->b: $o->b\n"; // print: $o->b: 9
print "\$o->c: $o->c\n"; // print: $o->c: 42
print "\$o->d: $o->d\n"; // print: $o->d:

// adicionar um novo intem para o array $elem em OO
$o->x = 56; 

// iniciar stdclass (é integrada no PHP 4)
// $var não é overloaded!
$val = new stdclass;
$val->prop = 555;

// Que "a" seja um array com o objeto $val dentro dele
// mas __set() o colocará no array $elem
$o->a = array($val);
var_dump($o->a[0]->prop);

?>
]]>
     </programlisting>
    </example>
   </para>
   <warning>
    <para>
     Como esta é uma extensão experimental, nem todas 
     as coisas funcionam. Não existe ainda suporte para
     <literal>__call()</literal> e você somente pode
     fazer overload das operações get e set para
     propriedades. Você não pode invocar as chamadas
     originais da classe (antes de terem sido overloaded),
     e <literal>__set()</literal> somente funciona
     até um nível de acesso de propriedades.
    </para>
   </warning>
  </partintro>

&reference.overload.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

