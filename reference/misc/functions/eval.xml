<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.7 Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/misc.xml, last change in rev 1.58 -->
  <refentry xml:id="function.eval" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>eval</refname>
    <refpurpose>Executa uma string como código PHP</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>mixed</type><methodname>eval</methodname>
      <methodparam><type>string</type><parameter>code_str</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     A função <function>eval</function> executa a string dada no parâmetro
     <parameter>code_str</parameter> como código PHP. Entre outras coisas,
      isto pode ser útil para guardar código em um campo de texto de um banco de dados para execução posterior.
     </simpara>
    <simpara>
    Há alguns fatores para lembrar quando usar
     <function>eval</function>. Lembre-se que a string passada deve ser código
     PHP valido, incluindo coisas como terminar os comandos com ponto-e-vírgula
     assim o compilador não morre uma linha após
     <function>eval</function>, escapar as coisas propriamente em
     <parameter>code_str</parameter>.
    </simpara>
    <simpara>
    Também se lembre que as variáveis que tenham seus valores em
     <function>eval</function> irão reter estes valores para o resto do script.
    </simpara>
    <simpara>
     Um comando <literal>return</literal> irá terminar a execução do script imediatamente
     No PHP 4, <function>eval</function> retorna
     &null; a menos que <function>return</function> seja chamado no código executado,
     caso no qual o valor passado para <function>return</function> é retornado.
     No PHP 3, <function>eval</function> não retorna um valor.
    </simpara>
    <para>
     <example>
      <title>Exemplo
       <function>eval</function>
       </title>
      <programlisting role="php">
<![CDATA[
<?php
$string = 'taça';
$name = 'café';
$str = 'Esta é uma $string com o meu $name nela.';
echo $str. "\n";
eval("\$str = \"$str\";");
echo $str . "\n";
?>
]]>
      </programlisting>
      <para>
       O exemplo acima irá mostrar
      </para>
       <screen>
<![CDATA[
Esta é uma $string com o meu $name nela.
Esta é uma taça com o meu café nela.
]]>
       </screen>
     </example>
    </para>
    &tip.ob-capture;
    <para>
     Veja também <function>call_user_func</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
