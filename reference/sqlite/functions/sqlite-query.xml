<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: fernandoc Status: ready -->
<refentry id="function.sqlite-query">
 <refnamediv>
  <refname>sqlite_query</refname>
  <refpurpose>
   Executa uma query em um banco de dados e retorna um conjunto de resultados.
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descrição</title>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
  </methodsynopsis>
  <para>
   Executa uma SQL indicada pelo parâmetro <parameter>query</parameter> com
   um banco de dados (especificado pelo parâmetro <parameter>dbhandle</parameter>).
  </para>
  <para>
   Para query que retornam linhas, esta função irá retornar um result handle
   que pode ser usado em funções como
   <function>sqlite_fetch_array</function> e
   <function>sqlite_seek</function>.
  </para>
  <para>
   Para outros tipos de query, esta função irá retornar um resultado booleano;
   &true; para sucesso ou &false; para falha.
  </para>
  <para>
   Qualquer que seja o tipo da query, esta função irá retornar &false; se
   houver uma falha.
  </para>
  <para>
   <function>sqlite_query</function> retorna um resultado guardado em buffer e navegavel. 
   Isto é util para query pequenas aonde você necessita acessar de forma aleatória as linhas.
   Resultados guardados em buffer irão alocar memoria para guardar todo o resultado e não irão
   retornar até que todo o resultado tenha sido retornado. Se você necessita apenas acesso
   sequencial aos dados, é recomendado que você use ao invés a função
   <function>sqlite_unbuffered_query</function> que é muito mais rapida.
  </para>
  <note>
   <simpara>
    Duas maneiras alternativas são suportadas para compatibilidade com outros bancos de 
    dados(como o MySQL). A forma preferida é a primeira, aonde o parâmetro
    <parameter>db</parameter> é o primeiro na função.
   </simpara>
  </note>
  <warning>
   <simpara>
    SQLite <emphasis>irá</emphasis> executar multiplas query separadas por
    ponto e virgula, assimvocê pode executar um lote de SQL que você tenha
    carregado de um arquivo ou colocado em um script. Entretando, isto funciona apenas
    quando o resultado de uma função não é usado - se for usado,
    apenas o primeiro comando SQL será executado. A função 
    <function>sqlite_exec</function> irá sempre executar multiplos
    comandos SQL. 
   </simpara>
   <simpara>
    Quando executar multiplas query o valor de retorno desta função será
    &false; se houver um erro, mas indefinido em outro caso (pode ser
    &true; para sucesso ou retornar um conjunto de resultados).
   </simpara>
  </warning>
  <para>
   Veja também <function>sqlite_unbuffered_query</function> e
   <function>sqlite_array_query</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
