<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: fernandoc Status: ready -->
<refentry id="function.sqlite-create-aggregate">
 <refnamediv>
  <refname>sqlite_create_aggregate</refname>
  <refpurpose>Registra uma função agregada UDF para usar em SQLs</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descrição</title>
  <methodsynopsis>
   <type>bool</type><methodname>sqlite_create_aggregate</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>step_func</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>finalize_func</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_create_aggregate</function> é similar a
   <function>sqlite_create_function</function> com a diferença que registra funções que
   podem ser usadas para calcular um resultado através de todas
   as linhas de uma query.
  </para>
  <para>
   A diferença chave entre esta função e 
   <function>sqlite_create_function</function> é que duas funções são requeridas
   para gerenciar a agregada; <parameter>step_func</parameter> é
   executada para cada linha do conjunto de resultados. Sua função PHP
   deve acumular o resultado e guardar no contexto da agregação.
   Uma vez que todas as linhas tenham sido processadas,
   <parameter>finalize_func</parameter> será chamada e deve então
   pegar os dados do contexto de agregação e então retornar o resultado.
  </para>
  <para>
   <example>
    <title>Exemplo de agregação</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$dbhandle = sqlite_open(':memory:');
sqlite_query($dbhandle, "CREATE TABLE strings(a)");
foreach ($data as $str) {
    $str = sqlite_escape_string($str);
    sqlite_query($dbhandle, "INSERT INTO strings VALUES ('$str')");
}

function max_len_step(&$context, $string) 
{
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
}

function max_len_finalize(&$context) 
{
    return $context;
}

sqlite_create_aggregate($dbhandle, 'max_len', 'max_len_step', 'max_len_finalize');

var_dump(sqlite_array_query($dbhandle, 'SELECT max_len(a) from strings'));

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Neste exemplo, nós estamos criando uma função agregada que irá calcular
   o tamanho da maior string de uma das colunas da tabela.
   Para cada linha, <literal>max_len_step</literal> é executada e passado o
   parâmetro <parameter>context</parameter>. O parâmetro contexto é
   igual a qualquer outra variavel PHP e pode guardar uma matriz ou um objeto.
   Neste exemplo, nós estamos usando simplesmente para guardar o tamanho
   da maior string que nós vimos até aqui, se 
   <parameter>string</parameter> tiver um tamanho maior do que o máximo atual,
   nós atualizamos o contexto para guardar este novo tamanho máximo.
  </para>
  <para>
   Depois que todas as linhas tiverem sido processadas, SQLite chama a função
   <literal>max_len_finalize</literal> para determinar o resultado agregado.
   Aqui você pode fazer algum tipo de calculo baseado nos dados encontrados em
   <parameter>context</parameter>. No nosso exemplo simples,
   nós já calculamos o resultado de acordo com o progresso da query, então nós
   precisamos apenas retornar o valor de contexto.
  </para>
  <note>
   <para>
    O exemplo acima não irá funcionar corretamente se a coluna conter dados binários. 
    De uma olhada na pagina do manual para a função <function>sqlite_udf_decode_binary</function> 
    para uma explicação do porque é assim, e um exemplo de como fazer respeitar
    a codificação binária.
   </para>
  </note>
  <tip>
   <para>
    NÃO é recomendado que você guarde uma copia dos valores no contexto
    e então processe no final, já que você pode fazer com que o SQLite use uma
    grande quantidade de memória para processar a query - pense quanta memória
    você vai necessitar se tiver um milhão de linhas, cada uma contendo uma string de 32 bytes de
    tamanho.
   </para>
  </tip>
  <tip>
   <para>
    Você pode usar <function>sqlite_create_function</function> e
    <function>sqlite_create_aggregate</function> para sobrescrever as funções
    nativas de SQL do SQLite.
   </para>
  </tip>
  <para>
   Veja também <function>sqlite_create_function</function>,
   <function>sqlite_udf_encode_binary</function> e
   <function>sqlite_udf_decode_binary</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
