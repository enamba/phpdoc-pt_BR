<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.5 Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/mysql.xml, last change in rev 1.27 -->
  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname>
    <refpurpose>
     Busca o resultado de uma linha e o coloca como uma matriz associativa, matriz numérica ou ambas.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>array</type><methodname>mysql_fetch_array</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>
        result_type
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     Retorna uma matriz que corresponde a linha buscada, ou &false; 
     se não houverem mais linhas.</para>
    <para>
     <function>mysql_fetch_array</function> é uma versão extendida de 
     <function>mysql_fetch_row</function>. Além de guardar os dados em um indice numérico na matriz, 
     também guarda os dados em índices associativos, usando o nome do campo como chave.
    </para>
    <para>
     Se duas ou mais colunas do resultado tiverem o mesmo nome do campo,
     a ultima coluna terá precedencia. Para acessar as outras coluna(s) com o mesmo nome, 
     você deve usar o índice numérico da coluna ou 
     fazer um apelido para a coluna. Para colunas com apelido, você não pode 
     acessar os conteúdos com o nome original da coluna (usando
     <literal>'field'</literal> neste exemplo).
     <example>
      <title>Query com nomes de campo duplicados</title>
      <programlisting role="sql">
<![CDATA[
select table1.field as foo table2.field as bar from table1, table2
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Uma coisa importante para notar é que usar
     <function>mysql_fetch_array</function> <emphasis>não é 
     significativamente</emphasis> mais lenta do que usar
     <function>mysql_fetch_row</function>, enquanto que produz um resultado 
     melhor de se usar.
    </para>
    <para>
     O segundo argumento, que é opcional, <parameter>result_type</parameter>
     em <function>mysql_fetch_array</function> é uma constante que pode ter 
     os seguintes valores: MYSQL_ASSOC, MYSQL_NUM, and
     MYSQL_BOTH. Isto foi adicionado no PHP 3.0.7. MYSQL_BOTH
     é o padrão para este argumento.
    </para>
    <para>
     Usando MYSQL_BOTH, você terá uma matriz com os índices associativos e numéricos. 
     Usando MYSQL_ASSOC, você terá apenas os índices associativos 
     (como funciona <function>mysql_fetch_assoc</function>),
     usando MYSQL_NUM, você terá apenas os índices numéricos (como
     funciona <function>mysql_fetch_row</function>).
    </para>
    <example>
     <title>mysql_fetch_array com MYSQL_NUM</title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Não pude conectar");
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_NUM)) {
        printf ("ID: %s  Name: %s", $row[0], $row[1]);  
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>mysql_fetch_array com MYSQL_ASSOC</title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("could not connect");
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
        printf ("ID: %s  Name: %s", $row["id"], $row["name"]);
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>mysql_fetch_array com MYSQL_BOTH</title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Não pude conectar");
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {
        printf ("ID: %s  Name: %s", $row[0], $row["name"]);
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <para>
     Para maiores detalhes, veja também
     <function>mysql_fetch_row</function> e
     <function>mysql_fetch_assoc</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
