<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.23 Maintainer: rafael Status: ready -->
<!-- Purpose: xml -->
<!-- Membership: bundled, external -->

 <reference xml:id="ref.simplexml" xmlns="http://docbook.org/ns/docbook">
  <title>SimpleXML</title>
  <titleabbrev>SimpleXML</titleabbrev>

  <partintro>
   <section xml:id="simplexml.intro">
    &reftitle.intro;
    <para>
     O SimpleXML provê um conjunto de ferramentas muito fácil e simples
     de usar para converter XML em objetos que podem ser processados
     normalmente com seletores de propriedades e iteradores de arrays.
    </para>
   </section>
   
   <section xml:id="simplexml.requirements">
    &reftitle.required;
    <para>
     A extensão SimpleXML requer PHP 5.
    </para>
   </section>

   &reference.simplexml.configure;   
 
   <section xml:id="simplexml.examples">
    &reftitle.examples;
    <para>
     Muitos exemplos vistos aqui requerem uma string XML. Ao invés de ficar repetindo
     esta string em cada exemplo, vamos colocá-la em um arquivo que iremos incluir
     em cada exemplo. Este arquivo é mostrado no exemplo a seguir.
     Porém, você pode criar um document XML e lê-lo utilizando <function>simplexml_load_file</function>.
    </para>
    <para>
     <example>
      <title>Arquivo examplp.php com uma string XML</title>
      <programlisting role="php" xml:id="simplexml.examples.movie">
<![CDATA[
<?php
$xmlstr = <<<XML
<?xml version='1.0' standalone='yes'?>
<movies>
 <movie>
  <title>PHP: Behind the Parser</title>
  <characters>
   <character>
    <name>Ms. Coder</name>
    <actor>Onlivia Actora</actor>
   </character>
   <character>
    <name>Mr. Coder</name>
    <actor>El Actor</actor>
   </character>
  </characters>
  <plot>
   So, this language. It's like, a programming language. Or is it a
   scripting language? All is revealed in this thrilling horror spoof
   of a documentary.
  </plot>
  <great-lines>
   <line>PHP solves all my web problems</line>
  </great-lines>
  <rating type="thumbs">7</rating>
  <rating type="stars">5</rating>
 </movie>
</movies>
XML;
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     A simplicidade do SimpleXML aparece mais claramente quando extraímos uma
     string ou um número de um documento XML básico.
     <example>
      <title>Otendo <literal>&lt;plot&gt;</literal></title>
      <programlisting role="php"><![CDATA[
<?php
include 'examplo.php';

$xml = new SimpleXMLElement($xmlstr);

echo $xml->movie[0]->plot; // "So this language. It's like..."
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     A tarefa de acessar elementos de dentro de um documento XML que contêm caractéres não permitidos
     pela a convenção de nomes do PHP (por exemplo, o hífen) pode ser feita encapsulando o elemento
     com chaves e apóstrofos.
     <example>
      <title>Obtendo <literal>&lt;line&gt;</literal></title>
      <programlisting role="php">
<![CDATA[
<?php
include 'examplo.php';

$xml = new SimpleXMLElement($xmlstr);

echo $xml->movie->{'great-lines'}->line; // "PHP solves all my web problems"
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Acessando elementos não-únicos no SimpleXML</title>
      <simpara>
       Caso existam nós filhos com nomes iguais dentro de um mesmo nó pai, aplica-se
       a iteração normal.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'examplo.php';

$xml = new SimpleXMLElement($xmlstr);

/* Para cada nó <movie>, nós imprimimos um <plot> diferente. */
foreach ($xml->movie as $movie) {
   echo $movie->plot, '<br />';
}

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Utilizando atributos</title>
      <simpara>
       Até agora, só cobrimos o trabalho de ler o nome dos elementos e os seus valores.
       SimpleXML pode também acessar o atributo dos elementos. Acessar os atributos de
       um elemento é tão simples quando acessar os atributos de uma <type>array</type>.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'examplo.php';

$xml = new SimpleXMLElement($xmlstr);

/* Acessa os nós <rating> do primeiro filme.
 * Mostra a escala do Rating também. */
foreach ($xml->movie[0]->rating as $rating) {
    switch((string) $rating['type']) { // Get attributes as element indices
    case 'thumbs':
        echo $rating, ' thumbs up';
        break;
    case 'stars':
        echo $rating, ' stars';
        break;
    }
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Comparando elementos e atributos com texto</title>
      <simpara>
       Para comparar um elemento ou atributo com uma string ou passar para uma função que
       requer uma string, você deve converter para uma string utilizando
       <literal>(string)</literal>. De outra forma, o PHP irá tratar este elemento como um objeto.
      </simpara>
      <programlisting role="php"><![CDATA[
<?php     
include 'examplo.php';

$xml = new SimpleXMLElement($xmlstr);

if ((string) $xml->movie->title == 'PHP: Behind the Parser') {
    print 'My favorite movie.';
}

htmlentities((string) $xml->movie->title);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Utilizando XPath</title>
      <simpara>
       SimpleXML possui suporte a <acronym>XPath</acronym> embutido.
       Para encontrar todos os elementos <literal>&lt;character&gt;</literal>:
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'examplo.php';
$xml = new SimpleXMLElement($xmlstr);

foreach ($xml->xpath('//character') as $character) {
    echo $character->name, 'played by ', $character->actor, '<br />';
}
?>
]]>
      </programlisting>
      <simpara>
       '<literal>//</literal>' serve como uma wildcard. Para especificar um caminho
       absoluto, basta omitir uma das barras.
      </simpara>
     </example>
    </para>
    <para>
     <example>
      <title>Atribuindo valores</title>
      <simpara>
       Dados no SimpleXML não precisam ser constantes, necesseariamente. O objeto permite
       a manipulação de todos os seus elementos.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'examplo.php';
$xml = new SimpleXMLElement($xmlstr);

$xml->movie[0]->characters->character[0]->name = 'Miss Coder';

echo $xml->asXML();
?>
]]>
      </programlisting>
      <simpara>
       O código acima irá mostrar um novo documento XML, como o original,
       exceto que o novo irá trocar Ms. Coder por Miss Coder.
      </simpara>
     </example>
    </para>
    <para>
     <example>
      <title>Adicionando elementos e atributos</title>
      <simpara>
       Desde o PHP 5.1.3, SimpleXML possui a habilidade de adicionar
       atributos e nós filhos facilmente.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'examplo.php';
$xml = new SimpleXMLElement($xmlstr);

$character = $xml->movie[0]->characters->addChild('character');
$character->addChild('name', 'Mr. Parser');
$character->addChild('actor', 'John Doe');

$rating = $xml->movie[0]->addChild('rating', 'PG');
$rating->addAttribute('type', 'mpaa');

echo $xml->asXML();
?>
]]>
      </programlisting>
      <simpara>
       O código acima irá mostrar um documento XML baseado no original, mas contendo
       um novo personagem e um novo rating.
      </simpara>
     </example>
    </para>
    <para>
     <example>
      <title>Interoperabilidade DOM</title>
      <simpara>
       PHP possui um mecanismo para converter nós XML entre os formatos SimpleXML e DOM.
       Este exemplo mostra como mudar um elemento DOM para SimpleXML.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
$dom = new domDocument;
$dom->loadXML('<books><book><title>blah</title></book></books>');
if (!$dom) {
     echo 'Erro ao interpretar o documento';
     exit;
}

$s = simplexml_import_dom($dom);

echo $s->book[0]->title;
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.simplexml.entities.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

