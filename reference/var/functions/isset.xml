<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.11 Maintainer: kappu Status: ready -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.2 -->
  <refentry id="function.isset">
   <refnamediv>
    <refname>isset</refname>
    <refpurpose>Informa se a variável foi iniciada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>bool</type><methodname>isset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><parameter>...</parameter></methodparam>
     </methodsynopsis>

    <simpara>
     Retorna &true; se <parameter>var</parameter> existir; &false; senão.
    </simpara>
    <para>
     Se a variável for destruída com <function>unset</function>, ela não existirá
     mais. <function>isset</function> retornará
     &false; se for usada em uma variável com o valor &null;. Lembrando
     que no PHP um byte &null; (<literal>"\0"</literal>) é diferente da
     constante &null;.
    </para>
    <note>
     <title>Alerta</title>
     <para>
      <function>isset</function> só trabalha com variáveis, qualquer outra coisa passada
      como parâmetro resultará em um erro de sintaxe (parse error).  Para testar
      <link linkend="language.constants">constants</link> você deverá usar a
      função <function>defined</function>.
     </para>
    </note>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$var = '';

// Será interpretado como &true; imprimindo o texto.
if (isset($var)) {
    print "Essa variável existe.";
}

// No próximo exemplo será usado var_dump para mostrar
// o valor de retorno de isset().

$a = "teste";
$b = "outrotest";

var_dump( isset($a) );      // TRUE
var_dump( isset ($a, $b) ); // TRUE

unset ($a);

var_dump( isset ($a) );     // FALSE
var_dump( isset ($a, $b) ); // FALSE

$foo = NULL;
var_dump( isset ($foo) );   // FALSE

?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Isto também serve para chaves associativas de matrizes:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$a = array ('test' => 1, 'hello' => NULL);

var_dump( isset ($a['test']) );            // TRUE
var_dump( isset ($a['foo']) );             // FALSE
var_dump( isset ($a['hello']) );           // FALSE

// A chave 'hello' é igual a NULL sendo considerada como inexistente
// Se quiser verificar o valor NULL da chave tente:
var_dump( array_key_exists('hello', $a) ); // TRUE

?>
]]>
      </programlisting>
     </informalexample>
    </para>

    &note.language-construct;

    <simpara>
     Veja mais em <function>empty</function>,
     <function>unset</function>,
     <function>defined</function>,
     <link linkend="types.comparisons">Tabela de comparação de tipos</link>,
     <function>array_key_exists</function>,
     e controle o operador de controle erro
     <link linkend="language.operators.errorcontrol">@</link>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
