<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: kappu Status: ready -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.2 -->
  <refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Destrói a variável especificada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><parameter>...</parameter></methodparam>
     </methodsynopsis>

    <para>
     <function>unset</function> destrói a variável especificada. Lembrando que
     no PHP 3, <function>unset</function> sempre retornará &true;
     (atualmente, o valor inteiro 1). No PHP 4, porém,
     <function>unset</function> não é uma função verdadeira: agora é um
     construtor da linguagem. Como tal, nenhum valor é retornado, se tentar pegar
     o valor de <function>unset</function> um erro de sintaxe (parse error)
     irá acontecer.
    </para>
    <para>
     <example>
      <title>Exemplo de <function>unset</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// destrói uma única variável
unset ($foo);

// destrói um único elemento de uma matriz
unset ($bar['quux']);

// destrói mais de uma variável
unset ($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     O comportamento de <function>unset</function> pode variar dentro de
     uma função dependendo do tipo de variável que você está tentando
     destruir.
    </para>
    <para>
     Se utilizar <function>unset</function> em uma variável global dentro de
     uma função, somente a variável local será destruída.  A variável
     no ambiente que foi chamada terá o mesmo valor como antes da execução de
     <function>unset</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo() {
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
      </programlisting>
     </informalexample>
     O exemplo acima deve mostrar:
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Se a variável for passada por referencia e a função
     <function>unset</function> estiver dentro de uma função, apenas a variável
     local será destruída. A variável no ambiente que chamou a função onde esta
     <function>unset</function> irá manter o mesmo valor de antes da
     utilização de <function>unset</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar) {
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
     </informalexample>
     O exemplo acima deve mostrar:
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Se for utilizado <function>unset</function> com uma variável estática
     dentro de uma função, <function>unset</function> destrói a variável e
     todas as suas referencias.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() {
    static $a;
    $a++;
    echo "$a\n";
    unset($a);
}

foo();
foo();
foo();
?>
]]>
      </programlisting>
     </informalexample>
    O exemplo acima deve mostrar:
     <informalexample>
      <screen>
<![CDATA[
1
2
3
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Se você quiser usar a função <function>unset</function> com uma variável
     global dentro de uma função, você poderá usar a matriz 
     <varname>$GLOBALS</varname> para faze-lo:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() {
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>

    &note.language-construct;

    <para>
     Veja mais em <function>isset</function>,
     <function>empty</function> e
     <function>array_splice</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
