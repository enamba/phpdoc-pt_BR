<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.10 Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/info.xml, last change in rev 1.51 -->
  <refentry id="function.assert">
   <refnamediv>
    <refname>assert</refname>
    <refpurpose>Confere se uma afirmação é &false;</refpurpose>
   </refnamediv>

   <refsect1 role="description">
    &reftitle.description;
     <methodsynopsis>
      <type>bool</type><methodname>assert</methodname>
      <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>assert</function> se a afirmação
     <parameter>assertion</parameter> é falsa e toma a ação apropriada.
    </para>
    <para>
     Se o parâmetro <parameter>assertion</parameter> é dado como uma string ela
     será avaliada como código PHP pela função <function>assert</function>.
     As vantagens da  string <parameter>assertion</parameter> são menor sobrecarga
     quando conferir se a afirmação é verdadeira e mensagens contendo
     <parameter>assertion</parameter> quando a afirmação é falsa. Isto indica que se 
     você passar uma condição booleana(verdadeiro ou falso) como
     <parameter>assertion</parameter> esta condição não será mostrado como parâmetro
     da função de afirmação, o qual você deve ter definido com a função
     <function>assert_options</function>, a condição é convertida para uma string antes
     que a função gerenciadora seja chamada e o booleano &false;
     é convertido para uma string vazia.
    </para>
    <para>
     Afirmações devem ser usadas apenas com a intenção de eliminar erros. Você deve usa-las
     para testar condições que devam ser sempre &true; e que indiquem algum erro de programação
     se não for ou para verificar a existência de certas coisas como a disponibilidade de funções
     de algum módulo ou limites e recursos do sistema.
    </para>
    <para>
     Afirmações não devem ser usadas para operações em tempo de execução normais como para
     conferir certo valor de entrada. Como uma dica de uso, o seu código deve funcionar
     corretamente mesmo que o teste de afirmações não esteja ativado.
    </para>
    <para>
     O funcionamento de <function>assert</function> pode ser configurado por
     <function>assert_options</function> ou pelas configurações descritas na pagina do
     manual para estas funções.
    </para>
    <para>
     A função <function>assert_options</function> e/ou a diretiva de configuração
     ASSERT_CALLBACK permitem configurar uma função para ser chamada no caso de
     falha da afirmação.
    </para>
    <para>
     Funções chamadas a partir de falhas de <function>assert</function> são particularmente 
     úteis quando estiver criando sistemas automáticos para testes porque permitem que você
     capture facilmente o código passado para a afirmação em conjunto com informações sobre
     onde a afirmação foi feita. Enquanto esta informação pode ser capturada por outros 
     métodos, usar afirmações torna muito mais fácil e rápido!
    </para>
    <para>
     A função utilizada para processar as afirmações devem aceitar três argumentos. O primeiro
     irá conter o arquivo onde houve a falha na afirmação. O segundo argumento irá conter a linha
     onde a afirmação falhou e o terceiro argumento irá conter  a expressão que falhou (se
     houver alguma - valores literais como 1 ou "dois" não serão passados por
     este argumento).
    </para>
   
  </refsect1>
  
  <refsect1 role="parameters">
   &reftitle.parameters;
   <para>
    <variablelist>
     <varlistentry>
      <term><parameter>assertion</parameter></term>
      <listitem>
       <para>
        A afirmação.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &false; se a afirmação for falsa, &true; se não.
  </para>
 </refsect1>

  <refsect1 role="examples">
  &reftitle.examples;
    <para> 
     <example>
      <title>Gerenciando uma afirmação que falhou com uma função do usuário</title>
      <programlisting role="php">
<![CDATA[
<?php
// Ativa as afirmações e as deixa quietas
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Cria a função do usuário que será chamada quando a afirmação falhar
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Afirmação falhou:
        Arquivo '$file'<br />
        Linha '$line'<br />
        Código '$code'<br /><hr />";
}

// Define a função
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

//  Faz uma afirmação que irá falhar
assert('mysql_query ("")');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
   
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
