<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: diogo Status: ready --><!-- CREDITS: narigone -->
<refentry xml:id="function.file-put-contents" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>file_put_contents</refname>
  <refpurpose>Escreve uma string para um arquivo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>file_put_contents</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esta função é idêntica à chamar <function>fopen</function>,
   <function>fwrite</function> e <function>fclose</function> sucessivamente
   para escrever dados em um arquivo.
  </para>
  <para>
   Se <parameter>filename</parameter> não existir, o arquivo é criado.
   Do contrário, o arquivo existente é sobrescrito, a não ser que
   a flag <constant>FILE_APPEND</constant> seja definida.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       O caminho para o arquivo onde escrever os dados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Os dados a serem escritos. Pode ser uma <type>string</type>, um
       <type>array</type> ou um recurso <type>stream</type> (explicado abaixo).
      </para>
    <para>
     Se <parameter>data</parameter> for um recurso <type>stream</type>, o
     buffer restante desse stream será copiado para o arquivo especificado,
     semelhante à utilização da <function>stream_copy_to_stream</function>.
    </para>
    <para>
     Você também pode especificar o parâmetro <parameter>data</parameter> como um
     array unidimensional. Isso é equivalente a
     <literal>file_put_contents($filename, implode('', $array))</literal>.
    </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       O valor de <parameter>flags</parameter> pode ser qualquer combinação das
       seguintes flags (com algumas restrições), unidas com o operador binário OR
       (<literal>|</literal>).
      </para>
      <para>
       <table>
        <title>Flags disponíveis</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Flag</entry>
           <entry>Descrição</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <constant>FILE_USE_INCLUDE_PATH</constant>
           </entry>
           <entry>
            Procura o arquivo <parameter>filename</parameter> nos diretórios de include.
            Veja <link linkend="ini.include-path">include_path</link> para mais
            informações.
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_APPEND</constant>
           </entry>
           <entry>
        Se o arquivo <parameter>filename</parameter> já existir, acrescenta
      os dados ao arquivo ao invés de sobrescrevê-lo.
           </entry>
          </row>
          <row>
           <entry>
            <constant>LOCK_EX</constant>
           </entry>
           <entry>
        Adquire um bloqueio exclusivo enquanto estiver escrevendo.
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_TEXT</constant>
           </entry>
           <entry>
        Os dados de <parameter>data</parameter> são escritos em modo texto.
      Se a semântica unicode estiver habilitada, o encoding padrão é UTF-8.
            Você pode especificar um encoding diferente criando um
      contexto personalizado ou alterando o encoding padrão utilizando
      <function>stream_default_encoding</function>. Esta flag não pode ser
      usada com <constant>FILE_BINARY</constant> e está disponível apenas
      a partir do PHP 6.
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_BINARY</constant>
           </entry>
           <entry>
            Os dados de <parameter>data</parameter> serão escritos em modo binário.
      Esta é a opção padrão e não pode ser utilizada com
            <constant>FILE_TEXT</constant>. Esta flag está disponível apenas a partir
      do PHP 6.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       Um recurso de contexto válido criado com
       <function>stream_context_create</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   A função retorna a quantidade de bytes que foi escrita no arquivo ou
   &false; em caso de falha.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.0.0</entry>
       <entry>
        Adicionado suporte a contexto
       </entry>
      </row>
      <row>
       <entry>5.1.0</entry>
       <entry>
      Adicionado suporte a <constant>LOCK_EX</constant> e a possibilidade de passar
    um recurso de stream para o parâmetro <parameter>data</parameter>
       </entry>
      </row>
      <row>
       <entry>6.0.0</entry>
       <entry>
      Adicionado suporte às flags <constant>FILE_TEXT</constant> e
        <constant>FILE_BINARY</constant>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  &tip.fopen-wrapper;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fopen</function></member>
    <member><function>fwrite</function></member>
    <member><function>file_get_contents</function></member>
    <member><function>stream_context_create</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
