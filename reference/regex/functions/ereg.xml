<?xml version="1.0" encoding="iso-8859-1"?>
<!-- En-Revision: 1.4 Maintainer: kappu Status: ready -->
<!-- splitted from ./en/functions/regex.xml, last change in rev 1.2 -->
  <refentry id="function.ereg">
   <refnamediv>
    <refname>ereg</refname>
    <refpurpose>Casando expressões regulares</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>bool</type><methodname>ereg</methodname>
      <methodparam><type>string</type><parameter>expressao</parameter></methodparam>
      <methodparam><type>string</type><parameter>variavel</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>registros</parameter></methodparam>
     </methodsynopsis>
    <note>
     <para>
      <function>preg_match</function>, você pode também utilizar as expressões
      regulares compátiveis com perl, uma alternativar veloz a função
      <function>ereg</function>.
     </para>
    </note>
    <simpara>
     Verifica se a <parameter>variavel</parameter> casa com a expressão
     regular definida em <parameter>expressao</parameter>.
    </simpara>
    <simpara>
     Se existirem parenteses de substrings na <parameter>expressao</parameter>
     e for passado o terceiro parâmetro <parameter>registros</parameter>
     para a fun&ccedil;&atilde;o, a execução guardará os elementos
     resultantes na matriz <parameter>registros</parameter>.
     $registros[1] irá conter a substring indicada pelo primeiro
     parenteses da esquerda; $registros[2] contém o segunda substring,
     e assim por diante. $registros[0] conterá uma cópia completa
     da variavel casada.
    </simpara>
    <note>
    <simpara>
     Nas versões superiores ao PHP 4.1.0 (inclusive) se você colocar exatamente dez elementos
     em <literal>$registros</literal>, ou até mesmo mais elementos, a express&atilde;o
     ser&aacute; executada. A quantidade n&atilde; causará efeitos a fun&ccedil;&atilde;o
     <function>ereg</function> que tem habilidade de suportar muitas substrings.
     Se a expressa&ccedil;&atilde; n&atilde;o casar, <literal>$registros</literal>
     n&atilde;o ser&aacute; alterada por <function>ereg</function>.
    </simpara>
    </note>
    <simpara>
     Localização sensível a maiúsculas e minúsculas (case sensitive).
    </simpara>
    <simpara>
     Retorna &true; se <parameter>string</parameter> casar
     com <parameter>pattern</parameter>, e &false se a
     expressão não casar ou se acontecer algum erro.
    </simpara>
    <para>
     O exemplo seguinte pega uma data no padrão ISO
     (AAAA-MM-DD) e imprime na no formato DD.MM.YYYY
     <example>
      <title>Exemplo da função <function>ereg</function></title>
      <programlisting role="php">
<![CDATA[
<?php
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $data, $registros)) {
    echo "$registros[3].$registros[2].$registros[1]";
} else {
    echo "Formato de data inválido: $data";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Veja mais em
     <function>eregi</function>,
     <function>ereg_replace</function>,
     <function>eregi_replace</function>,
     <function>preg_match</function>,
     <function>strpos</function>, and
     <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
