<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.2 Maintainer: lucasr Status: ready -->
<!-- splitted from ./pt_BR/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'array-multisort' in en/ tree in rev 1.11 -->
  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>Classifica m&uacute;ltiplos arrays ou multi-dimensionais</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descri&ccedil;&atilde;o</title>
     <methodsynopsis>
      <type>bool</type><methodname>array_multisort</methodname>
      <methodparam><type>array</type><parameter>ar1</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_multisort</function> pode ser usada para classificar
     v&aacute;rios arrays de uma vez ou apenas um array multi-dimensional de acordo com
     uma das dimens&otilde;es. A associa&ccedil;&atilde;o entre chaves e valores &eacute; mantida.
    </para>
    <para>
     Os arrays dados s&atilde;o tratados como colunas de uma tabela a ser 
     classificada pelas linhas - isso lembra a funcionalidade da cl&aacute;usula
     ORDER BY da SQL. O primeiro array &eacute; o principal na classifica&ccedil;&atilde;o. As
     linhas (valores) no primeiro array serve de base para a classifica&ccedil;&atilde;o do pr&oacute;ximo,
     e assim por diante.
    </para>
    <para>
     A estrutura de argumentos dessa fun&ccedil;&atilde;o n&atilde;o &eacute; muito normal, mas
     bastante flex&iacute;vel. O primeiro argmento de todos deve ser um array.
     Subsequentemente, cada argumento pode ser um array ou um dos sinais de
     classifica&ccedil;&atilde;o da lista a seguir.
    </para>
    <para>
     Sinais de ordem de classifica&ccedil;&atilde;o:
     <itemizedlist>
      <listitem>
       <simpara>SORT_ASC - classifica na ordem crescente</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_DESC - classifica na ordem descrescente</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Sinais de tipos de classifica&ccedil;&atilde;o:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - compara os elementos normalmente</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - compara os elementos como itens num&eacute;ricos</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - compara os elementos como strings</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     N&atilde;o podem existir dois sinais de classifica&ccedil;&atilde;o do mesmo tipo
     especificados depois de um mesmo array. Apenas um. Os sinais de classifica&ccedil;&atilde;o
     especificados depois de um array se aplicam apenas para esse array - a
     eles s&atilde;o atribu&iacute;dos por padr&atilde;o os valores SORT_ASC e SORT_REGULAR depois
     de cada novo argumento do tipo array.
    </para>
    <para>
     Retorna &true; se obtiver sucesso, &false;
     se falhar.
    </para>
    <para>
     <example>
      <title>Classificando m&uacute;ltiplos arrays</title>
      <programlisting role="php">
<![CDATA[
$ar1 = array ("10", 100, 100, "a");
$ar2 = array (1, 3, "2", 1);
array_multisort ($ar1, $ar2);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Nesse exemplo, depois da classifica&ccedil;&atilde;o, o primeiro array ter&aacute; 1-, "a",
     100, 100. O segundo conter&aacute; 1, 1, "2", 3. Os elementos do segundo array
     que correpondem aos do primeiro (100 e 100) tamb&eacute;m foram classificados.
    </para>
    <para>
     <example>
      <title>Classificando um array multi-dimensional</title>
      <programlisting role="php">
<![CDATA[
$ar = array (array ("10", 100, 100, "a"), array (1, 3, "2", 1));
array_multisort ($ar[0], SORT_ASC, SORT_STRING, 
                 $ar[1], SORT_NUMERIC, SORT_DESC);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Nesse exemplo, depois da classifica&ccedil;&atilde;o, o primeiro array ter&aacute; 10, 100,
     100, "a" (foi classificado como strings em ordem crescente), e o segundo
     conter&aacute; 1, 3, "2", 1 (classificado como n&uacute;meros, em ordem descrescente).
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
