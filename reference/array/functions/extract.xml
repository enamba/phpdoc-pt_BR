<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.4 Maintainer: lucasr Status: ready -->
<!-- splitted from ./pt_BR/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'extract' in en/ tree in rev 1.2 -->
  <refentry id="function.extract">
   <refnamediv>
    <refname>extract</refname>
    <refpurpose>
     Importa variáveis para a tabela de símbolos a partir de um array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>int</type><methodname>extract</methodname>
      <methodparam><type>array</type><parameter>var_array</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>extract_type</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>prefix</parameter></methodparam>
     </methodsynopsis>
    <para>
     Essa função é usada para importar variáveis a partir de um array para a tabela
     de símbolos corrente. Recebe o array associativo
     <parameter>var_array</parameter> e trata as suas chaves como
     os nomes das variáveis e os valores como valores das variáveis. 
     Para cada par chave/valor ele criará uma variável na tabela de símbolos
     corrente, seguindo os parâmetros
     <parameter>extract_type</parameter> e
     <parameter>prefix</parameter>.
    </para>
    <note>
     <para>
      Desde a versão 4.0.5 essa função retorna o número de variáveis
      extraídas.
     </para>
    </note>
    <para>
     <function>extract</function> checa se cada chave do array constitui um 
     nome de variável válido e por colisões com as variáveis já existentes na
     tabela de símbolos. O modo com que chaves inválidas ou númericas e colisões 
     são tratadas é determinado pelo argumento 
     <parameter>extract_type</parameter>. Esse argumento pode receber os
     seguintes valores:
     <variablelist>
      <varlistentry>
       <term>EXTR_OVERWRITE</term>
       <listitem>
        <simpara>
         Se houver uma colisão, sobrescreve a variável existente.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_SKIP</term>
       <listitem>
        <simpara>
         Se houver uma colisão, não sobrescreve a variável existente.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_SAME</term>
       <listitem>
        <simpara>Se houver uma colisão, adiciona um prefixo ao nome da
        variável definido pelo argumento 
        <parameter>prefix</parameter>.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_ALL</term>
       <listitem>
        <simpara>
         Adiciona um prefixo ao nome de todas as variáveis definido por 
         <parameter>prefix</parameter>. Desde o PHP 4.0.5 estão incluídos
         nomes numéricos.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_INVALID</term>
       <listitem>
        <simpara>
         Adiciona um prefixo definido por <parameter>prefix</parameter> apenas
         para variáveis como nomes inválidos ou numéricos. Essa opção foi adicionada no
         PHP 4.0.5.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_IF_EXISTS</term>
       <listitem>
        <simpara>
         Só sobrescreve a variável se ela já existe na tabela de símbolos 
         corrente, caso contrário, não faz nada. Isso é útil
         quando se quer definir uma lista de variáveis válidas e então
         extrair só as que foram definidas em $_REQUEST, por exemplo.
         Essa opção foi adicionada no PHP 4.2.0.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_IF_EXISTS</term>
       <listitem>
        <simpara>
         Só cria nomes de variáveis usando o prefixo se na tabela de símbolos
         já existe uma variável com o nome sem esse prefixo.
         Essa opção foi adicionada no PHP 4.2.0.
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Se <parameter>extract_type</parameter> não for especificado, é assumido
     o valor EXTR_OVERWRITE por padrão.
    </para>
    <para>
     Note que <parameter>prefix</parameter> só é necessário se
     <parameter>extract_type</parameter> for EXTR_PREFIX_SAME,
     EXTR_PREFIX_ALL, ou EXTR_PREFIX_INVALID, EXTR_PREFIX_INVALID ou
     EXTR_IF_EXISTS. Se o nome com o prefixo
     não for um nome de variável válido, ela não será importada para a tabela
     de símbolos.
    </para>
    <para>
     <function>extract</function> retorna o número de variáveis importadas
     com sucesso para a tabela de símbolos.
    </para>
    <para>
     Uma  possível utilização de <function>extract</function> e na importação de
     variáveis contidas num array associativo retornado pela função
     <function>wddx_deserialize</function>.
    </para>
    <para>
     <example>
      <title>Exemplo de <function>extract</function></title>
      <programlisting role="php">
<![CDATA[
<?php

/* Suponha que $var_array é um array retornado pela função
   wddx_deserialize */

$tamanho = "grande";
$var_array = array ("cor" => "azul",
                    "tamanho"  => "medio",
                    "forma" => "esfera");
extract ($var_array, EXTR_PREFIX_SAME, "wddx");

print "$cor, $tamanho, $forma, $wddx_tamanho\n";

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     O exemplo acima produziria:
     <programlisting>
<![CDATA[
azul, grande, esfera, medio
]]>
     </programlisting>
    </para>
    <para>
     O <varname>$tamanho</varname> não foi sobrescrito, porque
     nós especificamos EXTR_PREFIX_SAME, o que resultou na criação da variável 
     <varname>$wddx_tamanho</varname>.  Se EXTR_SKIP fosse
     utilizado, então $wddx_tamanho não seria criada.
     EXTR_OVERWRITE teria feito com que <varname>$tamanho</varname> tivesse
     o valor "medio", e EXTR_PREFIX_ALL resultaria em novas variáveis
     com os nomes <varname>$wddx_cor</varname>,
     <varname>$wddx_tamanho</varname>, e
     <varname>$wddx_forma</varname>.
    </para>
    <para>
     Você deve usar um array associativo, um array indexado numericamente não
     produzirá resultados.
    </para>
    <para>
     Veja também <function>compact</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
