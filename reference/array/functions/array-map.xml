<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.2 Maintainer: lucasr Status: ready -->
<!-- splitted from ./pt_BR/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'array-map' in en/ tree in rev 1.62 -->
  <refentry id="function.array-map">
   <refnamediv>
    <refname>array_map</refname>
    <refpurpose>
     Aplica uma fun&ccedil;&atilde;o em todos os elementos dos arrays dados
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descri&ccedil;&atilde;o</title>
     <methodsynopsis>
      <type>array</type><methodname>array_map</methodname>
      <methodparam><type>mixed</type><parameter>callback</parameter></methodparam>
      <methodparam><type>array</type><parameter>arr1</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>arr2...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_map</function> retorna um array contendo todos
     os elementos de <parameter>arr1</parameter> depois de aplicada
     a fun&ccedil;&atilde;o callback em cada um.  O n&uacute;mero de par&acirc;metros que a fun&ccedil;&atilde;o
     callback aceita deve coincidir com o n&uacute;mero de arrays passados para a
     <function>array_map</function>
    </para>
    <para>
     <example>
      <title>Exemplo de <function>array_map</function></title>
      <programlisting role="php">
<![CDATA[
function cubo($n) {
    return $n*$n*$n;
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cubo", $a);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Isso resultar&aacute; em <varname>$b</varname> contendo
     <literal>array (1, 8, 27, 64, 125);</literal>
    </para>
    <para>
     <example>
      <title><function>array_map</function> - usando mais arrays</title>
      <programlisting role="php">
<![CDATA[
function mostrar_Espanhol($n, $m) {
    return "O n&uacute;mero $n &eacute; chamado de $m na Espanha";
}

function map_Espanhol($n, $m) {
    return array ($n => $m);
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("mostrar_Espanhol", $a, $b);

print_r($c);

// mostrar&aacute;:
// Array 
// (
//     [0] => O n&uacute;mero 1 &eacute; chamado de uno na Espanha
//     [1] => O n&uacute;mero 2 &eacute; chamado de dos na Espanha
//     [2] => O n&uacute;mero 3 &eacute; chamado de tres na Espanha
//     [3] => O n&uacute;mero 4 &eacute; chamado de cuatro na Espanha
//     [4] => O n&uacute;mero 5 &eacute; chamado de cinco na Espanha
// )

$d = array_map("map_Espanhol", $a , $b);

print_r($d);

// will output:
// Array 
// (
//     [0] => Array
//         (
//             [1] => uno
//         )
// 
//     [1] => Array
//         (
//             [2] => dos
//         )
// 
//     [2] => Array
//         (
//             [3] => tres
//         )
// 
//     [3] => Array
//         (
//             [4] => cuatro
//         )
// 
//     [4] => Array
//         (
//             [5] => cinco
//         )
// 
// )
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Normalmente quando se usa dois ou mais arrays, eles devem ter o mesmo tamanho
     porque a fun&ccedil;&atilde;o callback &eacute; aplicada paralelamente aos elementos
     correpondentes.
     Se os arrays tem tamanhos diferentes, o menos array ser&aacute; extendido com
     elementos em branco.
    </para>
    <para>
     Um modo interessante de usar essa fun&ccedil;&atilde;o &eacute; na constru&ccedil;&atilde;o de um array de
     arrays, o que pode ser facilmente feito usando &null;
     como o nome da fun&ccedil;&atilde;o callback.
    </para>
    <para>
     <example>
      <title>Criando um array de arrays</title>
      <programlisting role="php">
<![CDATA[
$a = array(1, 2, 3, 4, 5);
$b = array("um", "dois", "tres", "quatro", "cinco");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = array_map(null, $a, $b, $c);
print_r($d);

// mostrar&aacute;:
// Array
// (
//     [0] => Array
//         (
//             [0] => 1
//             [1] => um
//             [2] => uno
//         )
// 
//     [1] => Array
//         (
//             [0] => 2
//             [1] => dois
//             [2] => dos
//         )
// 
//     [2] => Array
//         (
//             [0] => 3
//             [1] => tres
//             [2] => tres
//         )
// 
//     [3] => Array
//         (
//             [0] => 4
//             [1] => quatro
//             [2] => cuatro
//         )
// 
//     [4] => Array
//         (
//             [0] => 5
//             [1] => cinco
//             [2] => cinco
//         )
// 
// )
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Veja tamb&eacute;m <function>array_filter</function>,
     <function>array_reduce</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
