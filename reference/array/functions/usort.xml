<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.25 Maintainer: felipe Status: ready --><!-- CREDITS: lucasr -->
<!-- splitted from ./pt_BR/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'usort' in en/ tree in rev 1.2 -->
  <refentry xml:id="function.usort" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>Ordena um array pelos valores utilizando uma função de comparação
     definida pelo usuário</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>bool</type><methodname>usort</methodname>
      <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
      <methodparam><type>string</type><parameter>cmp_function</parameter></methodparam>
     </methodsynopsis>
    <para>
     Essa função irá ordenar um array pelos valores usando uma função de
     classificação definida pelo usuário. Se o array precisar ser ordenado 
     utilizando um critério não trivial, você deve usar essa função.
    </para>
    <para>
     A função de comparação deve retornar um inteiro menor, igual ou maior que
     zero se o primeiro argumento for considerado respectivamente menor,
     igual, ou maior que o segundo. 
     </para>  
      <para>  

     <note>
      <para>
       Se dois elementos são considerados iguais, a ordem deles fica
       indefinida no array resultante.
       Até o PHP 4.0.6 as funções definidas pelo usuário manteriam a ordem
       original desses elementos, mas com o novo algoritmo de ordenação
       introduzido no 4.1.0 esse não é o caso, pois não existe solução para
       fazer isso de modo eficiente.
      </para>
     </note>
    </para>
    &note.no-key-association;
    <para>
      &return.success;
    </para>
    <para>
     <example>
      <title>Exemplo de <function>usort</function></title>
      <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{   
    if ($a == $b) {
    return 0;
    }
    return ($a < $b) ? -1 : 1;
}

$a = array(3, 2, 5, 6, 1);

usort($a, "cmp");

foreach ($a as $key => $value) {
    echo "$chave: $valor\n";
}
?>
]]>
      </programlisting>
      &example.outputs;
    <screen>
<![CDATA[
0: 1
1: 2
2: 3
3: 5
4: 6
]]>
      </screen>  
       </example> 
    </para>
    <note>
     <para>
      Obviamente que nesse caso trivial a função <function>sort</function>
      seria mais apropriada.
     </para>
    </note>
    <para>
     <example>
      <title>
       Exemplo de <function>usort</function> usando um array multi-dimensional
      </title>
      <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{
    return strcmp($a["fruta"], $b["fruta"]);
} 

$frutas[0]["fruta"] = "limoes";
$frutas[1]["fruta"] = "abacaxis";
$frutas[2]["fruta"] = "goiabas";

usort($frutas, "cmp"); 

while (list($chave, $valor) = each($frutas)) {
    echo "\$frutas[$chave]: " . $valor["fruta"] . "\n";
}
?>
]]>
      </programlisting>
     <para>
     Na ordenação de um array multi-dimensional, <varname>$a</varname> e
     <varname>$b</varname> contém referências para o primeiro índice do array.
    </para>
    &example.outputs;
    <screen>
<![CDATA[
$fruits[0]: abacaxis
$fruits[1]: goiabas
$fruits[2]: limoes
]]>
     </screen>  
       </example>  
    </para>
    <para>
     <example>
      <title>
       Exemplo de <function>usort</function> usando uma função membro de um
       objeto 
      </title>
      <programlisting role="php">
<![CDATA[
<?php
class TestObj {
    var $name;

    function TestObj($name)
    {
        $this->name = $name;
    }

    /* Essa é a função estática de comparação */
    function cmp_obj($a, $b)
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) {
        return 0;
        }
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

usort($a, array ("TestObj", "cmp_obj"));

foreach ($a as $item) {
    echo $item->name . "\n";
}
?>
]]>
      </programlisting>
      &example.outputs;
    <screen>
<![CDATA[
b
c
d
]]>  
 </screen>
     </example>
    </para>

    <para>
     Veja também <function>uasort</function>,
     <function>uksort</function>, <function>sort</function>,
     <function>asort</function>,
     <function>arsort</function>,<function>ksort</function>,
     <function>natsort</function>, e <function>rsort</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
