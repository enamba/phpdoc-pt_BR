<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.2 Maintainer: lucasr Status: ready -->
<!-- splitted from ./pt_BR/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'usort' in en/ tree in rev 1.2 -->
  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     Classifica um array pelos valores utilizando uma fun&ccedil;&atilde;o de compara&ccedil;&atilde;o
     definida pelo usu&aacute;rio 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descri&ccedil;&atilde;o</title>
     <methodsynopsis>
      <type>void</type><methodname>usort</methodname>
      <methodparam><type>array</type><parameter>array</parameter></methodparam>
      <methodparam><type>string</type><parameter>cmp_function</parameter></methodparam>
     </methodsynopsis>
    <para>
     Essa fun&ccedil;&atilde;o ir&aacute; classificar um array pelos valores usando uma fun&ccedil;&atilde;o de
     classifica&ccedil;&atilde;o definida pelo usu&aacute;rio. Se o array precisar ser classificado
     utilizando um crit&eacute;rio n&atilde;o trivial, voc&ecirc; deve usar essa fun&ccedil;&atilde;o.
    </para>
    <para>
     A fun&ccedil;&atilde;o de compara&ccedil;&atilde;o deve retornar um inteiro menor, igual ou maior que
     zero se o primeiro argumento for considerado respectivamente menor,
     igual, ou maior que o segundo. Se dois elementos forem iguais, a ordem
     deles ser&aacute; indefinida.
    </para>
    <para>
     Tamb&eacute;m &eacute; poss&iacute;vel utilizar uma fun&ccedil;&atilde;o membro de um objeto como a fun&ccedil;&atilde;o
     de compara&ccedil;&atilde;o. Veja o exemplo 3 abaixo:
    </para>
    <para>
     <example>
      <title>Exemplo de <function>usort</function></title>
      <programlisting role="php">
<![CDATA[
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}

$a = array (3, 2, 5, 6, 1);

usort ($a, "cmp");

while (list ($chave, $valor) = each ($a)) {
    echo "$chave: $valor\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Esse exemplo mostraria:
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
0: 6
1: 5
2: 3
3: 2
4: 1
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Obviamente que nesse caso trivial a fun&ccedil;&atilde;o<function>rsort</function>
      seria mais apropriada.
     </para>
    </note>
    <para>
     <example>
      <title>
       Exemplo de <function>usort</function> usando um array multi-dimensional
      </title>
      <programlisting role="php">
<![CDATA[
function cmp ($a, $b) {
    return strcmp($a["fruta"], $b["fruta"]);
} 

$frutas[0]["fruta"] = "limoes";
$frutas[1]["fruta"] = "abacaxis";
$frutas[2]["fruta"] = "goiabas";

usort($frutas, "cmp"); 

while (list ($chave, $valor) = each ($frutas)) {
    echo "\$frutas[$chave]: " . $valor["fruta"] . "\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Na classifica&ccedil;&atilde;o de um array multi-dimensional, $a e $b cont&ecirc;m
     refer&ecirc;ncias para o primeiro &iacute;ndice do array.
    </para>
    <para>
     Esse exemplo mostraria:
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
$fruits[0]: abacaxis
$fruits[1]: goiabas
$fruits[2]: limoes
]]>
      </programlisting>
     </informalexample>
    </para>

    <para>
     <example>
      <title>
       Exemplo de <function>usort</function> usando uma fun&ccedil;&atilde;o membro de um
       objeto 
      </title>
      <programlisting role="php">
class TestObj {
    var $name;

    function TestObj($name)
    {
        $this->name = $name;
    }

    /* Essa &eacute; a fun&ccedil;&atilde;o est&aacute;tica de compara&ccedil;&atilde;o */
    function cmp_obj($a, $b)
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) return 0;
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

uasort($a, array ("TestObj", "cmp_obj"));

foreach ($a as $item) {
    print $item->name."\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     Esse exemplo mostraria:
    </para>
    <para>
     <informalexample>
      <programlisting>
b
c
d
      </programlisting>
     </informalexample>
    </para>
    <para>
     <warning>
      <para>
       
      </para>
     </warning>
    </para>
    <para>
     Veja tamb&eacute;m: <function>uasort</function>,
     <function>uksort</function>, <function>sort</function>,
     <function>asort</function>,
     <function>arsort</function>,<function>ksort</function>,
     <function>natsort</function>, e <function>rsort</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
