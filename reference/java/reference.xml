<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.15 Maintainer: narigone Status: ready -->
<!-- Purpose: remote.other -->
<!-- Membership: pecl, external -->
<!-- State: experimental -->

 <reference xml:id="ref.java" xmlns="http://docbook.org/ns/docbook">
  <title>Integração PHP / Java</title>
  <titleabbrev>Java</titleabbrev>
  <partintro>

   <section xml:id="java.intro">
    &reftitle.intro;
    <para>
     Existem duas maneira possíveis para integrar PHP com Java: você pode ou
     <link linkend="java.servlet">integrar o PHP a um ambiente Java Servlet
     </link>, que é a solução mais estável e eficiente, ou integrar suporte
     Java ao PHP. O primeiro está disponível por um módulo SAPI que faz
     a interface com o servidor Servlet, o outro faz isso por meio
     dessa extensão Java.
    </para>
    <para>
     A extensão Java prove meios simples e eficientes para criar e
     invocar métodos em objetos Java a partir do PHP. A JVM é criada usand JNI,
     e tudo roda no mesmo processo.
    </para>
    &warn.experimental;
   </section>

   <section xml:id="java.requirements">
    &reftitle.required;
    <para>
     Você precisa de uma Java VM instalada na sua máquina para usar essa extensão.
    </para>
   </section>

   &reference.java.configure;

   &reference.java.ini;

   <section xml:id="java.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section xml:id="java.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section xml:id="java.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Exemplo de Java</title>
      <programlisting role="php">
<![CDATA[
<?php
// get instance of Java class java.lang.System in PHP
$system = new Java('java.lang.System');

// demonstrate property access
echo 'Java version=' . $system->getProperty('java.version') . '<br />';
echo 'Java vendor=' . $system->getProperty('java.vendor') . '<br />';
echo 'OS=' . $system->getProperty('os.name') . ' ' .
             $system->getProperty('os.version') . ' on ' .
             $system->getProperty('os.arch') . ' <br />';

// java.util.Date example
$formatter = new Java('java.text.SimpleDateFormat',
                      "EEEE, MMMM dd, yyyy 'at' h:mm:ss a zzzz");

echo $formatter->format(new Java('java.util.Date'));
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Exemplo de AWT</title>
      <programlisting role="php">
<![CDATA[
<?php
// This example is only intended to be run as a CGI.

$frame  = new Java('java.awt.Frame', 'PHP');
$button = new Java('java.awt.Button', 'Hello Java World!');

$frame->add('North', $button);
$frame->validate();
$frame->pack();
$frame->visible = True;

$thread = new Java('java.lang.Thread');
$thread->sleep(10000);

$frame->dispose();
?>
]]>
      </programlisting>
     </example>

     Notes:

     <itemizedlist>
      <listitem>
       <simpara>
        <literal>new Java()</literal> criará uma instância de uma classe se
        um construtor apropriado estiver disponível. Se nenhum parâmetros for passado e
        o construtor padrão for utilizável já que prove acesso à classes como
        <literal>java.lang.System</literal> que expõe a maior parte de suas
        funcionalidades através de métodos estáticos.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Acessar um membro de uma instância primeiro procurará por uma propriedade bean,
        depois por campos públicos. Em outras palavras, <literal>print $date.time</literal>
        elel primeiro tentará trabalhar com <literal>$date.getTime()</literal>,
        depois com <literal>$date.time</literal>.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Tanto membros estáticos como de instância podem ser acessados em um objeto com
        a mesma sintaxe. Além disso, se o objeto java é do tipo
        <literal>java.lang.Class</literal>, membros estáticos da classe
        (campos e métodos) podem ser acessados.
       </simpara>
      </listitem>
      <listitem>
       <para>
        Exceções disparadas resultam em avisos do PHP e em resultados &null;. Os
        avisos podem ser eliminados prefixando uma chamada de método com um
        sinal "@". As seguintes APIs podem ser usadas para obter e reniciar
        o último erro:
        <itemizedlist>
         <listitem><simpara><function>java_last_exception_get</function></simpara></listitem>
         <listitem><simpara><function>java_last_exception_clear</function></simpara></listitem>
        </itemizedlist>
       </para>
      </listitem>
      <listitem>
       <simpara>
        Resolução de sobrecarga em geral é um problema complicado dada às
        diferenças nos tipos entre as duas linguagens. A extensão Java
        aplica uma métrica simples, mas relativamente eficaz, para
        determinar qual sobrecarga é a melhor.
       </simpara>
       <simpara>
        Além disso, nomes de métodos no PHP não são sensíveis ao caso, potencialmente
        aumentando o número de sobrecargas a serem escolhidas.
       </simpara>
       <simpara>
        Uma vez que um método é escolhido, os parâmetros são alterados se necessário,
        possivelmente com perda de dados (exemplo: números de ponto flutuante de
        precisão dupla serão convertidos para booleano).
        <!-- FIXME Why aren't java-doubles converted to PHP-floats? Is this
        correct? -->
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Na tradição do PHP, arrays e hashtables podem ser usados de
        forma alternada. Perceba que hashtables no PHP só podem ser indexadas
        por inteiros e strings; e que arrays de tipos primitivos em Java
        não podem ser esparsos. Também note que essas estruturas são
        passadas por valor, então pode ter custo em termos de memória e tempo.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section xml:id="java.servlet">
    <title>Java Servlet SAPI</title>
    <para>
     O Java Servlet SAPI é montado em um mecanismo definido pela extensão Java
     que permite que o processador do PHP seja executado como uma servlet.
     A vantagem principal disso da perspectiva do PHP é que os servidores web
     que suportam servlet tipicamente tomam mais cuidado com criação e reuso de
     JVMs. Instruções de configuração para o módulo SAPI do Servlet podem ser
     encontrados em <filename>php4/sapi/README</filename>.

     Avisos:

     <itemizedlist>
      <listitem>
       <simpara>
        Embora esse código seja intencionado para ser capaz de rodar em qualquer engine
        de servlet, ele só foi testado até hoje no Apache's Jakarta/tomcat. Relatos
        de bugs, estórias de sucesso e/ou patches necessárias para que esse código
        funcione em qualquer outro engine seriam apreciados.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        PHP tem o hábito de mudar o diretório de trabalho. sapi/servlet irá,
        eventualmente, mudá-lo ao anterior, mas enquanto o PHP estiver executando
        o engine do servlet ele pode não ser capaz de carregar classes do CLASSPATH
        especifidao usando caminhos relativos, ou achar o diretório de trabalho
        usado para administração e tarefas de compilação de JSPs.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>
  </partintro>

&reference.java.entities.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

