<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.11 Maintainer: surfmax Status: ready -->
 <reference id="ref.classobj">
  <title>Classes e Objetos</title>
  <titleabbrev>Classes/Objetos</titleabbrev>

  <partintro>
    <section id="classobj.intro">
     &reftitle.intro;
     <para>
      Estas funções te permitem obter informações sobre classes
      e instâncias de objetos. Você pode obter o nome da classe
      ao qual um objeto pertence, bem como suas propriedades e
      métodos. Usando estas funções, você pode descobrir não apenas
      a classe de um objeto, mas também seu parentesco
     (no caso, que classe este objeto de classe se estende).
     </para>
    </section>

   <section id="classobj.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   <section id="classobj.installation">
    &reftitle.install;
    &no.install;
   </section>

   <section id="classobj.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="classobj.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section id="classobj.constants">
    &reftitle.constants;
    &no.constants;
   </section>

    <section id="classobj.examples">
     &reftitle.examples;
     <para>
      Neste exemplo, nós primeiramente definiremos uma classe base e uma
      extensão da classe. A classe base descreve um vegetal comum,
      que é comestível ou não e que tem sua cor. A sub-classe
      <varname>Espinafre</varname> adiciona um método para cozinhá-lo e outro
      para descobrir se ele está cozido.
     </para>
     <para>
      <example>
       <title>classes.inc</title>
       <programlisting role="php">
<![CDATA[
<?php

// Classe base com propriedades e métodos de membros
class Vegetal {

    var $comestivel;
    var $cor;

    function Vegetal( $comestivel, $cor="verde" ) {
        $this->comestivel = $comestivel;
        $this->cor = $cor;
    }

    function is_comestivel() {
        return $this->comestivel;
    }

    function qual_cor() {
        return $this->cor;
    }

} // Fim da classe Vegetal

// estender a classe base
class Espinafre estende Vegetal {

    var $cozido = false;

    function Espinafre() {
        $this->Vegetal( true, "verde" );
    }

    function cozinhe() {
        $this->cozido = true;
    }

    function esta_cozido() {
        return $this->cozido;
    }

} // Fim da classe Espinafre

?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
     Nós instânciamos 2 objetos destas classes e exibimos informações
     sobre elas, incluindo o parentesco de suas classes.
     Nós também definimos algumas funções úteis, principalmente para ter
     uma boa saída de variáveis.
     </para>
     <para>
      <example>
       <title>test_script.php</title>
       <programlisting role="php">
<![CDATA[
<pre>
<?php

include "classes.inc";

// Funções utilitárias

function print_vars($obj) {
    $arr = get_object_vars($obj);
    while (list($prop, $val) = each($arr))
        echo "\t$prop = $val\n";
}

function print_methods($obj) {
    $arr = get_class_methods(get_class($obj));
    foreach ($arr as $method)
        echo "\tfunction $method()\n";
}

function class_parentesco($obj, $class) {
    if (is_subclass_of($$obj, $class)) {
        echo "Objeto $obj pertence à classe ".get_class($$obj);
        echo " uma subclasse de $class\n";
    } else {
        echo "Objeto $obj não pertence a uma subclasse de $class\n";
    }
}

// instanciar 2 objetos

$vegetariano = new Vegetal(true, "azul");
$folheado = new Espinafre();

// Exibe informação sobre os objetos
echo "vegetariano: CLASS " . get_class($vegetariano) . "\n";
echo "folheado: CLASS " . get_class($folheado);
echo ", PARENTE " . get_parent_class($folheado) . "\n";

// Mostra as propriedades de vegetariano
echo "\nvegetariano: Propriedades\n";
print_vars($vegetariano);

// e os métodos de folheado
echo "\nfolheado: Métodos\n";
print_methods($folheado);

echo "\nParentesco:\n";
class_parentesco("folheado", "Espinafre");
class_parentesco("folheado", "Vegetal");
?>
</pre>
]]>
       </programlisting>
      <para>
        Uma coisa importante para se notar no exemplo acima é que
        o objeto <varname>$folheado</varname> é uma instância da classe
        <classname>Espinafre</classname> que é uma subclasse de
        <classname>Vegetal</classname>,
        então a última parte do script acima exibirá:
       </para>
       <screen>
<![CDATA[
       [...]
Parentesco:
Objeto folheado não pertence a uma subclasse de Espinafre
Object folheado pertence à classe Espinafre uma subclasse de Vegetal
]]>
       </screen>
      </example>
     </para>
    </section>
  </partintro>

&reference.classobj.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

