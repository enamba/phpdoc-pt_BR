<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.8 Maintainer: surfmax Status: ready -->
 <reference id="ref.classobj">
  <title>Classes e Objetos</title>
  <titleabbrev>Classes/Objetos</titleabbrev>

  <partintro>
    <section id="classobj.intro">
     &reftitle.intro;
     <para>
      Estas funções te permite obter informações sobre classes
      e instâncias de objetos. Você pode obter o nome da classe
      ao qual um objeto pertence, bem como suas propriedades e
      métodos. Usando estas funções, você pode descobrir não apenas
      a classe de um objeto, mas também seu parentesco
     (no caso, que classe este objeto de classe se estende).
     </para>
    </section>
    
    <section id="classobj.requirements">
     &reftitle.required;
     &no.requirement;
    </section>
    
    <section id="classobj.installation">
     &reftitle.install;
     &no.install;
    </section>
    
    <section id="classobj.configuration">
     &reftitle.runtime;
     &no.config;
    </section>
    
    <section id="classobj.resources">
     &reftitle.resources;
     &no.resource;
    </section>
    
    <section id="classobj.constants">
     &reftitle.constants;
     &no.constants;
    </section>
    
    <section id="classobj.examples">
     &reftitle.examples;
     <para>
      Neste exemplo, nós primeiramente definiremos uma classe base e uma
	  extensãoda classe. A classe base descreve um vegetal comum,
      que é comestível ou não e que tem sua cor. A sub-classe
      <varname>Espinafre</varname> adiciona um método para cozinhá-lo e outro
      para descobrir se ele está cozido.
     </para>
     <para>
      <example>
       <title>classes.inc</title>
       <programlisting role="php">
<![CDATA[
<?php

// base class with member properties and methods
class Vegetable {

    var $edible;
    var $color;

    function Vegetable( $edible, $color="green" ) {
        $this->edible = $edible;
        $this->color = $color;
    }

    function is_edible() {
        return $this->edible;
    }

    function what_color() {
        return $this->color;
    }
    
} // end of class Vegetable

// extends the base class
class Spinach extends Vegetable {

    var $cooked = false;

    function Spinach() {
        $this->Vegetable( true, "green" );
    }

    function cook_it() {
        $this->cooked = true;
    }

    function is_cooked() {
        return $this->cooked;
    }
    
} // end of class Spinach

?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
     Nós instânciamos 2 objetos destas classes e exibimos informações 
     sobre elas, incluindo o parentesco de suas classes.
     Nós também definimos algumas funções úteis, principalmente ter uma boa saída de
     variáveis.
     </para>
     <para>
      <example>
       <title>test_script.php</title>
       <programlisting role="php">
<![CDATA[
<pre>
<?php

include "classes.inc";

// utility functions

function print_vars($obj) {
    $arr = get_object_vars($obj);
    while (list($prop, $val) = each($arr))
        echo "\t$prop = $val\n";
}

function print_methods($obj) {
    $arr = get_class_methods(get_class($obj));
    foreach ($arr as $method)
        echo "\tfunction $method()\n";
}

function class_parentage($obj, $class) {
    global $$obj;
    if (is_subclass_of($$obj, $class)) {
        echo "Object $obj belongs to class ".get_class($$obj);
        echo " a subclass of $class\n";
    } else {
        echo "Object $obj does not belong to a subclass of $class\n";
    }
}

// instantiate 2 objects

$veggie = new Vegetable(true,"blue");
$leafy = new Spinach();

// print out information about objects
echo "veggie: CLASS ".get_class($veggie)."\n";
echo "leafy: CLASS ".get_class($leafy);
echo ", PARENT ".get_parent_class($leafy)."\n";

// show veggie properties
echo "\nveggie: Properties\n";
print_vars($veggie);

// and leafy methods
echo "\nleafy: Methods\n";
print_methods($leafy);

echo "\nParentage:\n";
class_parentage("leafy", "Spinach");
class_parentage("leafy", "Vegetable");
?>
</pre>
]]>
       </programlisting>
      <para>
        Uma coisa importante para se notar no exemplo acima é que
        o objeto <varname>$leafy</varname> é uma isntância da classe
        <classname>Spinach</classname> que é uma subclasse de 
        <classname>Vegetable</classname>,
        então a última parte do script acima exibirá:
       </para>
       <screen>
<![CDATA[
       [...]
Parentage:
Object leafy does not belong to a subclass of Spinach
Object leafy belongs to class spinach a subclass of Vegetable
]]>
       </screen>
      </example>
     </para>
    </section>
  </partintro>

&reference.classobj.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

