<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 297028 Maintainer: felipe Status: ready -->

<appendix xml:id="classobj.examples">
 &reftitle.examples;
 <para>
  Neste exemplo, nós primeiramente definiremos uma classe base e uma
  extensão da classe. A classe base descreve um vegetal comum,
  que é comestível ou não e que tem sua cor. A sub-classe
  <varname>Espinafre</varname> adiciona um método para cozinhá-lo e outro
  para descobrir se ele está cozido.
 </para>
 <para>
  <example>
   <title>classes.inc</title>
   <programlisting role="php">
<![CDATA[
<?php

// Classe base com propriedades e métodos de membros
class Vegetal {

    var $comestivel;
    var $cor;

    function Vegetal($comestivel, $cor="verde")
    {
        $this->comestivel = $comestivel;
        $this->cor = $cor;
    }

    function is_comestivel()
    {
        return $this->comestivel;
    }

    function qual_cor()
    {
        return $this->cor;
    }

} // Fim da classe Vegetal

// estende a classe base
class Espinafre extends Vegetal {

    var $cozido = false;

    function Espinafre()
    {
        $this->Vegetal( true, "verde" );
    }

    function cozinhe()
    {
        $this->cozido = true;
    }

    function esta_cozido()
    {
        return $this->cozido;
    }

} // Fim da classe Espinafre

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Nós instanciamos 2 objetos destas classes e exibimos informações
  sobre elas, incluindo o parentesco de suas classes.
  Nós também definimos algumas funções úteis, principalmente para ter
  uma boa saída de variáveis.
 </para>
 <para>
  <example>
   <title>test_script.php</title>
   <programlisting role="php">
<![CDATA[
<pre>
<?php

include "classes.inc";

// utility functions

function print_vars($obj) 
{
foreach (get_object_vars($obj) as $prop => $val) {
    echo "\t$prop = $val\n";
}
}

function print_methods($obj) 
{
$arr = get_class_methods(get_class($obj));
foreach ($arr as $method) {
    echo "\tfunction $method()\n";
}
}

function class_parentage($obj, $class) 
{
if (is_subclass_of($GLOBALS[$obj], $class)) {
    echo "Object $obj belongs to class " . get_class($$obj);
    echo " a subclass of $class\n";
} else {
    echo "Object $obj does not belong to a subclass of $class\n";
}
}

// instantiate 2 objects

$veggie = new Vegetable(true, "blue");
$leafy = new Spinach();

// print out information about objects
echo "veggie: CLASS " . get_class($veggie) . "\n";
echo "leafy: CLASS " . get_class($leafy);
echo ", PARENT " . get_parent_class($leafy) . "\n";

// show veggie properties
echo "\nveggie: Properties\n";
print_vars($veggie);

// and leafy methods
echo "\nleafy: Methods\n";
print_methods($leafy);

echo "\nParentage:\n";
class_parentage("leafy", "Spinach");
class_parentage("leafy", "Vegetable");
?>
</pre>
]]>
   </programlisting>
   <para>
    Uma coisa importante para se notar no exemplo acima é que
    o objeto <varname>$folheado</varname> é uma instância da classe
    <classname>Espinafre</classname> que é uma subclasse de
    <classname>Vegetal</classname>,
    então a última parte do script acima exibirá:
   </para>
   <screen>
<![CDATA[
   [...]
Parentesco:
Objeto folheado não pertence a uma subclasse de Espinafre
Object folheado pertence à classe Espinafre uma subclasse de Vegetal
]]>
   </screen>
  </example>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

