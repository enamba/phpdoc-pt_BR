<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.5 Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/outcontrol.xml, last change in rev 1.1 -->
  <refentry id="function.ob-start">
   <refnamediv>
    <refname>ob_start</refname> 
    <refpurpose>Ativa o buffer de saída</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>bool</type><methodname>ob_start</methodname>
      <methodparam choice="opt"><type>callback</type><parameter>
        output_callback
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     Esta função irá ativar o buffer de saída. Enquanto o buffer de saída estiver ativo,
     não é enviada a saída do script (outros que não sejam cabeçalhos),
     ao invés a saída é guardada em um buffer interno.
    </para>
    <para>
     O conteúdo deste buffer interno pode ser copiado em uma variável usando
     <function>ob_get_contents</function>. Para enviar o que esta no buffer interno,
     use <function>ob_end_flush</function>. Alternativamente,
     <function>ob_end_clean</function> irá silenciosamente descartar
     o conteúdo do buffer.
    </para>
    <para>
     Uma função de callback opcional <parameter>output_callback</parameter> também
     pode ser especificada. Esta função leva uma string coo parâmetro e deve retornar
     uma string. Esta função será chamada quando <function>ob_end_flush</function>
     for chamada, ou quando o buffer de saída for descarregado ao final do
     script. Quando <parameter>output_callback</parameter> for chamada,
     ela irá receber o conteúdo do buffer como seu parâmetro e é esperado
     que ela retorne um novo buffer de saída como resultado, o qual será enviado
     para o browser. Se <parameter>output_callback</parameter> não é uma função
     que possa ser utilizada, esta função irá retornar &false;.
    </para>
    <note>
     <para>
      No PHP 4.0.4, <function>ob_gzhandler</function> para facilitar o envio de dados
      gz-encoded para browsers que suportem paginas web comprimidas.
      <function>ob_gzhandler</function> determina o tipo de codificação de conteúdo
      que o browser aceitará e enviará a sua saída de acordo.
     </para>
    </note>
    <note>
     <para>
      Antes do PHP 4.3.2 esta função não retornava &false; caso
      <parameter>output_callback</parameter> não pudesse ser executada.
     </para>
    </note>
    <para>
     Buffers de saída são empilháveis, isro é, você pode utilizar
     <function>ob_start</function> enquanto outro
     <function>ob_start</function> estiver ativo. Apenas tenha certesa 
     que você utiliza <function>ob_end_flush</function>
     o número apropriado de vezes. Se multiplas funções de callback de saída
     estiverem ativas, a saída será filtrada sequencialmente atráves de
     cada uma delas na ordem de aninhamento.
    </para>
    <para>
     <function>ob_end_clean</function>,
     <function>ob_end_flush</function>, <function>ob_clean</function>,
     <function>ob_flush</function> e <function>ob_start</function>
     não devem ser utilizados dentro de uma função de callback. Se você utiliza-los
     dentro de uma função de callback, o funcionamento é indefinido. Se você 
     quiser excluir o conteúdo de um buffer, retorne "" (uma string vazia) 
     da função de callback.
    </para>
    <para>
     <example>
      <title>Exemplo com uma função de callback definida pelo usuário</title>
      <programlisting role="php">
<![CDATA[
<?php

function callback($buffer) {

  // replace all the apples with oranges
  return (ereg_replace("apples", "oranges", $buffer));

}

ob_start("callback");

?>

<html>
<body>
<p>It's like comparing apples to oranges.
</body>
</html>

<?php

ob_end_flush();

?>
]]>
      </programlisting>
      <para>
       Irá produzir:
      </para>
      <screen>
<![CDATA[
<html>
<body>
<p>It's like comparing oranges to oranges.
</body>
</html>
]]>
      </screen>
     </example>
    </para>
    <para>
     Veja também <function>ob_get_contents</function>,
     <function>ob_end_flush</function>,
     <function>ob_end_clean</function>,
     <function>ob_implicit_flush</function> e
     <function>ob_gzhandler</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
