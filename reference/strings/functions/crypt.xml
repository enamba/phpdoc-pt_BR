<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.3 Maintainer: surfmax Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.crypt">
   <refnamediv>
    <refname>crypt</refname>
    <refpurpose>Único caminho de codificação de string (hashing)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>string</type><methodname>crypt</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>salt</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>crypt</function> retornará uma string criptografada usando o
     algoritmo de encriptação Unix Standard <abbrev>DES</abbrev>-based ou
      ou algoritmos alternativos disponíveis no sistema. Os argumentos
     são uma string para ser criptografada e uma string opcional para basear em qual encriptação está. Veja a página de encriptação Unix para mais informação.
    </para>
    <simpara>
     Se o argumento salt não é fornecido, um argumento aleatório será gerado
     pelo PHP.
    </simpara>
    <simpara>
     Alguns SO suportam mais de um tipo de codificação. De
     fato, algumas vezes a codificação Standard DES-based é substituído por
     MD5-based . O tipo de codificação é definido pelo argumento salt.
      Na instalação, o PHP determina as possíveis funções de codificação
     e aceitará salts para outros tipos. Se nenhum salt é fornecido,
     o PHP auto-gera um salt padrão de 2 caracateres por definição,
     a menos que o tipo de codificação padrão do sistema seja MD5, nesse caso
     um salt MD5-compatible aleatório será gerado. O PHP define uma constante
     com nome CRYPT_SALT_LENGTH que dirá se um salt de 2 caracteres aplica-se ao 
     seu sistema ou se o salt mais comprido de 12 caracteres é aplicavél.
    </simpara>
    <simpara>
     Se você está usando um salt fornecido, você está ciente que o salt é gerado
     uma vez. Se você está chamando essa função repetidamente, isto pode afetar a aparência e a segurança.
    </simpara>
    <simpara>
     O Standard DES-based <function>crypt</function> retorna o salt como o 
     primeiro  two characters da saída. Ele também usa apenas
     os oito primeiros caracteres da <parameter>str</parameter>, então
	 strings longas que começam com os mesmos oito caracteres gerarão o mesmo
	 resultado (quando o mesmo salt é usado).
    </simpara>
    <simpara>
     Em sistemas onde a função crypt() suporta variados 
     tipos de codificação, as seguintes funções são definidas para 0 ou 1
      a depender se um dado tipo está disponível:
    </simpara>
    <itemizedlist>
     <listitem>
      <simpara>
       CRYPT_STD_DES - Codificação Standard DES-based com um salt de 2 caracteres 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_EXT_DES - Codificação Extended DES-based com um salt de 9 caracateres 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_MD5 - Codificação MD5 com um salt de 12 caracteres começando com
       $1$
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_BLOWFISH - Codificação Blowfish com um salt de 16 caracteres
       começando com $2$
      </simpara>
     </listitem>
    </itemizedlist>
    <note>
     <simpara>
      Não há função de decodificação, desde que <function>crypt</function>
      utiliza uma algorimo de um só caminho.
     </simpara>
     </note>
    <example>
     <title><function>crypt</function> exemplos</title>
     <programlisting role="php">
<![CDATA[
<?php
$password = crypt("My1sTpassword"); // let salt be generated 

# You should pass the entire results of crypt() as the salt for comparing a
# password, to avoid problems when different hashing algorithms are used. (As
# it says above, standard DES-based password hashing uses a 2-character salt,
# but MD5-based hashing uses 12.)
if (crypt($user_input, $password) == $password) { 
   echo "Password verified!";
}
?>
]]>
     </programlisting>
    </example>
    <simpara>
     Veja também <function>md5</function> e <link linkend="ref.mcrypt">a extensão
     Mcrypt</link>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
