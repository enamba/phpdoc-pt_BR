<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.3 Maintainer: surfmax Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.strtok">
   <refnamediv>
    <refname>strtok</refname>
    <refpurpose>Tokeniza uma string</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>string</type><methodname>strtok</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam><type>string</type><parameter>arg2</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>strtok</function> divide uma string (<parameter>arg1</parameter>)
     em strings menores (tokens), com cada token sendo delimitado por qualquer caractere 
     de <parameter>arg2</parameter>.
     Quer dizer que, se você tem uma string como "Esta é uma string de exemplo" você poderia
      "tokenizá-la" em suas palavras individuais usando o caractere de espaço como 
      delimitador do token.
     <example>
      <title><function>strtok</function> exemplo</title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "This is\tan example\nstring";
/* Use tab e newline como caractere delimitador, que funciona bem  */
$tok = strtok($string," \n\t");
while ($tok) {
    echo "Word=$tok<br>";
    $tok = strtok(" \n\t");
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Note que só a primeira chamada a strtok usa o argumento string.
     Cada chamada subseqüente a strtok só precisa do delimitador a ser usado, já que
     ele mantém o caminho de onde ele está na string atual. Para iniciar novamente,
      ou tokenizar uma nova string você simplesmente chama strtok com o argumento de
      string novamente para inicializá-la. Veja que você pode por múltiplos delimitadores como
      parâmetro. A string será tokenizada quando um dos caracteres no argumento são 
      encontrados.
    </para>
    <para>
     O comportamento quando uma parte vazia foi encontrada mudou com o PHP 4.1.0. O antigo
      comportamento retornava uma string vazia, enquanto a nova, a correta, simplesmente pula 
      a parte da string:
     <example>
      <title>Comportamento antigo de <function>strtok</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump ($first_token, $second_token);

/* Output:
    string(0) ""
    string(9) "something"
*/    
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Comportamento Novo <function>strtok</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump ($first_token, $second_token);

/* Output:
    string(9) "something"
    bool(false)
*/    
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Também tome cuidado para que seus tokens não sejam iguais a "0". Isto avalia
     como &false; em expressões condicionais.
    </para>
    <para>
     Veja também <function>split</function> e
     <function>explode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
