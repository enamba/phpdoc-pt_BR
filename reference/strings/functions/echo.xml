<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Exibe uma ou mais strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <methodname>echo</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>argn...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Exibe todos os parãmetros.
    </simpara>
    <para>
     <function>echo</function> não é uma função atualmente
     (construtor da linguagem) então não é obrigatório usar parênteses.
      De fato, se você quer passar mais do que um parâmetro
      para echo, você não deve fechar os parênteses dentro de parênteses.
      Não é possível usar <function>echo</function> num contexto de
     <link linkend="functions.variable-functions">variable function</link>,
      mas você pode usar <function>print</function> no lugar dela.
     <example>
      <title><function>echo</function> exemplos</title>
      <programlisting role="php">
<![CDATA[
<?php
echo "Hello World";

echo "This spans
multiple lines. The newlines will be 
output as well";

echo "This spans\nmultiple lines. The newlines will be\noutput as well.";

echo "Escaping characters is done \"Like this\".";

//You can use variables inside of an echo statement
$foo = "foobar";
$bar = "barbaz";

echo "foo is $foo"; // foo is foobar

// Using single quotes will print the variable name, not the value
echo 'foo is $foo'; // foo is $foo

// If you are not using any other characters, you can just echo variables
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

echo <<<END
This uses the "here document" syntax to output
multiple lines with $variable interpolation. Note
that the here document terminator must appear on a
line with just a semicolon no extra whitespace!
END;

// Because echo is not a function, following code is invalid. 
($some_var) ? echo('true'): echo('false');

// However, the following examples will work:
($some_var) ? print('true'): print('false'); // print is a function
echo $some_var ? 'true': 'false'; // changing the statement around
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>echo</function> também tem uma sintaxe curta, onde você
     pode seguir imediatamente a tag de abertura com um sinal de igual.     
     <informalexample>
      <programlisting role="php">
<![CDATA[
I have <?=$foo?> foo.
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Está sintaxe curta apenas trabalha se a configuração
      <link linkend="ini.short-open-tag">short_open_tag</link> 
      está habilitada.
     </para>
    </note>
    <simpara>
     Veja também
     <function>print</function>,
     <function>printf</function>, e
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
