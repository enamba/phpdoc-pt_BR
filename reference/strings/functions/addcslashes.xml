<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.2 Maintainer: fernandoc Status: ready -->
<!-- CREDITS: surfmax -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.addcslashes">
   <refnamediv>
    <refname>addcslashes</refname>
    <refpurpose>String entre aspas com barras no estilo C </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>string</type><methodname>addcslashes</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam><type>string</type><parameter>charlist</parameter></methodparam>
     </methodsynopsis>
    <para>
     Retorna uma string com barras invertidas antes dos caracteres que 
     estão listados no parâmetro <parameter>charlist</parameter>. Ela escapa
     <literal>\n</literal>, <literal>\r</literal> etc. Como no estilo C,
     caracteres no código ASCII menores que 32 e maiores que
     126 são convertidos para representação octadecimal. 
    </para>
    <para>
     Tome cuidado se você escolher escapar caracteres 0, a, b, f, n, r, 
     t e v. Eles serão convertidos para \0, \a, \b, \f, \n, \r, \t 
     e \v. 
     No PHP \0 (&null;), \r (sinal de retorno), \n (novalinha) e \t (tab) 
     são seqüencias de escape predefinidas, enquanto em C todas essas são 
     seqüencias de escape predefinidas.
    </para>
    <para>
     <parameter>charlist</parameter> como "\0..\37", que
     que escaparia todos os caracteres em código ASCII entre 0 e 37.
     <example>
      <title><function>addcslashes</function> exemplo</title>
      <programlisting role="php">
<![CDATA[
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Quando você define uma seqüencia de caracteres no argumento charlist
     certifique-se que você sabe quais os caracteres que vêm dentro do intervalo que você definiu.
     <informalexample>
      <programlisting role="php">
<![CDATA[
echo addcslashes('foo[ ]', 'A..z');
// output:  \f\o\o\[ \]
// All upper and lower-case letters will be escaped
// ... but so will the [\]^_` and any tabs, line
// feeds, carriage returns, etc.
]]>
      </programlisting>
     </informalexample>
     Também, se o primeiro caracter no intervalo tem um valor ASCII menor
     do que o segundo, nenhum intervalo será construído.
     Apenas os caracteres do começo e do fim serão escapados.
     Use a função <function>ord</function> para encontrar
     o valor ASCII para um caracter.
     <informalexample>
      <programlisting role="php">
<![CDATA[
echo addcslashes("zoo['.']", 'z..A');
// output:  \zoo['\.']
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Veja também <function>stripcslashes</function>, 
     <function>stripslashes</function>, 
     <function>htmlspecialchars</function>, e 
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
