<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>Retorna uma string formatada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>string</type><methodname>sprintf</methodname>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Retorna uma string produzida de acordo com a string de formatação
     <parameter>format</parameter>.
    </simpara>
    <simpara>
     A string e formatação é composta de zero ou mais diretivas:
     caracteres normais (excluindo <literal>%</literal>) que são copiados diretamente 
     para o resultado, e <emphasis>especificações de conversão</emphasis>,
     cada um dos quais resulta em obter o seu próprio parâmetro. 
     Isto se aplica para <function>sprintf</function>
     e <function>printf</function>.
    </simpara>
    <para>
     Cada especificação de conversão consiste em um símbolo de porcento
     (<literal>%</literal>), seguido por um ou mais destes elementos em ordem:
     <orderedlist>
      <listitem>
       <simpara>
        Um <emphasis>especificador de prenchimento</emphasis> opcional que diz
        qual caractere será usado para prencher o resultado para
        o tamanho certo. Isto pode ser um espaço ou
        <literal>0</literal> (zero character). O padrão é prencher com
        espaços. Um caractere alternativo de prenchimento pode
        ser especificado colocando uma aspa simples (<literal>'</literal>)
        antes. Veja os exemplos abaixo.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um <emphasis>especificador de alinhamento</emphasis> opcional que diz se o resultado
        deve ser alinhado a esquerda ou a direita.
        O padrão é alinhar a direita; um caractere <literal>-</literal>
        fará com que seja alinhado a esquerda.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um número opcional, um <emphasis>especificador de tamanho</emphasis>
        que diz quantos caracteres (mínimo) deve resultar desta conversão.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um <emphasis>especificador de precisão</emphasis> opcional que diz
        quantos digitos decimais devem ser mostrados para números de ponto flutuante.
        Esta opção não tem efeito para outros tipos que não sejam
        <type>float</type>. (Outra função útil para formatar números é
        <function>number_format</function>.)
       </simpara>
      </listitem>
      <listitem>
       <para>
        Um <emphasis>especificador de tipo</emphasis> que diz que o argumento deve ser
        tratado como do tipo. Os tipos possivéis são:
        <simplelist>
         <member>
          <literal>%</literal> - Um caractere porcento. Não
          é requerido neenhum argumento.
         </member>
         <member>
          <literal>b</literal> - O argumento é tratado com um inteiro,
          e mostrado como um binário.
         </member>
         <member>
          <literal>c</literal> - O argumento é tratado como um inteiro,
          e mostrado como o caractere ASCII correspondente.
         </member>
         <member>
          <literal>d</literal> - O argumento é tratado como um inteiro,
          e mostrado como um número decimal com sinal.
         </member>
         <member>
          <literal>u</literal> - O argumento é tratado com um inteiro,
          e mostrado como um número decimal sem sinal.
         </member>
         <member>
          <literal>f</literal> - O argumento é tratado como um <type>float</type>,
          e mostrado como um número de ponto flutuante.
         </member>
         <member>
          <literal>o</literal> - O argumento é tratado com um inteiro,
          e mostrado como un número octal.
         </member>
         <member>
          <literal>s</literal> - O argumento é tratado e mostrado como
          uma string.
         </member>
         <member>
          <literal>x</literal> - O argumento é tratado como um inteiro,
          e mostrado como um número hexadecimal
          (com as letras minúsculas).
         </member>
         <member>
          <literal>X</literal> - O argumento é tratado como um inteiro,
          e mostrado como um número hexadecimal
          (com as letras maiúsculas).
         </member>
        </simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <para>
     Apartir do PHP 4.0.6 a string de formatação suporta
     numeração/troca. Aqui esta um exemplo:
     <example>
      <title>Troca de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "There are %d monkeys in the %s";
printf($format,$num,$location);
?>
]]>
      </programlisting>
     </example>
     Este deve mostrar, "There are 5 monkeys in the tree". Mas 
     imagine que nós estejamos criando a string de formatação em um arquivo separado,
     normalmente para internacionalizar e rescrevemos como:
     <example>
      <title>Troca de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %s contains %d monkeys";
printf($format,$num,$location);
?>
]]>
      </programlisting>
     </example>
     Agora nós temos um problema. A ordem dos argumentos
     na string de formatação não combina com os argumentos no código.
     Nós gostariamos de deixar o código como esta e simplesmente
     indicar na string de formatação quais argumentos pertencem aonde.
     Podemos escrever a string de formatação assim:
     <example>
      <title>Troca de argumento</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %2\$s contains %1\$d monkeys";
printf($format,$num,$location);
?>
]]>
      </programlisting>
     </example>
     Um beneficio adicional disto é ue você pode repetir os especificadores de
     conversão sem adicionar mais argumentos em seu código. Por exemplo:
     <example>
      <title>Troca de argumento</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %2\$s contains %1\$d monkeys.
           That's a nice %2\$s full of %1\$d monkeys.";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Veja também <function>printf</function>,
     <function>sscanf</function>, <function>fscanf</function>,
     <function>vsprintf</function> e
     <function>number_format</function>.
    </simpara>
   </refsect1>
   <refsect1>
    <title>Examplos</title>
    <para>
     <example>
      <title><function>sprintf</function>: inteiros prenchidos com zero</title>
      <programlisting role="php">
<![CDATA[
<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title><function>sprintf</function>: formatando dinheiro</title>
      <programlisting role="php">
<![CDATA[
<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money irá mostrar "123.1";
$formatted = sprintf("%01.2f", $money);
// echo $formatted irá mostrar "123.10"
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
