<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready --><!-- CREDITS: surfmax -->
  <refentry xml:id="function.explode" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>explode</refname>
    <refpurpose>Divide uma string em strings</refpurpose>
   </refnamediv>
   
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
     <methodsynopsis>
      <type>array</type><methodname>explode</methodname>
      <methodparam><type>string</type><parameter>delimiter</parameter></methodparam>
      <methodparam><type>string</type><parameter>string</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
     </methodsynopsis>
    <para>
     Retorna uma matriz de strings, cada uma como substring de
     <parameter>string</parameter> formada pela divisão dela
     a partir do <parameter>delimiter</parameter>.
    </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
    <para>
   <variablelist>
    <varlistentry>
     <term><parameter>delimiter</parameter></term>
     <listitem>
      <para>
       O delimitador.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       A string de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Se <parameter>limit</parameter> é definido, o array retornado irá conter
       o máximo de elementos igual a <parameter>limit</parameter> com o último
       elemento contendo o resto da <parameter>string</parameter>.
      </para>
      <para>
       Se o parâmetro <parameter>limit</parameter> é negativo, todos componentes
       exceto o último -<parameter>limit</parameter> são retornados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
    </para>
     <para>
      Ainda que <function>implode</function> pode por razões históricas
      aceitar seus parâmetros em uma das duas ordens,
      <function>explode</function> não pode. Você deve assegurar que
      o argumento <parameter>delimiter</parameter> vem antes do argumento
      <parameter>string</parameter>.
     </para>
    </refsect1>
    
  <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Se <parameter>delimiter</parameter> é uma string vazia (""),
   <function>explode</function> irá retornar &false;. Se
   <parameter>delimiter</parameter> contém um valor que não contém em
   <parameter>string</parameter>, então <function>explode</function> irá
   retornar um array contendo <parameter>string</parameter>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
     <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Suporte a <parameter>limit</parameter> negativo foi adicionado
       </entry>
      </row>
      <row>
       <entry>4.0.1</entry>
       <entry>
        O parâmetro <parameter>limit</parameter> foi adicionado
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
     </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
    <para>
     <example>
      <title><function>explode</function> exemplos</title>
      <programlisting role="php">
<![CDATA[
<?php
// Example 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// Example 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
   <example>
    <title>Exemplos de parâmetro <parameter>limit</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'one|two|three|four';

// positive limit
print_r(explode('|', $str, 2));

// negative limit (since PHP 5.1)
print_r(explode('|', $str, -1));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => one
    [1] => two|three|four
)
Array
(
    [0] => one
    [1] => two
    [2] => three
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_split</function></member>
    <member><function>str_split</function></member>
    <member><function>str_word_count</function></member>
    <member><function>strtok</function></member>
    <member><function>implode</function></member>
   </simplelist>
  </para>
 </refsect1>
   
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
