<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.19 Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/http.xml, last change in rev 1.2 -->
  <refentry id="function.header">
   <refnamediv>
    <refname>header</refname>
    <refpurpose>Envia um cabeçalho HTTP diretamente</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>int</type><methodname>header</methodname>
      <methodparam><type>string</type><parameter>string</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>replace</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>http_response_code</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>header</function> é usado para enviar diretamete cabeçalhos
     <acronym>HTTP</acronym> headers. Veja <ulink
     url="&spec.http1.1;">HTTP/1.1 specification</ulink> para maiores informações 
     sobre cabeçalhos <acronym>HTTP</acronym>.
    </para>
    <para>
     O parâmetro opcional <parameter>replace</parameter> indica quando um
     cabeçalho deverá substituir um cabeçalho similar anterior,
     ou adicionar um segundo cabeçalho do mesmo tipo. Por padrão irá substituir,
     mas se você passar &false; como segundo argumento você poderá forçar multiplos
     cabeçalhos do mesmo tipo. Por exemplo:
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
header('WWW-Authenticate: Negotiate');
header('WWW-Authenticate: NTLM', FALSE);
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     O segundo parâmetro opcional <parameter>http_response_code</parameter> força
     o código de resposta HTTP para o valor especificado. (Este parâmetro esta disonível
     no PHP 4.3.0 e posterior.)
    </para>
    <para>
     Existem dois casos especiais de chamadas de cabeçalhos.  O primeiro é um cabeçalho
     que começa com a string "<literal>HTTP/</literal>" (não é importante
     se maiúscula ou minúscula), o que será usada para enviar um código de
     situação HTTP. Por exemplo, se você configurou o apache para usar um script PHP
     para gerenciar requisições para arquivos que não existam (usando
     a diretiva <literal>ErrorDocument</literal>), você deve querer ter certesa 
     que seu script gere o código de situação apropriado.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
header("HTTP/1.0 404 Not Found");
?>
]]>
     </programlisting>
    </informalexample>
   </para>
    <note>
     <para>
      A linha com o a situação HTTP será sempre a primeira a ser enviada
      para o cliente, não importando se o <function>header</function>
      foi o primeiro a ser chamado ou não. A situação pode ser sobrescrita
      utilizando-se <function>header</function> com uma nova linha de situação
      a qualquer tempo, a menos que os cabeçalhos HTTP já tenham sido enviados.
     </para>
    </note>
    <note>
     <para>
      No PHP 3, isto somente funciona quando o PHP é compilado como um módulo do apache.
      Você poderá ter o mesmo efeito usando o cabeçalho <literal>Status</literal>.
      <informalexample>
       <programlisting role="php">
<![CDATA[
<?php
header("Status: 404 Not Found");
?>
]]>
       </programlisting>
      </informalexample>
     </para>
    </note>
    <para>
     O segundo caso especial é o cabeçalho "Location:". Não somente
     envia o seu cabeçalho para o browser, mas também retorna código de situação
     <literal>REDIRECT</literal> (302) para o browser a menos que algum código de situação
     <literal>3xx</literal> já tenha sido definido.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
header("Location: http://www.example.com/"); /* Redirect browser */

/* Tenha certesa que o código abaixo não seja executado qunado nós redirecionamos. */
exit;
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      HTTP/1.1 requer um <acronym>URI</acronym> absoluto como argumento para
      <ulink url="&spec.http1.1;-sec14.html#sec14.30">Location:</ulink>
      incluindo o tema, nome do servidor e caminho absoluto, mas
      alguns clientes aceitam URIs relativas. Você normalmente pode usar
      <literal>$_SERVER['HTTP_HOST']</literal>, <literal>$_SERVER['PHP_SELF']</literal>
      e <function>dirname</function> para fazer uma URI absoluta a partir de
      uma relativapor si mesmo:
      <informalexample>
       <programlisting role="php">
<![CDATA[
<?php
header("Location: http://".$_SERVER['HTTP_HOST']
                      .dirname($_SERVER['PHP_SELF'])
                      ."/".$relative_url);
?>
]]>
       </programlisting>
      </informalexample>
     </para>
    </note>
    <para>
     Scripts PHP normalmente geram conteúdo dinamico que não deva ser guardado em cache
     pelo browser do cliente ou qualquer cache de proxy entre o servidor e o browser
     do cliente. Muitos proxies e clientes são forçados a desabilitar o cache usando:
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// Data no passado
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");

// Sempre modificado
header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");

// HTTP/1.1
header("Cache-Control: no-store, no-cache, must-revalidate");
header("Cache-Control: post-check=0, pre-check=0", false);

// HTTP/1.0
header("Pragma: no-cache");
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      você pode pensar que suas páginas não são colocadas em cache mesmo
      que você não envie todos os cabeçalhos acima. Existem várias opções que os
      usuários podem definir em seus browser que mudam o funcionamento do cache.
      Enviando os cabeçalhos acima, você irá sobrescrever qualquer definição
      que faça seu script ser colocado em cache.
     </para>
     <para>
      Adicionalmente as configurações, <function>session_cache_limiter</function> e
      <literal>session.cache_limiter</literal> podem ser usadas para gerar automaticamente
      os cabeçalhos corretos quando estão sendo usadas sessões.
     </para>
    </note>
    <para>
     Lembre-se que <function>header</function> deve ser utilizada antes que qualquer
     saida seja enviada, seja pelo HTML, linhas ou espaços em branco em um arquivo,
     ou a partit do PHP. É um erro muito comum ler código com a função
     <function>include</function>, ou <function>require</function>, ou outra
     função que acesse arquivos, e ter espaços ou linhas em branco antes da função
     <function>header</function>. O mesmo problema existe quando usar um arquivo PHP/HTML.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<html>
<?php
/* Isto irá causar um erro. Note a saída
 * acima, o que acontece antes de header() */
header('Location: http://www.example.com/');
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      No PHP 4, você pode usar o buffer de saída para contornar este problema,
      com a sobrecarga que toda a saída do browser será guardada em buffer no servidor
      até que voc^envie ele. Você poderá fazer isso usando <function>ob_start</function>
      e <function>ob_end_flush</function> no seu script ou definido a diretiva de 
      configuração <literal>output_buffering</literal> no seu &php.ini; ou
      nos arquivos de configuração do servidor.
     </para>
    </note>
    <para>
     Se você queira que seja perguntado ao usuário para salvar os dados que você esta enviando,
     como um arquivo PDF gerado, você pode usar o cabeçalho <ulink
     url="&url.rfc;2183">Content-Disposition</ulink> para recomendar
     um nome de arquivo e forçar o browser a mostrar uma caixa salvar arquivo.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// Nós estaremos enviando um PDF
header("Content-type: application/pdf");

// Será chamado downloaded.pdf
header("Content-Disposition: attachment; filename=downloaded.pdf");

// A fonte do PDF é original.pdf
readfile('original.pdf');
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Existe um bug no Microsoft Internet Explorer 4.01 que previne
      que isto acontece. Não existe como contornar. Também existe um bug no
      Microsoft Internet Explorer 5.5 que interfere com isto,
      o qual pode ser resolvido atualizando para o Service Pack 2 oo posterior.
     </para>
    </note>
    <note>
     <simpara>
      Se <link linkend="ini.safe-mode">safe mode</link> esta ativado o
      uid do script é adicionado na parte <literal>realm</literal>
      do cabeçalho <literal>WWW-Authenticate</literal> se você definir
      este cabaçalho (usado para autenticação HTTP).
     </simpara>
    </note>
    <para>
     Veja também <function>headers_sent</function>,
     <function>setcookie</function>, e a seção sobre
     <link linkend="features.http-auth">autenticação HTTP</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
