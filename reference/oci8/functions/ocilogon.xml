<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: marcelo Status: ready $ -->
<!-- splitted from ./en/functions/oci8.xml, last change in rev 1.2 -->
  <refentry id="function.ocilogon">
   <refnamediv>
    <refname>ocilogon</refname>
    <refpurpose>Estabiliza uma conexão com o Oracle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>resource</type><methodname>ocilogon</methodname>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>db</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ocilogon</function> retorna um identificador de conexão
     necessária para a grande maioria das outras funções OCI. O terceiro parâmetro opcional 
     pode conter cada nome local de uma instância Oracle ou o
     nome colocado no arquivo tnsnames.ora para cada qual onde você queira conectar.
     Se o terceiro parâmetro não for especificado, PHP usará o nome definido na
     variável ORACLE_SID (instância Oracle) ou TWO_TASK
     (tnsnames.ora) para determinar em qual database ele irá conectar.
    </para>
    <para>Conexões são compartilhadas por nível de página quando usando
     <function>ocilogon</function>.  Isto significa que commits e
     rollbacks serão aplicados para todas as transações abertas na página, sempre que você tiver que criado múltiplas conexões.
     
    </para>
    <para>
     Esse exemplo demonstra como conexões são compartilhadas.
     <example>
      <title><function>ocilogon</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
print "<PRE>";
$db = "";

$c1 = ocilogon("scott","tiger",$db);
$c2 = ocilogon("scott","tiger",$db);

function create_table($conn)
{ $stmt = ociparse($conn,"create table scott.hallo (test varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn)
{ $stmt = ociparse($conn,"insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn)
{ ocicommit($conn);
  echo $conn." committed\n\n";
}

function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." [".ociresult($stmt,"TEST")."]\n\n";
  echo $conn."----done\n\n";
}

create_table($c1);
insert_data($c1);   // Insert a row using c1
insert_data($c2);   // Insert a row using c2

select_data($c1);   // Results of both inserts are returned
select_data($c2);   

rollback($c1);      // Rollback using c1

select_data($c1);   // Both inserts have been rolled back
select_data($c2);   

insert_data($c2);   // Insert a row using c2
commit($c2);        // Commit using c2

select_data($c1);   // Result of c2 insert is returned

delete_data($c1);   // Delete all rows in table using c1
select_data($c1);   // No rows returned
select_data($c2);   // No rows returned
commit($c1);        // Commit using c1

select_data($c1);   // No rows returned
select_data($c2);   // No rows returned

drop_table($c1);
print "</PRE>";
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Veja também <function>ociplogon</function> e
     <function>ocinlogon</function>.</simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
