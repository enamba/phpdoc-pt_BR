<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.14 Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/errorfunc.xml, last change in rev 1.1 -->
  <refentry id="function.set-error-handler">
   <refnamediv>
    <refname>set_error_handler</refname>
    <refpurpose>
     Define uma função do usuário para manusear os erros.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>string</type><methodname>set_error_handler</methodname>
      <methodparam><type>callback</type><parameter>error_handler</parameter></methodparam>
     </methodsynopsis>
    <para>
     Define uma função do usuário (<parameter>error_handler</parameter>) para manusear os 
     erros no script. Retorna a função definida anteriormente (se houver alguma),
     ou &false; em caso de erro. Esta função pode ser usada para definir o seu próprio
     meio de manusear os erros durante a execução do script,
     por exemplo em aplicações que você precisa fazer uma limpesa de dados/arquivos quando 
     um erro crítico acontece, ou quando você quer criar um erro
     sobre certas condições (usando
     <function>trigger_error</function>).
    </para>
    <para>
     A função do usuario precisa aceitar dois parâmetros: o código do erro e a string
     descrevendo o erro. Apartir do PHP 4.0.2, três parâmetros opcionais
     são fornecidos: o nome do erro onde o arquivo aconteceu, o número
     da linha onde o erro aconteceu, e o contexto onde o erro aconteceu
     (uma matriz que aponta para a tabela de símbolos ativos no
     ponto onde aconteceu o erro).
    </para>
    <note>
     <simpara>
      Ao invés de um nome de função, uma matriz contendo uma referência a um objeto
      e um nome de metodo pode ser indicado (Apartir do PHP 4.3.0).
     </simpara>
    </note>
    <note>
     <para>
      Os seguintes tipos de erro não podem ser manuseados por uma função definida pelo usuário: 
      <constant>E_ERROR</constant>, <constant>E_PARSE</constant>,
      <constant>E_CORE_ERROR</constant>, <constant>E_CORE_WARNING</constant>,
      <constant>E_COMPILE_ERROR</constant> e
      <constant>E_COMPILE_WARNING</constant>.
     </para>
    </note>
    <para>
     O exemplo abaixo mostra como manusear exceções criando
     erros e gerenciando erros com uma função definida pelo usuário:
     <example>
      <title>
       Manuseando erros com <function>set_error_handler</function> e
       <function>trigger_error</function>
      </title>
      <programlisting role="php">
<![CDATA[
<?php

// redefine the user error constants - PHP 4 only
define ("FATAL", E_USER_ERROR);
define ("ERROR", E_USER_WARNING);
define ("WARNING", E_USER_NOTICE);

// set the error reporting level for this script
error_reporting (FATAL | ERROR | WARNING);

// error handler function
function myErrorHandler ($errno, $errstr, $errfile, $errline)
{
  switch ($errno) {
  case FATAL:
    echo "<b>FATAL</b> [$errno] $errstr<br />\n";
    echo "  Fatal error in line $errline of file $errfile";
    echo ", PHP ".PHP_VERSION." (".PHP_OS.")<br />\n";
    echo "Aborting...<br />\n";
    exit(1);
    break;
  case ERROR:
    echo "<b>ERROR</b> [$errno] $errstr<br />\n";
    break;
  case WARNING:
    echo "<b>WARNING</b> [$errno] $errstr<br />\n";
    break;
  default:
    echo "Unkown error type: [$errno] $errstr<br />\n";
    break;
  }
}

// function to test the error handling
function scale_by_log ($vect, $scale)
{
  if (!is_numeric($scale) || $scale <= 0) {
    trigger_error("log(x) for x <= 0 is undefined, you used: scale = $scale",
      FATAL);
  }

  if (!is_array($vect)) {
    trigger_error("Incorrect input vector, array of values expected", ERROR);
    return null;
  }

  for ($i=0; $i<count($vect); $i++) {
    if (!is_numeric($vect[$i]))
      trigger_error("Value at position $i is not a number, using 0 (zero)",
        WARNING);
    $temp[$i] = log($scale) * $vect[$i];
  }
  return $temp;
}

// set to the user defined error handler
$old_error_handler = set_error_handler("myErrorHandler");

// trigger some errors, first define a mixed array with a non-numeric item
echo "vector a\n";
$a = array(2,3, "foo", 5.5, 43.3, 21.11);
print_r($a);

// now generate second array, generating a warning
echo "----\nvector b - a warning (b = log(PI) * a)\n";
$b = scale_by_log($a, M_PI);
print_r($b);

// this is trouble, we pass a string instead of an array
echo "----\nvector c - an error\n";
$c = scale_by_log("not array", 2.3);
var_dump($c);

// this is a critical error, log of zero or negative number is undefined
echo "----\nvector d - fatal error\n";
$d = scale_by_log($a, -2.5);

?>
]]>
      </programlisting>
      <para>
       E quando você usar este script de exemplo, a saída será:
      </para>
      <screen>
<![CDATA[
vector a
Array
(
    [0] => 2
    [1] => 3
    [2] => foo
    [3] => 5.5
    [4] => 43.3
    [5] => 21.11
)
----
vector b - a warning (b = log(PI) * a)
<b>WARNING</b> [1024] Value at position 2 is not a number, using 0 (zero)<br />
Array
(
    [0] => 2.2894597716988
    [1] => 3.4341896575482
    [2] => 0
    [3] => 6.2960143721717
    [4] => 49.566804057279
    [5] => 24.165247890281
)
----
vector c - an error
<b>ERROR</b> [512] Incorrect input vector, array of values expected<br />
NULL
----
vector d - fatal error
<b>FATAL</b> [256] log(x) for x <= 0 is undefined, you used: scale = -2.5<br />
  Fatal error in line 36 of file trigger_error.php, PHP 4.0.2 (Linux)<br />
Aborting...<br />
]]>
      </screen>
     </example>
    </para>
    <para>
     É importante lembrar que o gerenciamento de erro do padrão do PHP é completamente
     ignorado. As definições de <function>error_reporting</function> não terão efeito
     e seu gerenciador de erro será chamado. Em todo o caso, você ainda poderá
     ler o valor atual de <link linkend="ini.error-reporting">error_reporting</link> e
     ajir apropriadamente. Uma nota em particular é que este valor será 0 se
     o comando que causou o erro for precedido pelo
     <link linkend="language.operators.errorcontrol">operador de 
     controle de erro @</link>.
    </para>
    <para>
     Note também que é sua responsabilidade usar o <function>die</function>
     se necessário. Se a função que gerencia os erros retornar, a execução do script
     irá continuar a apartir do comando seguinte ao que causou o erro
    </para>
    <note>
     <para>
     Se o erro acontecer antes da execução do script(ex. enquanto o arquivo é carregado)
     a função defina pelo usuario não será chamada já que não estará ainda registrada.
     </para>
    </note>
    <para>
     Veja também <function>error_reporting</function>,
     <function>restore_error_handler</function>,
     <function>trigger_error</function> e <function>user_error</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
