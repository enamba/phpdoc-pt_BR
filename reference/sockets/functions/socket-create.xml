<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: marcelo Status: ready $ -->
<!-- splitted from ./en/functions/sockets.xml, last change in rev 1.4 -->
  <refentry xml:id="function.socket-create" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>socket_create</refname>
    <refpurpose>Cria um socket (endpoint para comunicação)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>resource</type><methodname>socket_create</methodname>
      <methodparam><type>int</type><parameter>domain</parameter></methodparam>
      <methodparam><type>int</type><parameter>type</parameter></methodparam>
      <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
     </methodsynopsis>
    <para>
     Cria e retorna um socket resource, também referenciado como um endpoint
     para comunicação. Uma conexão típica de rede é feita em cima de 2 sockets, um
     realizando o papel do cliente, e o outro realizando o papel de servidor.
    </para>
    <para>
     O parâmetro <parameter>domain</parameter> especifica a família do protocolo
     para ser usado pelo socket.
    </para>
    <table>
    <title>Famílias disponíveis Endereços/Protocolos</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Domínio</entry>
       <entry>Descrição</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>AF_INET</entry>
       <entry>
        IPv4 baseado nos protocolos de Internet. TCP e UDP são protocolos comuns dessa família de protocolos.
       </entry>
      </row>
      <row>
       <entry>AF_INET6</entry>
       <entry>
        IPv6 baseado nos protocolos de Internet. TCP e UDP são protocolos comuns dessa família         de protocolos. Suporta adicionado no <literal>PHP 5.0.0</literal>.
       </entry>
      </row>
      <row>
       <entry>AF_UNIX</entry>
       <entry>
        Família de protocolos de comunicação local. Alta eficiência e baixo
        sobrecarga fazem deste uma forte forma de IPC (Processos internos de comunicação).
       </entry>
      </row>
     </tbody>
    </tgroup>
    </table>
    <para>
     O parâmetro <parameter>type</parameter> seleciona o tipo de comunicação
     para ser usado pelo socket.
    </para>
    <table>
    <title>Tipos de socket disponíveis</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Tipo</entry>
       <entry>Descrição</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>SOCK_STREAM</entry>
       <entry>
        Fornece sequencial, seguro, e em ambos os sentidos, conexões baseadas em "byte streams".
        Dados "out-of-band" do mecanismo de transmissão devem ser suportados.
         O protocolo TCP é baseado neste tipo de socket.
       </entry>
      </row>
      <row>
       <entry>SOCK_DGRAM</entry>
       <entry>
         Suporta diagrama de dados (baixa conexão, mensagens inconfiáveis de um comprimento máximo fixo).
         O protocolo UDP protocol é baseado neste tipo de socket.
       </entry>       
      </row>
        <row>
       <entry>SOCK_SEQPACKET</entry>
       <entry>
         Fornece um sequencial, seguro, e em duas direções de tipos de conexões para transmissão de dados endereçados para o diagrama de dados de comprimento máximo fixo;
um consumidor é requerido para ler um pacote inteiro com cada chamada de leitura.
       </entry>       
      </row>
      <row>
       <entry>SOCK_RAW</entry>
       <entry>
         Fornece um protocolo de rede de acesso rápido. Este tipo especial de socket
         pode ser usado manualmente para construir algum tipo de protocolo. Um uso comum
         para esse tipo de socket é desempenhar requisições ICMP (como ping,
         traceroute, etc).
       </entry>
      </row>
      <row>
       <entry>SOCK_RDM</entry>
       <entry>
         Fornece uma camada seguro que  não garante ordenação.
         Isso é comumente não implementado no seu sistema operacional.
       </entry>
      </row>
     </tbody>
    </tgroup>
    </table>    
    <para>
     O parâmetro <parameter>protocol</parameter> configura o protocolo especificado
     dentro do <parameter>domain</parameter> especificado para ser usado
     quando houver comunicação de retorno com o socket. O valor da propriedade pode ser       retornado pelo nome usando <function>getprotobyname</function>. Se 
     o protocolo desejado é TCP, ou UDP as constantes correspondentes são 
     <constant>SOL_TCP</constant>, e <constant>SOL_UDP</constant> 
     podem também ser usadas.
    </para>
    <table>
    <title>Protocolos comuns</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Nome</entry>
       <entry>Descrição</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>icmp</entry>
       <entry>
        O protocolo de controle de mensagens internet "The Internet Control Message Protocol" é usado primariamente por gateways e hosts para reportar erros no diagrama de 
        dados de comunicação. O comando "ping" (presente em muitos modernos sistemas operacionais) é um exemplo aplicado de ICMP.
       </entry>
      </row>
      <row>
       <entry>udp</entry>
       <entry>
        O protocolo de diagrama de dados de usuários "User Datagram Protocol" é de conexão baixa, inseguro,
        protocolo com comprimento fixo. Dois destes aspectos, UDP 
        requer uma quantidade mínima de sobrecarga de protocolo.
       </entry>       
      </row>
        <row>
       <entry>tcp</entry>
       <entry>
        O protocolo de controle de transmissão é uma conexão, seguro,  
        fluxo orientado, e protocolo de ida e volta. TCP garante que todos os
        pacotes de dados irão ser recebidos na ordem que eles são enviados. Se algum pacote
        está perdido de alguma maneira durante a comunicação, TCP irá automaticamente retransmitir o pacote até que o host de destino reconheça aquele pacote. Por razões de segurança e performance, o TCP implementa nele próprio decisões apropriadas de limite de octetos do diagrama de dados abaixo da camada de comunicação. Portanto, aplicações TCP
devem permitir para possibilidades de registro de transmissões.
       </entry>
      </row>
     </tbody>
    </tgroup>
    </table>
    <para>
     <function>socket_create</function> retorna um socket resource em caso de sucesso, ou &false; 
     em caso de erro. O código de erro atual pode ser retornado chamando <function>socket_last_error</function>.
     Esse código de erro deve ser passado para <function>socket_strerror</function> para pegar uma explicação textual do erro.
    </para>
    <note>
     <para>
      Se um inválido <parameter>domain</parameter> ou
      <parameter>type</parameter> é dado, <function>socket_create</function>
      padrão é para <constant>AF_INET</constant> e
      <constant>SOCK_STREAM</constant> respectivamente e adicionamente emitem uma mensagem
      <constant>E_WARNING</constant>.
     </para>
    </note>
    <para>
     Veja também
     <function>socket_accept</function>,
     <function>socket_bind</function>,
     <function>socket_connect</function>,
     <function>socket_listen</function>,
     <function>socket_last_error</function>, e
     <function>socket_strerror</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
