<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: marcelo Status: ready $ -->
<!-- splitted from ./en/functions/sockets.xml, last change in rev 1.27 -->
  <refentry xml:id="function.socket-select" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>socket_select</refname>
    <refpurpose>
     Executa a chamada de sistema select() nos arrays dados de sockets
     com um timeout especificado
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>int</type><methodname>socket_select</methodname>
      <methodparam><type>array</type><parameter>&amp;read</parameter></methodparam>
      <methodparam><type>array</type><parameter>&amp;write</parameter></methodparam>
      <methodparam><type>array</type><parameter>&amp;except</parameter></methodparam>
      <methodparam><type>int</type><parameter>tv_sec</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>tv_usec</parameter></methodparam>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     <function>socket_select</function> aceita arrays de sockets e
     aguarda até que seu status seja alterado. Estes vem com "background" de sockets BSD
     irá reconhecer aquele array de socket resource são de fato a chamada ao arquivo descritor de configuração (fds).
     Três arrays independentes de socket resources são observados.
    </para>
    <para>
     A lista de sockets no array <parameter>read</parameter> irá ser mostrada para
     ver se o caractere disponível anterior à leitura (mais precisamente, para ver se a leitura
     não está obstruída - em particular, um socket resource está também no fim-de-arquivo (EOF) , neste caso
     o <function>socket_read</function> irá retornar uma string com comprimento zero.
    </para>
    <para>
     A lista de sockets no array <parameter>write</parameter> irá ser visualizada
     para mostrar se não é uma escrita não está obstruída.
    </para>
    <para>
     A lista de sockets no array <parameter>except</parameter> irá mostrar
     caso haja exceções.
    </para>
    <warning>
     <para>
      Na saída, os arrays são modificados para indicar qual socket resource
      atualmente alterou seu status.
     </para>
    </warning>
    <para>
     Você não precisa passar cada array para
     <function>socket_select</function>. Você pode deixá-los de fora e usar um
     array vazio ou &null; ao invés disso. Também não se esqueça que esses arrays são passados
     <emphasis>by reference</emphasis> e irão ser modificados após o retorno de
     <function>socket_select</function>.
    </para>
    <para>
     <example>
      <title>Exemplo de <function>socket_select</function></title>
      <programlisting role="php">
<![CDATA[
<?php
/* Prepare the read array */
$read = array($socket1, $socket2);

$num_changed_sockets = socket_select($read, $write = NULL, $except = NULL, 0);

if ($num_changed_sockets === false) {
    /* Error handling */
} else if ($num_changed_sockets > 0) {
    /* At least at one of the sockets something interesting happened */
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Devido a uma limitação no atual Zend Engine não é possível passar
um modificador de constante como &null; diretamente como parâmetro para
uma função que tem exceção para este parâmetro sendo passado por referência. Ao invés
disso use uma variável temporária ou uma expressão com o leftmost member
sendo uma variável temporária:
      <example>
       <title>Usando &null; com <function>socket_select</function></title>
       <programlisting role="php">
<![CDATA[
<?php
socket_select($r, $w, $e = NULL, 0);
?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     O <parameter>tv_sec</parameter> e <parameter>tv_usec</parameter>
     juntos formam o parâmetro <emphasis>timeout</emphasis>. O
     <emphasis>timeout</emphasis> é o limite máximo da quantidade de tempo passado
antes do retorno de <function>socket_select</function>.
     <parameter>tv_sec</parameter> deve ser zero , causando o retorno imediato de
     <function>socket_select</function>. Isso é útil para polling. Se <parameter>tv_sec</parameter> é &null; (sem timeout),
     <function>socket_select</function> pode bloquear definitivamente.
    </para>
    <para>
     Em caso de sucesso <function>socket_select</function> retorna o número
     de socket resorces contidos nos arrays modificados, que deve ser zero se
     alguma coisa interessante acontecer antes do timeout expirar. Em caso de erro, &false;
     é retornado. O código do erro pode ser retornado com
     <function>socket_last_error</function>.
    </para>
    <note>
     <para>
     Tenha certeza de usar o operador <literal>===</literal> quando checar por um erro. Desde de que <function>socket_select</function> deve retornar 0 a
     comparação com <literal>==</literal> deve retornar &true;:
     <example>
      <title>Entendendo resultados de <function>socket_select</function></title>
      <programlisting role="php">
<![CDATA[
<?php
if (false === socket_select($r, $w, $e = NULL, 0)) {
    echo "socket_select() failed, reason: " .
        socket_strerror(socket_last_error()) . "\n";
}
?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
    <note>
     <para>
      Esteja consciente que algumas implementações de sockets
      precisam ser manuseadas com muito cuidado. As regras básicas:
      <itemizedlist>
       <listitem>
        <simpara>
         Você deve sempre tentar usar <function>socket_select</function>
         sem timeout. Seu programa não deve fazer nada se não há dados disponíveis. Códigos que dependem de timeouts não são usualmente portáveis e dificultam o debug.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         No socket resource deve ser adicionado alguma configuração se você
         não pretende checar o resultado após a chamada de <function>socket_select</function>, e responder
de forma apropriada. Após o retorno de <function>socket_select</function>, todos os sockets resources em todos
os arrays devem ser checados. Algum socket resource que está disponível para escrita
deve ser escrito, e algum socket resource disponível para leitura deve ser lido.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Se você está lendo/escrevendo um retorno de socket em array esteja
         consciente que eles não necessariamente estão lendo/escrevendo a quantidade
         completa de dados que você requisitou. Esteja preparado para somente  habilitar para leitura/escrita um único byte.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Isso é comum na grande maioria de implementações de socket que pegam
exceções através do <parameter>except</parameter> array está fora do limite de dados recebidos no socket.
        </simpara>
       </listitem>
      </itemizedlist>
     </para>
    </note>
    <para>
     Veja também
     <function>socket_read</function>,
     <function>socket_write</function>,
     <function>socket_last_error</function> e
     <function>socket_strerror</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
