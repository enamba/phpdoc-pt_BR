<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.6 Maintainer: fernandoc Status: ready -->
<!-- CREDITS: surfmax -->
<!-- splitted from ./en/functions/session.xml, last change in rev 1.23 -->
  <refentry id="function.session-set-save-handler">
   <refnamediv>
    <refname>session_set_save_handler</refname>
    <refpurpose>
     Define a sequência de funções de armazenamento 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>bool</type><methodname>session_set_save_handler</methodname>
      <methodparam><type>string</type><parameter>open</parameter></methodparam><methodparam><type>string</type><parameter>close</parameter></methodparam><methodparam><type>string</type><parameter>read</parameter></methodparam><methodparam><type>string</type><parameter>write</parameter></methodparam><methodparam><type>string</type><parameter>destroy</parameter></methodparam><methodparam><type>string</type><parameter>gc</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>session_set_save_handler</function> define a sequência 
     de funções de armazenamento  que é usada para guardar e devolver
     dados associados à sessão. Esta é mais usual quando um
     quando um método de armazenamento, a não ser que aquele oferecido por 
     sessões do PHP seja preferível.  i.e. Guardar dados de sessão em um
     banco de dados local.
     &return.success;
    </para>
    <note>
     <para>
      A função "write" handler não é executada até depois que o fluxo de saída
      esteja fechado. Assim, a saída de instruções debugging na função
      "write" handler poderá nunca ser vista pelo navegador. Se a saída 
      debugging é necessária, ao invés disso é sugerido que a saída debug 
      seja escrita para um arquivo.
     </para>
    </note>
    <note>
     <para>
      A função "write" handler não é executada se a sessão não contém dados;
      isto se aplica sempre se variáveis de sessão vazias são registradas. Esta
      difere à sessão padrão de save handler baseado em arquivos, que cria
      arquivos de sessão vazios.
     </para>
    </note>
    <para>
     O seguinte exemplo oferece um aramzenamento de sessão baseado em
      arquivos similar a sessões de PHP padrões save handler
     <parameter>files</parameter>.  Este exemplo poderia facilmente ser
     extendido para outras bases de dados usando seu gerente de banco de dados favorito suportado pelo PHP.
    </para>
    <para>
     A função "Read" deve retornar um valor string sempre que fizer o save handler
      trabalhar como o esperado. Retorna uma string vazia se não existe dados para
     ler. Retorna valores de outros handlers que estejam convertidos para expressões booleanas. TRUE em sucesso, FALSE em falha.
    </para>
    <para>
     <example>
      <title>
       <function>session_set_save_handler</function> exemplo
      </title>
      <programlisting role="php">
<![CDATA[
<?php
function open ($save_path, $session_name) {
  global $sess_save_path, $sess_session_name;
       
  $sess_save_path = $save_path;
  $sess_session_name = $session_name;
  return(true);
}

function close() {
  return(true);
}

function read ($id) {
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "r")) {
    $sess_data = fread($fp, filesize($sess_file));
    return($sess_data);
  } else {
    return(""); // Deve retornar "" aqui.
  }

}

function write ($id, $sess_data) {
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "w")) {
    return(fwrite($fp, $sess_data));
  } else {
    return(false);
  }

}

function destroy ($id) {
  global $sess_save_path, $sess_session_name;
       
  $sess_file = "$sess_save_path/sess_$id";
  return(@unlink($sess_file));
}

/************************************************
 * AVISO - você precisa implementar alguns tipos*
 *  de rotinas de garbage collection aqui.      *
 ************************************************/
function gc ($maxlifetime) {
  return true;
}

session_set_save_handler ("open", "close", "read", "write", "destroy", "gc");

session_start();

// Use o resto da sessão normalmente

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Veja também a diretiva de configuração <link linkend="ini.session.save-handler">session.save_handler</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
